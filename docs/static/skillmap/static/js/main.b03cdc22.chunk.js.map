{"version":3,"sources":["actions/types.ts","lib/skillMapUtils.ts","store/reducer.ts","store/store.ts","actions/dispatch.ts","components/HeaderBar.tsx","components/Banner.tsx","components/Modal.tsx","components/CompletionModal.tsx","components/CarouselItem.tsx","components/Carousel.tsx","components/SkillCard.tsx","components/SkillCarousel.tsx","lib/skillMapParser.ts","lib/browserUtils.ts","lib/workspaceProvider.ts","lib/indexedDBWrapper.ts","components/makecodeFrame.tsx","App.tsx","index.tsx"],"names":["ADD_SKILL_MAP","CLEAR_SKILL_MAPS","CHANGE_SELECTED_ITEM","SET_HEADERID_FOR_ACTIVITY","OPEN_ACTIVITY","CLOSE_ACTIVITY","SET_PAGE_TITLE","SET_PAGE_DESCRIPTION","SET_PAGE_INFO_URL","SHOW_COMPLETION_MODAL","HIDE_COMPLETION_MODAL","isActivityCompleted","user","mapId","activityId","lookupActivityProgress","isCompleted","mapProgress","activityState","initialState","title","description","completedTags","maps","setHeaderIdForActivity","headerId","existing","topReducer","state","action","type","actions","map","selectedItem","id","editorView","currentMapId","currentActivityId","currentHeaderId","undefined","infoUrl","modal","store","createStore","dispatchOpenActivity","HeaderBarImpl","onBackClicked","props","dispatchCloseActivity","activityOpen","this","className","role","onClick","React","mapDispatchToProps","HeaderBar","connect","ownProps","BannerImpl","icon","Banner","Modal","handleModalClick","e","stopPropagation","preventDefault","handleCloseClick","onClose","setState","visible","children","length","el","i","label","CompletionModalImpl","displayName","nextActivityId","dispatchHideCompletionModal","completionModalTitle","completionModalTextSegments","split","push","CompletionModal","activity","activities","next","CarouselItemTemplate","CarouselItem","item","itemTemplate","selected","onSelect","Inner","Carousel","carouselRef","handleLeftArrowClick","scrollBy","left","window","innerWidth","handleRightArrowClick","handleScroll","scrollLeft","showLeft","showRight","scrollWidth","clientWidth","addEventListener","removeEventListener","items","itemClassName","onItemSelect","prependChildren","appendChildren","onScroll","ref","SkillCardImpl","handleActionButtonClick","status","imageUrl","tags","src","alt","t","getSkillCardActionText","SkillCard","root","checkRecursive","some","SkillCarouselImpl","dispatchChangeSelectedItem","handleEndCardClick","dispatchShowCompletionModal","getItems","url","endCard","Object","keys","k","isMapCompleted","getEndCard","SkillCarousel","parseSkillMap","text","metadata","section","sections","lines","currentSection","currentKey","currentValue","line","trim","startsWith","headerMatch","exec","pushSection","headerKind","header","attributes","keyMatch","toLowerCase","getSectionsFromText","parsed","start","buildMapFromSections","slice","result","prerequisites","parts","part","match","tag","numberCompleted","parseInt","inflateSkillMap","inflateActivity","error","nextIds","reachable","checkForLoopsRecursive","visited","console","warn","parseList","editor","list","includeDuplicates","p","filter","forEach","message","apiRoot","parseHash","hash","cmd","arg","location","source","a","replace","target","pxtTargetBundle","name","httpGetAsync","rawUrl","Promise","resolve","reject","request","XMLHttpRequest","err","responseText","open","send","workspace","workspacePromise","IDBWrapper","version","upgradeHandler","quotaExceededHandler","_db","Error","op","pxt","log","tickEvent","mode","throwIfNotOpened","transaction","objectStore","indexedDB","mozIndexedDB","webkitIndexedDB","msIndexedDB","onsuccess","onerror","errorHandler","onupgradeneeded","ev","storeName","getObjectStore","get","cursor","openCursor","data","value","continue","put","add","delete","clear","deleteDatabase","getWorkspaceAsync","IndexedDBWorkspace","initAsync","then","wp","db","databaseName","createObjectStore","projectTable","keyPath","projectKey","userTable","userKey","openAsync","getAsync","entry","project","setAsync","editorUrl","hostname","appTheme","embedUrl","MakeCodeFrameImpl","messageQueue","handleFrameRef","contentWindow","onMessageReceived","event","handleEditorTickEvent","handleWorkspaceSyncRequest","handleWorkspaceSaveRequestAsync","JSON","stringify","handleWorkspaceReadyEventAsync","loaded","postMessage","shift","sendMessage","success","projects","dispatchSetHeaderIdForActivity","activityHeaderId","saveProjectAsync","getProjectAsync","path","tutorialPath","activityType","tick","onEditorLoaded","MakeCodeFrame","AppImpl","handleHashChange","fetchAndParseSkillMaps","getMarkdownAsync","md","dispatchClearSkillMaps","dispatchAddSkillMap","dispatchSetPageTitle","dispatchSetPageDescription","skillMaps","Component","dispatchSetPageInfoUrl","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b03cdc22.chunk.js","sourcesContent":["export const ADD_SKILL_MAP = \"ADD_SKILL_MAP\";\nexport const CLEAR_SKILL_MAPS = \"CLEAR_SKILL_MAPS\";\nexport const CHANGE_SELECTED_ITEM = \"CHANGE_SELECTED_ITEM\";\nexport const SET_HEADERID_FOR_ACTIVITY = \"SET_HEADERID_FOR_ACTIVITY\";\nexport const OPEN_ACTIVITY = \"OPEN_ACTIVITY\";\nexport const CLOSE_ACTIVITY = \"CLOSE_ACTIVITY\";\n\nexport const SET_PAGE_TITLE = \"SET_PAGE_TITLE\";\nexport const SET_PAGE_DESCRIPTION = \"SET_PAGE_DESCRIPTION\";\nexport const SET_PAGE_INFO_URL = \"SET_PAGE_INFO_URL\";\n\nexport const SHOW_COMPLETION_MODAL = \"SHOW_COMPLETION_MODAL\";\nexport const HIDE_COMPLETION_MODAL = \"HIDE_COMPLETION_MODAL\";\n","\nexport function isMapCompleted(user: UserState, map: SkillMap) {\n    if (Object.keys(map?.activities).some(k => !user?.mapProgress[map.mapId]?.activityState[k]?.isCompleted)) return false;\n    return true;\n}\n\nexport function isActivityCompleted(user: UserState, mapId: string, activityId: string) {\n    return !!(lookupActivityProgress(user, mapId, activityId)?.isCompleted);\n}\n\nexport function isMapUnlocked(user: UserState, map: SkillMap) {\n    for (const pre of map.prerequisites) {\n        if (pre.type === \"tag\") {\n            const numCompleted = user.completedTags[pre.tag];\n            if (numCompleted === undefined || numCompleted < pre.numberCompleted) return false;\n        }\n        else if (pre.type === \"activity\") {\n            if (user.mapProgress[pre.mapId]) return false;\n        }\n    }\n\n    return true;\n}\n\nexport function isActivityUnlocked(user: UserState, map: SkillMap, activityId: string) {\n    if (map.root.activityId === activityId) return true;\n\n    return checkRecursive(map.root);\n\n    function checkRecursive(root: MapActivity) {\n        if (isActivityCompleted(user, map.mapId, root.activityId)) {\n            if (root.next.some(activity => activity.activityId === activityId)) {\n                return true;\n            }\n\n            for (const next of root.next) {\n                if (checkRecursive(next)) return true;\n            }\n        }\n\n        return false;\n    }\n}\n\nexport function lookupActivityProgress(user: UserState, mapId: string, activityId: string) {\n    return user.mapProgress[mapId]?.activityState[activityId]\n}\n","import * as actions from '../actions/types'\nimport { lookupActivityProgress } from '../lib/skillMapUtils';\n\nexport interface SkillMapState {\n    title: string;\n    description: string;\n    infoUrl?: string;\n    user: UserState;\n    maps: { [key: string]: SkillMap };\n    selectedItem?: string;\n\n    editorView?: EditorViewState;\n    modal?: ModalState;\n}\n\nexport interface EditorViewState {\n    currentHeaderId?: string;\n    currentMapId: string;\n    currentActivityId: string;\n}\n\ninterface ModalState {\n    currentMapId?: string;\n    currentActivityId?: string;\n}\n\nconst initialState: SkillMapState = {\n    title: \"Game Maker Guide\",\n    description: \"Level up your game making skills by completing the tutorials in this guide.\",\n    user: {\n        mapProgress: {},\n        completedTags: {}\n    },\n    maps: {}\n}\n\nconst topReducer = (state: SkillMapState = initialState, action: any): SkillMapState => {\n    switch (action.type) {\n        case actions.ADD_SKILL_MAP:\n            return {\n                ...state,\n                user: {\n                    ...state.user,\n                    mapProgress: {\n                        ...state.user.mapProgress,\n                        [action.map.mapId]: { mapId: action.map.mapId, activityState: { } }\n                    }\n                },\n                maps: {\n                    ...state.maps,\n                    [action.map.mapId]: action.map\n                }\n            }\n        case actions.CLEAR_SKILL_MAPS:\n            return {\n                ...state,\n                maps: {}\n            };\n        case actions.CHANGE_SELECTED_ITEM:\n            return {\n                ...state,\n                selectedItem: action.id\n            };\n        case actions.OPEN_ACTIVITY:\n            return {\n                ...state,\n                editorView: {\n                    currentMapId: action.mapId,\n                    currentActivityId: action.activityId,\n                    currentHeaderId: lookupActivityProgress(state.user, action.mapId, action.activityId)?.headerId\n                }\n            };\n        case actions.CLOSE_ACTIVITY:\n            return {\n                ...state,\n                editorView: undefined\n            };\n        case actions.SET_HEADERID_FOR_ACTIVITY:\n            return {\n                ...state,\n                editorView: {\n                    ...state.editorView!,\n                    currentHeaderId: action.id\n                },\n                user: setHeaderIdForActivity(state.user, state.editorView!.currentMapId, state.editorView!.currentActivityId, action.id)\n            };\n        case actions.SET_PAGE_TITLE:\n            return {\n                ...state,\n                title: action.title\n            }\n        case actions.SET_PAGE_DESCRIPTION:\n            return {\n                ...state,\n                description: action.description\n            }\n        case actions.SET_PAGE_INFO_URL:\n            return {\n                ...state,\n                infoUrl: action.infoUrl\n            }\n        case actions.SHOW_COMPLETION_MODAL:\n            return {\n                ...state,\n                modal: { currentMapId: action.mapId, currentActivityId: action.activityId }\n            };\n        case actions.HIDE_COMPLETION_MODAL:\n            return {\n                ...state,\n                modal: undefined\n            };\n        default:\n            return state\n    }\n}\n\n\nexport function setHeaderIdForActivity(user: UserState, mapId: string, activityId: string, headerId: string): UserState {\n    let existing = lookupActivityProgress(user, mapId, activityId);\n\n    if (!existing) {\n        existing = {\n            isCompleted: false,\n            activityId,\n            headerId\n        }\n    }\n\n    return {\n        ...user,\n        mapProgress: {\n            ...user.mapProgress,\n            [mapId]: {\n                ...(user.mapProgress[mapId] || { mapId }),\n                activityState: {\n                    ...(user.mapProgress[mapId]?.activityState || {}),\n                    [activityId]: {\n                        ...existing,\n                        headerId: headerId\n                    }\n                }\n            }\n        }\n    };\n}\n\nexport default topReducer;","import { createStore } from 'redux';\n\nimport topReducer from './reducer';\n\nconst store = createStore(topReducer);\nexport default store;","import * as actions from './types'\n\nexport const dispatchAddSkillMap = (map: SkillMap) => ({ type: actions.ADD_SKILL_MAP, map });\nexport const dispatchClearSkillMaps = () => ({ type: actions.CLEAR_SKILL_MAPS });\nexport const dispatchChangeSelectedItem = (id: string) => ({ type: actions.CHANGE_SELECTED_ITEM, id });\nexport const dispatchSetHeaderIdForActivity = (id: string) => ({ type: actions.SET_HEADERID_FOR_ACTIVITY, id });\nexport const dispatchOpenActivity = (mapId: string, activityId: string) => ({ type: actions.OPEN_ACTIVITY, mapId, activityId });\nexport const dispatchCloseActivity = () => ({ type: actions.CLOSE_ACTIVITY });\n\nexport const dispatchSetPageTitle = (title: string) => ({ type: actions.SET_PAGE_TITLE, title });\nexport const dispatchSetPageDescription = (description: string) => ({ type: actions.SET_PAGE_DESCRIPTION, description });\nexport const dispatchSetPageInfoUrl = (infoUrl: string) => ({ type: actions.SET_PAGE_INFO_URL, infoUrl });\n\nexport const dispatchShowCompletionModal = (mapId: string, activityId?: string) => ({ type: actions.SHOW_COMPLETION_MODAL, mapId, activityId });\nexport const dispatchHideCompletionModal = () => ({ type: actions.HIDE_COMPLETION_MODAL });\n","/// <reference path=\"../lib/skillMap.d.ts\" />\nimport * as React from \"react\";\n\nimport { connect } from 'react-redux';\nimport { dispatchCloseActivity } from '../actions/dispatch';\nimport { SkillMapState } from '../store/reducer';\n\n\ninterface HeaderBarProps {\n    activityOpen: boolean;\n    dispatchCloseActivity: () => void;\n}\n\nexport class HeaderBarImpl extends React.Component<HeaderBarProps> {\n    render() {\n        const { activityOpen } = this.props;\n\n        return <div className=\"header\">\n            <div className=\"header-left\">\n                <i className=\"icon game\" />\n                { activityOpen && <i className=\"icon arrow left\" role=\"button\" onClick={this.onBackClicked}/> }\n            </div>\n            <div className=\"spacer\" />\n            <div className=\"header-right\"><i className=\"icon square\" />MICROSOFT</div>\n        </div>\n    }\n\n    onBackClicked = () => {\n        this.props.dispatchCloseActivity();\n    }\n}\n\n\nfunction mapStateToProps(state: SkillMapState, ownProps: any) {\n    if (!state) return {};\n    return {\n        activityOpen: !!state.editorView\n    }\n}\n\n\nconst mapDispatchToProps = {\n    dispatchCloseActivity\n};\n\nexport const HeaderBar = connect(mapStateToProps, mapDispatchToProps)(HeaderBarImpl);","import * as React from \"react\";\nimport { connect } from 'react-redux';\n\nimport { SkillMapState } from '../store/reducer';\n\ninterface BannerProps {\n    title: string;\n    description: string;\n    icon: string;\n}\n\nexport class BannerImpl extends React.Component<BannerProps> {\n    render() {\n        const  { title, description, icon } = this.props;\n        return <div className=\"banner\">\n            <div className=\"banner-card\">\n                <i className={`icon ${icon}`} />\n                <div className=\"banner-text\">\n                    <div className=\"banner-title\">{title}</div>\n                    <div className=\"banner-description\">{description}</div>\n                </div>\n            </div>\n        </div>\n    }\n}\n\nfunction mapStateToProps(state: SkillMapState, ownProps: any) {\n    return {\n        title: state.title,\n        description: state.description\n    };\n}\n\nexport const Banner = connect(mapStateToProps)(BannerImpl);","import * as React from \"react\";\n\nimport '../styles/modal.css'\n\nexport interface ModalAction {\n    label: string;\n    className?: string;\n    onClick: () => void;\n}\n\ninterface ModalProps {\n    title: string;\n    actions?: ModalAction[];\n    onClose?: () => void;\n}\n\nexport class Modal extends React.Component<ModalProps> {\n    protected handleModalClick = (e: any) => {\n        e.stopPropagation();\n        e.preventDefault();\n    }\n\n    protected handleCloseClick = () => {\n        if (this.props.onClose) this.props.onClose();\n        this.setState({ visible: false });\n    }\n\n    render() {\n        const  { title, actions } = this.props;\n        return <div className=\"modal-overlay\" onClick={this.handleCloseClick}>\n            <div className=\"modal\" onClick={this.handleModalClick}>\n                <div className=\"modal-header\">\n                    <div className=\"modal-title\">{title}</div>\n                    <div className=\"spacer\" />\n                    <div className=\"modal-close-icon\" onClick={this.handleCloseClick}><i className=\"icon close\"/></div>\n                </div>\n                <div className=\"modal-body\">\n                    { this.props.children }\n                </div>\n                {actions && actions.length > 0 && <div className=\"modal-actions\">\n                    {actions.map((el, i) => {\n                        return <div key={i} className={`modal-button ${el.className}`} onClick={el.onClick}>{el.label}</div>\n                    })}\n                </div>}\n            </div>\n        </div>\n    }\n}\n","/// <reference path=\"../lib/skillMap.d.ts\" />\n\nimport * as React from \"react\";\nimport { connect } from 'react-redux';\n\nimport { SkillMapState } from '../store/reducer';\nimport { dispatchOpenActivity, dispatchHideCompletionModal } from '../actions/dispatch';\n\nimport { Modal, ModalAction } from './Modal';\n\ntype CompletionModalType = \"map\" | \"activity\";\n\ninterface CompletionModalProps {\n    type?: CompletionModalType;\n    mapId?: string;\n    displayName?: string;\n    nextActivityId?: string;\n    dispatchOpenActivity: (mapId: string, activityId: string) => void;\n    dispatchHideCompletionModal: () => void;\n}\n\nexport class CompletionModalImpl extends React.Component<CompletionModalProps> {\n    render() {\n        const  { type, mapId, displayName, nextActivityId, dispatchOpenActivity, dispatchHideCompletionModal } = this.props;\n        if (!type) return <div />\n\n        const completionModalTitle = type === \"activity\" ? \"Activity Complete!\" : \"Path Complete!\";\n        const completionModalText = \"Good work! You've completed {0}. Keep going!\";\n        const completionModalTextSegments = completionModalText.split(\"{0}\");\n\n        const actions: ModalAction[] = [];\n        if (type === \"activity\" && mapId && nextActivityId) {\n            actions.push({ label:\"NEXT\", onClick: () => {\n                dispatchHideCompletionModal();\n                dispatchOpenActivity(mapId, nextActivityId);\n             } });\n        } else {\n            actions.push({ label: \"CERTIFICATE\", onClick: () => {} });\n        }\n\n        return <Modal title={completionModalTitle} actions={actions} onClose={() => dispatchHideCompletionModal()}>\n            {completionModalTextSegments[0]}{<strong>{displayName}</strong>}{completionModalTextSegments[1]}\n        </Modal>\n    }\n}\n\nfunction mapStateToProps(state: SkillMapState, ownProps: any) {\n    if (!state) return {};\n    const { currentMapId, currentActivityId } = state.modal || {};\n    let type: CompletionModalType | undefined;\n    let displayName: string | undefined;\n    let nextActivityId: string | undefined;\n\n    if (currentMapId) {\n        const map = state.maps[currentMapId];\n        if (currentActivityId) {\n            const activity = map.activities[currentActivityId];\n            type = \"activity\";\n            displayName = activity.displayName;\n            nextActivityId = activity.next?.[0].activityId;\n        } else {\n            type = \"map\";\n            displayName = map.displayName;\n        }\n    }\n\n    return { type, mapId: currentMapId, displayName, nextActivityId }\n}\n\nconst mapDispatchToProps = {\n    dispatchOpenActivity,\n    dispatchHideCompletionModal\n};\n\nexport const CompletionModal = connect(mapStateToProps, mapDispatchToProps)(CompletionModalImpl);\n","import * as React from \"react\";\n\nexport interface Item {\n    id: string;\n    label?: string;\n    url?: string;\n    imageUrl?: string;\n}\n\ninterface CarouselItemTemplateProps extends Item {\n}\n\nfunction CarouselItemTemplate(props: CarouselItemTemplateProps) {\n    const { label } = props;\n    return <span>{ label }</span>\n}\n\ninterface CarouselItemProps {\n    item: Item;\n    itemTemplate?: any;\n    selected?: boolean;\n    className?: string;\n    onSelect?: (id: string) => void;\n}\n\nexport function CarouselItem(props: CarouselItemProps) {\n    const { item, itemTemplate, selected, className, onSelect } = props;\n    const Inner = itemTemplate || CarouselItemTemplate;\n\n    const handleClick = () => { if (onSelect) onSelect(item.id); };\n\n    return <div className={`carousel-item ${selected ? 'selected' : ''} ${className || ''}`} onClick={handleClick}>\n        <Inner {...item} />\n    </div>\n}","import * as React from \"react\";\n\nimport { Item, CarouselItem } from './CarouselItem';\n\nimport '../styles/carousel.css'\nimport { ComponentClass } from \"react-redux\";\n\ninterface CarouselProps {\n    title?: string;\n    items: Item[];\n    selectedItem?: string;\n    itemClassName?: string;\n    itemTemplate?: ((props: Item) => JSX.Element) | ComponentClass<any>;\n    onItemSelect?: (id: string) => void;\n    prependChildren?: JSX.Element[];\n    appendChildren?: JSX.Element[];\n}\n\ninterface CarouselState {\n    showLeft: boolean;\n    showRight: boolean;\n}\n\nexport class Carousel extends React.Component<CarouselProps, CarouselState> {\n    protected carouselRef: any;\n    constructor(props: CarouselProps) {\n        super(props);\n\n        this.state = { showLeft: false, showRight: true };\n    }\n\n    componentDidMount() {\n        window.addEventListener(\"resize\", this.handleScroll);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"resize\", this.handleScroll);\n    }\n\n    protected handleLeftArrowClick = () => {\n        this.carouselRef.scrollBy({ left: - (window.innerWidth / 2) });\n    }\n\n    protected handleRightArrowClick = () => {\n        this.carouselRef.scrollBy({ left: window.innerWidth / 2 });\n    }\n\n    protected handleScroll = () => {\n        const scrollLeft = this.carouselRef.scrollLeft;\n        this.setState({ showLeft: scrollLeft !== 0, showRight: scrollLeft !== this.carouselRef.scrollWidth - this.carouselRef.clientWidth })\n    }\n\n    render() {\n        const { title, items, selectedItem, itemTemplate, itemClassName, onItemSelect, prependChildren, appendChildren } = this.props;\n        const { showLeft, showRight } = this.state;\n\n        return <div className=\"carousel\">\n            {title && <div className=\"carousel-title\">{title}</div>}\n            {showLeft && <div className=\"carousel-arrow left\" onClick={this.handleLeftArrowClick}>\n                <i className=\"icon chevron left\" />\n            </div>}\n            <div className=\"carousel-items\">\n                <div className=\"carousel-items-inner\" onScroll={this.handleScroll} ref={(el) => this.carouselRef = el}>\n                    {prependChildren}\n                    {items.map((el, i) => {\n                        return <CarouselItem key={i} className={itemClassName} item={el} itemTemplate={itemTemplate} selected={selectedItem === el.id} onSelect={onItemSelect} />\n                    })}\n                    {appendChildren}\n                </div>\n            </div>\n            {showRight && <div className=\"carousel-arrow right\" onClick={this.handleRightArrowClick}>\n                <i className=\"icon chevron right\" />\n            </div>}\n        </div>\n    }\n}\n","import * as React from \"react\";\nimport { connect } from 'react-redux';\n\nimport { SkillMapState } from '../store/reducer';\nimport { Item } from './CarouselItem';\n\nimport { dispatchOpenActivity } from '../actions/dispatch';\n\nimport { isActivityCompleted, isActivityUnlocked, lookupActivityProgress, } from '../lib/skillMapUtils';\n\nimport '../styles/skillcard.css'\n\ntype SkillCardStatus = \"locked\" | \"notstarted\" | \"inprogress\" | \"completed\" ;\n\ninterface SkillCardProps extends Item {\n    mapId: string;\n    description?: string;\n    imageUrl?: string;\n    tags?: string[];\n    status?: SkillCardStatus;\n    dispatchOpenActivity: (mapId: string, activityId: string) => void;\n}\n\nexport class SkillCardImpl extends React.Component<SkillCardProps> {\n    protected getSkillCardActionText(): string {\n        switch (this.props.status) {\n            case \"locked\":\n                return \"LOCKED\"\n            case \"completed\":\n                return \"VIEW CODE\"\n            case \"inprogress\":\n                return \"CONTINUE\"\n            case \"notstarted\":\n            default:\n                return \"START\"\n        }\n    }\n\n    protected handleActionButtonClick = () => {\n        const { status, mapId, id, dispatchOpenActivity } = this.props;\n\n        switch (status) {\n            case \"locked\":\n            case \"completed\":\n                break;\n            case \"inprogress\":\n            case \"notstarted\":\n            default:\n                return dispatchOpenActivity(mapId, id);\n        }\n    }\n\n    render() {\n        const { label, description, imageUrl, tags, status } = this.props;\n\n        return <div className={`skill-card ${status || ''}`}>\n            <div className=\"skill-card-display\">\n                {status === \"locked\" && <div className=\"skill-card-overlay\" />}\n                <div className=\"skill-card-image\">\n                    {imageUrl ? <img src={imageUrl} alt={`Preview of activity content`} /> : <i className=\"icon game\" />}\n                </div>\n                <div className=\"skill-card-label\">\n                    <div className=\"skill-card-title\">\n                        {(status === \"locked\" || status === \"completed\") && <i className={`icon ${status === \"locked\" ? \"lock\" : \"check circle\"}`} />}\n                        <span>{label}</span>\n                    </div>\n                    <div className=\"skill-card-tags\">\n                        {tags?.map((t, i) => {\n                            return <div key={i}>{t}</div>\n                        })}\n                    </div>\n                </div>\n            </div>\n            <div className=\"skill-card-info\">\n                <div className=\"skill-card-title\">{label}</div>\n                <div className=\"skill-card-description\">{description}</div>\n                <div className=\"spacer\"></div>\n                <div className=\"skill-card-action\">\n                    {status === \"completed\" && <div className=\"skill-card-button-icon\"><i className=\"xicon redo\"></i></div>}\n                    <div className=\"skill-card-button\" role=\"button\" onClick={this.handleActionButtonClick}>{this.getSkillCardActionText()}</div>\n                </div>\n            </div>\n        </div>\n    }\n}\n\nfunction mapStateToProps(state: SkillMapState, ownProps: any) {\n    let status: SkillCardStatus = \"locked\";\n    if (state.user && state.maps?.[ownProps.mapId] && isActivityUnlocked(state.user, state.maps[ownProps.mapId], ownProps.id)) {\n        if (isActivityCompleted(state.user, ownProps.mapId, ownProps.id)) {\n            status = \"completed\";\n        } else if (lookupActivityProgress(state.user, ownProps.mapId, ownProps.id)?.headerId) {\n            status = \"inprogress\";\n        } else {\n            status = \"notstarted\";\n        }\n    }\n\n    return {\n        status\n    };\n}\n\nconst mapDispatchToProps = {\n    dispatchOpenActivity\n}\n\nexport const SkillCard = connect(mapStateToProps, mapDispatchToProps)(SkillCardImpl);","/// <reference path=\"../lib/skillMap.d.ts\" />\n\nimport * as React from \"react\";\nimport { connect } from 'react-redux';\n\nimport { SkillMapState } from '../store/reducer';\nimport { dispatchChangeSelectedItem, dispatchShowCompletionModal } from '../actions/dispatch';\nimport { isMapCompleted } from '../lib/skillMapUtils';\nimport { Carousel } from './Carousel';\nimport { Item } from './CarouselItem';\nimport { SkillCard } from './SkillCard';\n\ninterface SkillCarouselProps {\n    map: SkillMap;\n    user: UserState;\n    selectedItem?: string;\n    dispatchChangeSelectedItem: (id: string) => void;\n    dispatchShowCompletionModal: (mapId: string, activityId?: string) => void;\n}\n\nclass SkillCarouselImpl extends React.Component<SkillCarouselProps> {\n    protected items: Item[];\n\n    constructor(props: SkillCarouselProps) {\n        super(props);\n\n        this.items = this.getItems(props.map.mapId, props.map.root);\n    }\n\n    protected getItems(mapId: string, root: MapActivity): Item[] {\n        const items = [];\n        let activity = root;\n        while (activity) {\n            items.push({\n                id: activity.activityId,\n                mapId,\n                label: activity.displayName,\n                description: activity.description,\n                tags: activity.tags,\n                url: activity.url,\n                imageUrl: activity.imageUrl\n            });\n            activity = activity.next[0]; // TODO still add nonlinear items to array even if we don't render graph\n        }\n\n        return items;\n    }\n\n    protected onItemSelect = (id: string) => {\n        this.props.dispatchChangeSelectedItem(id);\n    }\n\n    protected handleEndCardClick = () => {\n        this.props.dispatchShowCompletionModal(this.props.map.mapId);\n    }\n\n    protected getEndCard(): JSX.Element {\n        return <div className=\"end-card\" key=\"end\">\n            <div className=\"end-card-icon\" onClick={this.handleEndCardClick}>\n                <i className=\"icon trophy\" />\n            </div>\n        </div>\n    }\n\n    render() {\n        const { map, user, selectedItem } = this.props;\n        const endCard = isMapCompleted(user, map) ? [this.getEndCard()] : [];\n\n        return <Carousel title={map.displayName} items={this.items} itemTemplate={SkillCard} itemClassName=\"linked\"\n            onItemSelect={this.onItemSelect} selectedItem={selectedItem}\n            appendChildren={endCard} />\n    }\n}\n\nfunction mapStateToProps(state: SkillMapState, ownProps: any) {\n    if (!state) return {};\n    return {\n        user: state.user,\n        selectedItem: state.selectedItem && ownProps.map?.activities?.[state.selectedItem] ? state.selectedItem : undefined\n    }\n}\n\nconst mapDispatchToProps = {\n    dispatchChangeSelectedItem,\n    dispatchShowCompletionModal\n};\n\nexport const SkillCarousel = connect(mapStateToProps, mapDispatchToProps)(SkillCarouselImpl);\n","/// <reference path=\"./skillMap.d.ts\" />\n\nconst testMap = ``\n\ninterface MarkdownSection {\n    headerKind: \"single\" | \"double\" | \"triple\";\n    header: string;\n    attributes: {[index: string]: string};\n}\n\nexport function test() {\n    return parseSkillMap(testMap);\n}\n\nexport function parseSkillMap(text: string): { maps: SkillMap[], metadata?: PageMetadata } {\n    const sections = getSectionsFromText(text);\n\n    const parsed: SkillMap[] = [];\n    let metadata: PageMetadata | undefined;\n\n    let start = -1;\n\n    for (let i = 0; i < sections.length; i++) {\n        if (sections[i].headerKind === \"single\") {\n            metadata = inflateMetadata(sections[i]);\n        } else if (sections[i].headerKind === \"double\") {\n            if (start >= 0) {\n                parsed.push(buildMapFromSections(sections[start], sections.slice(start + 1, i)));\n            }\n            start = i;\n        }\n    }\n\n    if (start > 0 || parsed.length === 0) {\n        parsed.push(buildMapFromSections(sections[start], sections.slice(start + 1, sections.length)));\n    }\n\n    return { maps: parsed, metadata };\n}\n\nfunction getSectionsFromText(text: string) {\n    const lines = text.split(\"\\n\");\n\n    let sections: MarkdownSection[] = [];\n    let currentSection: MarkdownSection | null = null;\n\n    let currentKey: string | null = null;\n    let currentValue: string | null = null;\n\n    for (const line of lines) {\n        if (!line.trim()) {\n            if (currentValue) {\n                currentValue += \"\\n\";\n            }\n            continue;\n        }\n\n        if (line.startsWith(\"#\")) {\n            const headerMatch = /^(#+)\\s*(.+)$/.exec(line);\n\n            if (headerMatch) {\n                pushSection();\n\n                currentSection = {\n                    headerKind: headerMatch[1].length === 1 ? \"single\" :\n                        (headerMatch[1].length === 2 ? \"double\" : \"triple\"),\n                    header: headerMatch[2],\n                    attributes: {}\n                }\n                currentKey = null;\n                currentValue = null;\n                continue;\n            }\n        }\n\n        if (currentSection) {\n            const keyMatch = /^[*-]\\s+(?:([^:]+):)?(.*)$/.exec(line);\n\n            if (keyMatch) {\n                if (keyMatch[1]) {\n                    if (currentKey && currentValue) {\n                        currentSection.attributes[currentKey] = currentValue.trim();\n                    }\n                    currentKey = keyMatch[1].toLowerCase();\n                    currentValue = keyMatch[2];\n                }\n                else if (currentKey) {\n                    currentValue += keyMatch[2];\n                }\n            }\n        }\n    }\n\n    pushSection();\n\n    return sections;\n\n    function pushSection() {\n        if (currentSection) {\n            if (currentKey && currentValue) {\n                currentSection.attributes[currentKey] = currentValue.trim();\n            }\n            sections.push(currentSection);\n        }\n    }\n}\n\nfunction buildMapFromSections(header: MarkdownSection, sections: MarkdownSection[]) {\n    const result = inflateSkillMap(header);\n    const activities = sections.map(inflateActivity);\n\n    result.root = activities[0];\n\n    for (const activity of activities) {\n        if (result.activities![activity.activityId]) {\n            error(`Duplicate activity id '${activity.activityId}' in map '${result.mapId}'`);\n        }\n\n        result.activities![activity.activityId] = activity;\n    }\n\n    for (const activity of activities) {\n        for (const id of activity.nextIds) {\n            if (!result.activities![id]) error(`Unknown activity id '${id}' in map '${result.mapId}'`);\n            activity.next.push(result.activities![id]);\n        }\n    }\n\n    const reachable: {[index: string]: boolean} = {};\n\n    checkForLoopsRecursive(result.root);\n\n    for (const activity of activities) {\n        if (!reachable[activity.activityId]) {\n            console.warn(`Unreachable activity detected '${activity.activityId}' in map '${result.mapId}'`);\n        }\n    }\n\n    return result as SkillMap;\n\n    function checkForLoopsRecursive(root: MapActivity, visited: {[index: string]: boolean} = {}) {\n        if (visited[root.activityId]) error(`Loop in map '${result.mapId}' detected`);\n        visited[root.activityId] = true;\n        reachable[root.activityId] = true;\n\n        if (root.next.length > 1) {\n            error(\"Branching currently not supported\")\n        }\n\n        for (const next of root.next) {\n            checkForLoopsRecursive(next, {...visited});\n        }\n    }\n}\n\n\nfunction inflateSkillMap(section: MarkdownSection): Partial<SkillMap> {\n    const result: Partial<SkillMap> = {\n        mapId: section.header.toLowerCase(),\n        displayName: section.attributes[\"name\"] || section.header,\n        description: section.attributes[\"description\"],\n        prerequisites: [],\n        activities: {}\n    };\n\n    if (section.attributes[\"required\"]) {\n        const parts = section.attributes[\"required\"].split(\",\");\n        for (const part of parts) {\n            const match = /^\\s*(?:(\\d+) +)?(.+)$/.exec(part)!;\n\n            if (match[1]) {\n                result.prerequisites!.push({\n                    type: \"tag\",\n                    tag: match[2].trim(),\n                    numberCompleted: parseInt(match[1])\n                });\n            }\n            else {\n                result.prerequisites!.push({\n                    type: \"activity\",\n                    mapId: match[2].trim()\n                });\n            }\n        }\n    }\n\n    return result;\n}\n\nfunction inflateActivity(section: MarkdownSection): MapActivity {\n    const result: Partial<MapActivity> = {\n        activityId: section.header.toLowerCase(),\n        displayName: section.attributes[\"name\"] || section.header,\n        description: section.attributes[\"description\"],\n        url: section.attributes[\"url\"],\n        imageUrl: section.attributes[\"imageurl\"],\n        tags: parseList(section.attributes[\"tags\"]),\n        next: [],\n        nextIds: parseList(section.attributes[\"next\"])\n    };\n\n    if (section.attributes[\"type\"]) {\n        const type = section.attributes[\"type\"].toLowerCase();\n        switch (type) {\n            case \"tutorial\":\n                result.type = type;\n                break;\n        }\n    }\n\n    if (section.attributes[\"editor\"]) {\n        const editor = section.attributes[\"editor\"].toLowerCase();\n        switch (editor) {\n            case \"py\":\n            case \"blocks\":\n            case \"js\":\n                result.editor = editor;\n                break;\n            default:\n                result.editor = \"blocks\";\n        }\n    }\n\n    if (!result.url) error(`Activity '${result.activityId}' is missing attribute 'url'`);\n    if (!result.type) error(`Activity '${result.activityId}' is missing attribute 'type'`);\n\n    return result as MapActivity;\n}\n\nfunction inflateMetadata(section: MarkdownSection): PageMetadata {\n    return {\n        title: section.attributes[\"name\"] || section.header,\n        description: section.attributes[\"description\"],\n        infoUrl: section.attributes[\"infoUrl\"]\n    }\n}\n\nfunction parseList(list: string, includeDuplicates = false) {\n    if (!list) return [];\n    const parts = list.split(\",\").map(p => p.trim().toLowerCase()).filter(p => !!p);\n\n    if (!includeDuplicates) {\n        let map: {[index: string]: string} = {};\n        parts.forEach(p => map[p] = p);\n        return Object.keys(map);\n    }\n    return parts;\n}\n\nfunction error(message: string): never {\n    throw(message);\n}\n\n\n\n","const apiRoot = \"https://www.makecode.com/api/md\";\nexport type MarkdownSource = \"docs\" | \"github\";\n\nexport function parseHash() {\n    let hash = { cmd: '', arg: '' };\n    // TODO shakao remove testing url later\n    let match = /^#(\\w+)(:([:./\\-+=\\w]+))?/.exec(window.location.hash || \"#github:shakao-test/skill-map-test/main/test\")\n    if (match) {\n        hash = { cmd: match[1], arg: match[3] || '' };\n    }\n    return hash;\n}\n\nexport async function getMarkdownAsync(source: MarkdownSource, url: string) {\n    if (!source || !url) return \"\";\n    switch (source) {\n        case \"docs\":\n            url = url.trim().replace(/^[\\\\/]/i, \"\").replace(/\\.md$/i, \"\");\n            const target = (window as any).pxtTargetBundle.name;\n            return await httpGetAsync(`${apiRoot}/${target}/${url}`);\n        case \"github\":\n            /**\n             * FORMATS:\n             * /user-name/repo-name/branch-name/file-name\n             * https://github.com/user-name/repo-name/blob/branch-name/file-name.md\n             * https://raw.githubusercontent.com/user-name/repo-name/branch-name/file-name.md\n             *\n             * Leading slash and '.md' are optional but allowed\n             */\n            let rawUrl = url.trim();\n            let match = /^(?:(?:https?:\\/\\/)?[^/]*?github\\.com)?(?:\\/)?([^/.]+)\\/([^/]+)\\/(?:blob\\/)?([^/]+)\\/([^/.]+?)(?:\\.md)?$/gi.exec(rawUrl);\n            if (match) {\n                rawUrl = `https://raw.githubusercontent.com/${match[1]}/${match[2]}/${match[3]}/${match[4]}.md`\n            }\n\n            return await httpGetAsync(rawUrl);\n        default:\n            return await httpGetAsync(url);\n    }\n}\n\nexport function httpGetAsync(url: string): Promise<string> {\n    return new Promise<string>((resolve, reject) => {\n        const request = new XMLHttpRequest();\n        request.addEventListener(\"error\", err => {\n            reject(err);\n        });\n\n        request.addEventListener(\"load\", () => {\n            try {\n                resolve(request.responseText);\n            }\n            catch (e) {\n                reject(e);\n            }\n        });\n        request.open(\"GET\", url);\n        request.send();\n    })\n}\n\nexport function isLocal() {\n    return window.location.hostname === \"localhost\";\n}","import { IDBWrapper } from \"./indexedDBWrapper\";\n\nexport interface WorkspaceProvider {\n    initAsync(): Promise<void>\n    getProjectAsync(headerId: string): Promise<pxt.workspace.Project>;\n    saveProjectAsync(project: pxt.workspace.Project): Promise<void>;\n    getUserStateAsync(): Promise<UserState>;\n    saveUserStateAsync(user: UserState): Promise<void>;\n}\n\nlet workspace: WorkspaceProvider;\nlet workspacePromise: Promise<WorkspaceProvider>;\n\nexport function getWorkspaceAsync() {\n    if (!workspacePromise) {\n        workspace = new IndexedDBWorkspace();\n        workspacePromise = workspace.initAsync()\n            .then(wp => workspace);\n    }\n    return workspacePromise;\n}\n\nclass IndexedDBWorkspace implements WorkspaceProvider {\n    static version = 6;\n    static databaseName = \"local-skill-map\";\n    static projectTable = \"projects\";\n    static projectKey = \"id\";\n    static userTable = \"users\";\n    static userKey = \"id\";\n\n    db: IDBWrapper;\n\n    constructor() {\n        this.db = new IDBWrapper(IndexedDBWorkspace.databaseName, IndexedDBWorkspace.version, (ev, result) => {\n            const db = result.result as IDBDatabase;\n\n            db.createObjectStore(IndexedDBWorkspace.projectTable, { keyPath: IndexedDBWorkspace.projectKey });\n            db.createObjectStore(IndexedDBWorkspace.userTable, { keyPath: IndexedDBWorkspace.userKey });\n        });\n    }\n\n    initAsync() {\n        return this.db.openAsync();\n    }\n\n\n    getProjectAsync(headerId: string): Promise<pxt.workspace.Project> {\n        return this.db.getAsync(IndexedDBWorkspace.projectTable, headerId)\n            .then(entry => (entry as any).project);\n    }\n\n    saveProjectAsync(project: pxt.workspace.Project): Promise<void> {\n        return this.db.setAsync(\n            IndexedDBWorkspace.projectTable,\n            {\n                id: project.header!.id,\n                project\n            }\n        );\n    }\n\n    getUserStateAsync(): Promise<UserState> {\n        return this.db.getAsync(IndexedDBWorkspace.userTable, \"local-user\")\n            .then(entry => (entry as any).user);\n    }\n\n    saveUserStateAsync(user: UserState): Promise<void> {\n        return this.db.setAsync(\n            IndexedDBWorkspace.userTable,\n            {\n                id: \"local-user\",\n                user\n            }\n        );\n    }\n}","// Duplicated from pxtlib/browserutils.ts\n// TODO: Move to common location\n\n\n// IndexedDB wrapper class\nexport type IDBUpgradeHandler = (ev: IDBVersionChangeEvent, request: IDBRequest) => void;\n\nexport class IDBWrapper {\n    private _db!: IDBDatabase;\n\n    constructor(\n        private name: string,\n        private version: number,\n        private upgradeHandler?: IDBUpgradeHandler,\n        private quotaExceededHandler?: () => void) {\n    }\n\n    private throwIfNotOpened(): void {\n        if (!this._db) {\n            throw new Error(\"Database not opened; call IDBWrapper.openAsync() first\");\n        }\n    }\n\n    private errorHandler(err: Error, op: string, reject: (err: Error) => void): void {\n        console.error(new Error(`${this.name} IDBWrapper error for ${op}: ${err.message}`));\n        reject(err);\n        // special case for quota exceeded\n        if (err.name === \"QuotaExceededError\") {\n            // oops, we ran out of space\n            pxt.log(`storage quota exceeded...`);\n            pxt.tickEvent('storage.quotaexceedederror');\n            if (this.quotaExceededHandler)\n                this.quotaExceededHandler();\n        }\n    }\n\n    private getObjectStore(name: string, mode: \"readonly\" | \"readwrite\" = \"readonly\"): IDBObjectStore {\n        this.throwIfNotOpened();\n        const transaction = this._db.transaction([name], mode);\n        return transaction.objectStore(name);\n    }\n\n    static deleteDatabaseAsync(name: string): Promise<void> {\n        return new Promise((resolve, reject) => {\n            const idbFactory: IDBFactory = window.indexedDB || (window as any).mozIndexedDB || (window as any).webkitIndexedDB || (window as any).msIndexedDB;\n            const request = idbFactory.deleteDatabase(name);\n            request.onsuccess = () => resolve();\n            request.onerror = () => reject(request.error);\n        });\n    }\n\n    public openAsync(): Promise<void> {\n        return new Promise((resolve, reject) => {\n            const idbFactory: IDBFactory = window.indexedDB || (window as any).mozIndexedDB || (window as any).webkitIndexedDB || (window as any).msIndexedDB;\n            const request = idbFactory.open(this.name, this.version);\n            request.onsuccess = () => {\n                this._db = request.result;\n                resolve();\n            };\n            request.onerror = () => this.errorHandler(request.error!, \"open\", reject);\n            request.onupgradeneeded = (ev) => this.upgradeHandler && this.upgradeHandler(ev, request);\n        });\n    }\n\n    public getAsync<T>(storeName: string, id: string): Promise<T> {\n        return new Promise((resolve, reject) => {\n            const store = this.getObjectStore(storeName);\n            const request = store.get(id);\n            request.onsuccess = () => resolve(request.result as T);\n            request.onerror = () => this.errorHandler(request.error!, \"get\", reject);\n        });\n    }\n\n    public getAllAsync<T>(storeName: string): Promise<T[]> {\n        return new Promise((resolve, reject) => {\n            const store = this.getObjectStore(storeName);\n            const cursor = store.openCursor();\n            const data: T[] = [];\n\n            cursor.onsuccess = () => {\n                if (cursor.result) {\n                    data.push(cursor.result.value);\n                    cursor.result.continue();\n                } else {\n                    resolve(data);\n                }\n            };\n            cursor.onerror = () => this.errorHandler(cursor.error!, \"getAll\", reject);\n        });\n    }\n\n    public setAsync(storeName: string, data: any): Promise<void> {\n        return new Promise((resolve, reject) => {\n            const store = this.getObjectStore(storeName, \"readwrite\");\n            let request: IDBRequest;\n\n            if (typeof data.id !== \"undefined\" && data.id !== null) {\n                request = store.put(data);\n            } else {\n                request = store.add(data);\n            }\n\n            request.onsuccess = () => resolve();\n            request.onerror = () => this.errorHandler(request.error!, \"set\", reject);\n        });\n    }\n\n    public deleteAsync(storeName: string, id: string): Promise<void> {\n        return new Promise((resolve, reject) => {\n            const store = this.getObjectStore(storeName, \"readwrite\");\n            const request = store.delete(id);\n            request.onsuccess = () => resolve();\n            request.onerror = () => this.errorHandler(request.error!, \"delete\", reject);\n        });\n    }\n\n    public deleteAllAsync(storeName: string): Promise<void> {\n        return new Promise((resolve, reject) => {\n            const store = this.getObjectStore(storeName, \"readwrite\");\n            const request = store.clear();\n            request.onsuccess = () => resolve();\n            request.onerror = () => this.errorHandler(request.error!, \"deleteAll\", reject);\n        });\n    }\n}","/// <reference path=\"../../../built/pxteditor.d.ts\" />\nimport * as React from \"react\";\nimport { connect } from 'react-redux';\nimport { getWorkspaceAsync } from \"../lib/workspaceProvider\";\nimport { isLocal } from \"../lib/browserUtils\";\n\nimport { SkillMapState } from '../store/reducer';\nimport  { dispatchSetHeaderIdForActivity } from '../actions/dispatch';\n\nimport '../styles/makecode-editor.css'\n\ninterface MakeCodeFrameProps {\n    activityId: string;\n    title: string;\n    url: string;\n    tutorialPath: string;\n    activityHeaderId?: string;\n    dispatchSetHeaderIdForActivity: (headerId: string) => void;\n}\n\ninterface MakeCodeFrameState {\n    loaded: boolean;\n}\n\nconst editorUrl = isLocal() ? \"http://localhost:3232/index.html\" : (window as any).pxtTargetBundle.appTheme.embedUrl\n\nclass MakeCodeFrameImpl extends React.Component<MakeCodeFrameProps, MakeCodeFrameState> {\n    protected ref: HTMLIFrameElement | undefined;\n    protected messageQueue: any[] = [];\n\n    constructor(props: MakeCodeFrameProps) {\n        super(props);\n        this.state = {\n            loaded: false\n        };\n    }\n\n    render() {\n        const { url, title } = this.props;\n        const { loaded } = this.state;\n\n        const loadingText = \"Loading...\"\n        const imageAlt = \"MakeCode Logo\";\n\n        return <div className=\"makecode-frame-outer\">\n            <div className={`makecode-frame-loader ${loaded ? \"hidden\" : \"\"}`}>\n                <img src=\"./logo.svg\" alt={imageAlt} />\n                <div className=\"makecode-frame-loader-text\">{loadingText}</div>\n            </div>\n            <iframe className=\"makecode-frame\" src={url} title={title} ref={this.handleFrameRef}></iframe>\n        </div>\n    }\n\n\n    protected handleFrameRef = (ref: HTMLIFrameElement) => {\n        if (ref && ref.contentWindow) {\n            window.addEventListener(\"message\", this.onMessageReceived);\n            this.ref = ref;\n        }\n    }\n\n    protected onMessageReceived = (event: MessageEvent) => {\n        const data = event.data as pxt.editor.EditorMessageRequest;\n\n        if ((data.type as string) === \"ready\") {\n            this.handleWorkspaceReadyEventAsync();\n            return;\n        }\n\n        switch (data.action) {\n            case \"event\":\n                this.handleEditorTickEvent(data as pxt.editor.EditorMessageEventRequest);\n                break;\n            case \"workspacesync\":\n                this.handleWorkspaceSyncRequest(data as pxt.editor.EditorWorkspaceSyncRequest);\n                break;\n            case \"workspacesave\":\n                this.handleWorkspaceSaveRequestAsync(data as pxt.editor.EditorWorkspaceSaveRequest);\n                break;\n            default:\n                console.log(JSON.stringify(data, null, 4));\n        }\n\n    }\n\n    protected sendMessage(message: any) {\n        if (this.ref) {\n            if (!this.ref.contentWindow) {\n                this.messageQueue.push(message);\n            }\n            else {\n                while (this.messageQueue.length) {\n                    this.ref.contentWindow.postMessage(this.messageQueue.shift(), \"*\");\n                }\n                this.ref.contentWindow.postMessage(message, \"*\");\n            }\n        }\n    }\n\n    protected handleWorkspaceSyncRequest(request: pxt.editor.EditorWorkspaceSyncRequest) {\n        this.sendMessage({\n            ...request,\n            success: true,\n            projects: []\n        } as pxt.editor.EditorWorkspaceSyncResponse);\n    }\n\n    protected async handleWorkspaceSaveRequestAsync(request: pxt.editor.EditorWorkspaceSaveRequest) {\n        const { dispatchSetHeaderIdForActivity, activityHeaderId } = this.props;\n\n        const workspace = await getWorkspaceAsync();\n        const project = {\n            ...request.project,\n            header: {\n                ...request.project.header!,\n                id: activityHeaderId || request.project.header!.id\n            }\n        };\n\n        await workspace.saveProjectAsync(project);\n\n\n        if (!activityHeaderId) {\n            dispatchSetHeaderIdForActivity(project.header!.id);\n        }\n    }\n\n    protected async handleWorkspaceReadyEventAsync() {\n        if (this.props.activityHeaderId) {\n            const workspace = await getWorkspaceAsync();\n            const project = await workspace.getProjectAsync(this.props.activityHeaderId);\n            this.sendMessage({\n                type: \"pxteditor\",\n                action: \"importproject\",\n                project: project\n            } as pxt.editor.EditorMessageImportProjectRequest)\n        }\n        else {\n            this.sendMessage({\n                type: \"pxteditor\",\n                action: \"startactivity\",\n                path: this.props.tutorialPath,\n                activityType: \"tutorial\"\n            } as pxt.editor.EditorMessageStartActivity);\n        }\n    }\n\n    protected handleEditorTickEvent(event: pxt.editor.EditorMessageEventRequest) {\n        switch (event.tick) {\n            // FIXME: add a better tick; app.editor fires too early\n            case \"app.editor\":\n                this.onEditorLoaded();\n                break;\n        }\n    }\n\n    protected onEditorLoaded() {\n        this.setState({\n            loaded: true\n        });\n    }\n}\n\nfunction mapStateToProps(state: SkillMapState, ownProps: any) {\n    if (!state || !state.editorView) return {};\n\n    const { currentActivityId, currentMapId, currentHeaderId } = state.editorView;\n\n    let url: string | undefined;\n    let title: string | undefined;\n\n    const activity = state.maps[currentMapId].activities[currentActivityId];\n    url = `${editorUrl}?controller=1&skillsMap=1`;\n    title = activity.displayName;\n\n    return {\n        url,\n        tutorialPath: activity.url,\n        title,\n        activityId: currentActivityId,\n        activityHeaderId: currentHeaderId\n    }\n}\n\nconst mapDispatchToProps = {\n    dispatchSetHeaderIdForActivity,\n};\n\nexport const MakeCodeFrame = connect(mapStateToProps, mapDispatchToProps)(MakeCodeFrameImpl);","/// <reference path=\"./lib/skillMap.d.ts\" />\n\nimport React from 'react';\nimport { connect } from 'react-redux';\n\nimport { dispatchAddSkillMap, dispatchClearSkillMaps, dispatchSetPageTitle, dispatchSetPageDescription, dispatchSetPageInfoUrl } from './actions/dispatch';\nimport { SkillMapState } from './store/reducer';\nimport { HeaderBar } from './components/HeaderBar';\nimport { Banner } from './components/Banner';\nimport { CompletionModal } from './components/CompletionModal';\nimport { SkillCarousel } from './components/SkillCarousel';\n\nimport { parseSkillMap } from './lib/skillMapParser';\nimport { parseHash, getMarkdownAsync, MarkdownSource } from './lib/browserUtils';\n\nimport './App.css';\nimport { MakeCodeFrame } from './components/makecodeFrame';\n\ninterface AppProps {\n    skillMaps: { [key: string]: SkillMap };\n    activityOpen: boolean;\n    dispatchAddSkillMap: (map: SkillMap) => void;\n    dispatchClearSkillMaps: () => void;\n    dispatchSetPageTitle: (title: string) => void;\n    dispatchSetPageDescription: (description: string) => void;\n    dispatchSetPageInfoUrl: (infoUrl: string) => void;\n}\n\nclass AppImpl extends React.Component<AppProps> {\n    constructor(props: any) {\n        super(props);\n\n        window.addEventListener(\"hashchange\", this.handleHashChange);\n    }\n\n    protected handleHashChange = (e: HashChangeEvent) => {\n        let hash = parseHash();\n        this.fetchAndParseSkillMaps(hash.cmd as MarkdownSource, hash.arg);\n\n        e.stopPropagation();\n        e.preventDefault();\n    }\n\n    protected fetchAndParseSkillMaps(source: MarkdownSource, url: string) {\n        getMarkdownAsync(source, url).then((md) => {\n            if (md) {\n                try {\n                    const { maps, metadata } = parseSkillMap(md);\n                    if (maps?.length > 0) {\n                        this.props.dispatchClearSkillMaps();\n                        maps.forEach(map => {\n                            this.props.dispatchAddSkillMap(map);\n                        })\n                    }\n                    if (metadata) {\n                        const { title, description, infoUrl } = metadata;\n                        this.props.dispatchSetPageTitle(title);\n                        if (description) this.props.dispatchSetPageDescription(description);\n                        if (infoUrl) this.props.dispatchSetPageDescription(infoUrl);\n                    }\n                } catch {\n                    console.error(\"Error parsing markdown\")\n                }\n            }\n        });\n    }\n\n    componentDidMount() {\n        let hash = parseHash();\n        this.fetchAndParseSkillMaps(hash.cmd as MarkdownSource, hash.arg);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"hashchange\", this.handleHashChange);\n    }\n\n    render() {\n        const {skillMaps, activityOpen } = this.props;\n        const maps = Object.keys(skillMaps).map((id: string) => skillMaps[id]);\n        return (<div className=\"app-container\">\n                <HeaderBar />\n                { activityOpen ? <MakeCodeFrame /> : <div>\n                    <Banner title=\"Game Maker Guide\" icon=\"map\" description=\"Level up your game making skills by completing the tutorials in this guide.\" />\n                    <div className=\"skill-map-container\">\n                        { maps?.map((el, i) => {\n                            return <SkillCarousel map={el} key={i} />\n                        })}\n                    </div>\n                </div>\n                }\n                <CompletionModal />\n            </div>);\n    }\n}\n\nfunction mapStateToProps(state: SkillMapState, ownProps: any) {\n    if (!state) return {};\n    return {\n        skillMaps: state.maps,\n        activityOpen: !!state.editorView\n    };\n}\n\nconst mapDispatchToProps = {\n    dispatchAddSkillMap,\n    dispatchClearSkillMaps,\n    dispatchSetPageTitle,\n    dispatchSetPageDescription,\n    dispatchSetPageInfoUrl\n};\n\nconst App = connect(mapStateToProps, mapDispatchToProps)(AppImpl);\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store/store';\nimport App from './App';\n\nimport './index.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n\n    document.getElementById('root')\n);"],"sourceRoot":""}