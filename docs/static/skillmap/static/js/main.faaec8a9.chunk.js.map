{"version":3,"sources":["actions/types.ts","lib/browserUtils.ts","lib/skillMapUtils.ts","store/reducer.ts","lib/workspaceProvider.ts","store/store.ts","actions/dispatch.ts","components/Dropdown.tsx","components/makecodeFrame.tsx","components/HeaderBar.tsx","components/Banner.tsx","components/Modal.tsx","components/AppModal.tsx","components/CarouselItem.tsx","components/Carousel.tsx","components/SkillCard.tsx","components/SkillCarousel.tsx","lib/skillMapParser.ts","App.tsx","index.tsx"],"names":["ADD_SKILL_MAP","CLEAR_SKILL_MAPS","CHANGE_SELECTED_ITEM","SET_SKILL_MAP_COMPLETED","SET_HEADERID_FOR_ACTIVITY","OPEN_ACTIVITY","CLOSE_ACTIVITY","SAVE_AND_CLOSE_ACTIVITY","RESTART_ACTIVITY","SET_USER","UPDATE_USER_COMPLETED_TAGS","SET_PAGE_TITLE","SET_PAGE_DESCRIPTION","SET_PAGE_INFO_URL","SET_PAGE_SOURCE_URL","SHOW_COMPLETION_MODAL","SHOW_RESTART_ACTIVITY_MODAL","SHOW_REPORT_ABUSE_MODAL","HIDE_MODAL","apiRoot","parseHash","hash","parsed","cmd","arg","match","exec","window","location","replace","parseQuery","out","query","search","URLSearchParams","forEach","value","key","toLowerCase","getMarkdownAsync","source","url","a","undefined","status","trim","target","pxtTargetBundle","name","toFetch","fetchSkillMapFromGithub","httpGetAsync","markdown","text","identifier","path","ghid","pxt","github","parseRepoId","packagesConfigAsync","config","repoStatus","GitRepoStatus","Banned","Approved","reportId","fullName","tag","latestVersionAsync","log","downloadPackageAsync","gh","fileName","tutorial","resolveLocalizedMarkdown","files","id","data","httpPostAsync","encodeURIComponent","Promise","resolve","reject","request","XMLHttpRequest","addEventListener","err","responseText","e","open","send","setRequestHeader","JSON","stringify","randomUint32","buf","Uint8Array","crypto","getRandomValues","i","length","Math","floor","random","getRandomBuf","Uint32Array","buffer","guidGen","f","toString","slice","isLocal","hostname","resolvePath","tickEvent","pxtTickEvent","isMapCompleted","user","map","skipActivity","Object","keys","activities","some","k","mapProgress","mapId","activityState","isCompleted","isActivityCompleted","activityId","lookupActivityProgress","isMapUnlocked","pageSource","prerequisites","pre","type","completedTags","numCompleted","numberCompleted","getCompletedTags","maps","completed","activity","tags","initialState","title","lf","description","pageSourceStatus","isDebug","setHeaderIdForActivity","headerId","currentStep","maxSteps","existing","shouldTransition","completionState","setActivityFinished","topReducer","workspace","workspacePromise","state","action","actions","selectedItem","editorView","currentMapId","currentActivityId","currentHeaderId","finished","modal","pageSourceUrl","infoUrl","store","createStore","dispatchOpenActivity","dispatchSaveAndCloseActivity","dispatchHideModal","Dropdown","props","icon","items","className","useState","expanded","setExpanded","tabIndex","onClick","onBlur","el","label","getWorkspaceAsync","skillmap","IndexedDBWorkspace","initAsync","then","wp","getProjectAsync","ws","saveProjectAsync","project","getUserStateAsync","saveUserStateAsync","editorUrl","appTheme","embedUrl","MakeCodeFrameImpl","ref","messageQueue","finishedActivityState","nextId","pendingMessages","handleFrameRef","contentWindow","onMessageReceived","unloading","dispatchCloseActivity","dispatchUpdateUserCompletedTags","setElementVisible","event","onResponseReceived","handleEditorTickEvent","handleWorkspaceSyncRequest","handleWorkspaceSaveRequestAsync","handleWorkspaceReadyEventAsync","loaded","this","save","sendMessage","response","removeEventListener","loadingText","src","alt","original","setState","onEditorLoaded","message","sendMessageCore","postMessage","shift","push","success","projects","dispatchSetHeaderIdForActivity","activityHeaderId","activityType","header","pxtJSON","parse","Package","stringifyConfig","tutorialCompleted","tutorialStep","steps","tutorialStepInfo","tutorialPath","tick","onTutorialFinished","React","selector","visible","document","querySelector","style","display","mapDispatchToProps","MakeCodeFrame","connect","ownProps","saveState","charAt","substr","displayName","HeaderBarImpl","reportAbuseUrl","onBackClicked","onSaveClicked","completedHeaderId","showReportAbuse","activityOpen","getSettingItems","role","HeaderBar","BannerImpl","Banner","Modal","handleModalClick","stopPropagation","preventDefault","handleCloseClick","onClose","children","AppModalImpl","completionType","renderCompletionModal","renderRestartWarning","renderReportAbuse","completionModalTitle","completionModalTextSegments","split","Array","fill","animationDelay","left","dispatchRestartActivity","restartModalTitle","restartModalTextSegments","postAbuseReportAsync","placeholder","AppModal","nextActivityId","next","completionUrl","CarouselItemTemplate","CarouselItem","item","itemTemplate","selected","onSelect","Inner","Carousel","scrollMargin","carouselRef","scrollTo","handleLeftArrowClick","scrollBy","innerWidth","handleRightArrowClick","handleScroll","scrollLeft","showLeft","showRight","scrollWidth","clientWidth","itemClassName","onItemSelect","prependChildren","appendChildren","titleIcon","titleDecoration","onScroll","SkillCardImpl","handleActionButtonClick","handleRestartButtonClick","dispatchShowRestartActivityWarning","imageUrl","t","getSkillCardActionText","SkillCard","root","checkRecursive","isActivityUnlocked","progress","SkillCarouselImpl","dispatchChangeSelectedItem","handleEndCardClick","dispatchShowCompletionModal","handleEndCardTransition","getItems","onTransitionEnd","requirements","req","incomplete","max","filter","element","finishedMaps","requiredMaps","formatString","formatList","setTimeout","dispatchSetSkillMapCompleted","endCard","getEndCard","requirments","renderRequirements","elements","fmtString","current","index","parts","SkillCarousel","parseSkillMap","metadata","section","sections","lines","currentSection","currentKey","currentValue","line","startsWith","headerMatch","pushSection","headerKind","attributes","keyMatch","getSectionsFromText","start","buildMapFromSections","result","part","parseInt","inflateSkillMap","inflateActivity","error","nextIds","reachable","checkForLoopsRecursive","visited","console","warn","parseList","editor","list","includeDuplicates","p","AppImpl","queryFlags","unsubscribeChangeListener","loadedUser","handleHashChange","targetConfigAsync","skillMap","defaultPath","fetchAndParseSkillMaps","handleError","msg","errorMsg","onStoreChange","getState","theme","appTarget","href","force","useLang","test","BrowserUtils","isIE","ts","pxtc","Util","TRANSLATION_LOCALE","mlang","indexOf","changeHash","getCookieLang","defaultLocale","navigator","userLanguage","language","targetId","pxtBranch","versions","pxtCrowdinBranch","targetBranch","targetCrowdinBranch","updateLocalizationAsync","isLocaleEnabled","setCookieLang","md","fetched","loadedMaps","dispatchClearSkillMaps","dispatchAddSkillMap","dispatchSetPageTitle","dispatchSetPageDescription","dispatchSetPageSourceUrl","applyQueryFlags","dispatchSetUser","subscribe","initLocalizationAsync","skillMaps","sourceUrl","Component","baseUrl","code","live","normalizeLanguageCode","downloadTranslationsAsync","TranslationsKind","SkillMap","translations","setUserLanguage","setLocalizedStrings","localizeLive","dispatchSetPageInfoUrl","App","bundle","bundledpkgs","setAppTarget","Cloud","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.faaec8a9.chunk.js","sourcesContent":["export const ADD_SKILL_MAP = \"ADD_SKILL_MAP\";\nexport const CLEAR_SKILL_MAPS = \"CLEAR_SKILL_MAPS\";\nexport const CHANGE_SELECTED_ITEM = \"CHANGE_SELECTED_ITEM\";\nexport const SET_SKILL_MAP_COMPLETED = \"SET_SKILL_MAP_COMPLETED\";\n\nexport const SET_HEADERID_FOR_ACTIVITY = \"SET_HEADERID_FOR_ACTIVITY\";\nexport const OPEN_ACTIVITY = \"OPEN_ACTIVITY\";\nexport const CLOSE_ACTIVITY = \"CLOSE_ACTIVITY\";\nexport const SAVE_AND_CLOSE_ACTIVITY = \"SAVE_AND_CLOSE_ACTIVITY\";\nexport const RESTART_ACTIVITY = \"RESTART_ACTIVITY\";\n\nexport const SET_USER = \"SET_USER\";\nexport const UPDATE_USER_COMPLETED_TAGS = \"UPDATE_USER_COMPLETED_TAGS\";\n\nexport const SET_PAGE_TITLE = \"SET_PAGE_TITLE\";\nexport const SET_PAGE_DESCRIPTION = \"SET_PAGE_DESCRIPTION\";\nexport const SET_PAGE_INFO_URL = \"SET_PAGE_INFO_URL\";\nexport const SET_PAGE_SOURCE_URL = \"SET_PAGE_SOURCE_URL\";\n\nexport const SHOW_COMPLETION_MODAL = \"SHOW_COMPLETION_MODAL\";\nexport const SHOW_RESTART_ACTIVITY_MODAL = \"SHOW_RESTART_ACTIVITY_MODAL\";\nexport const SHOW_REPORT_ABUSE_MODAL = \"SHOW_REPORT_ABUSE_MODAL\";\nexport const HIDE_MODAL = \"HIDE_MODAL\";\n","import { PageSourceStatus } from \"../store/reducer\";\n\nconst apiRoot = \"https://www.makecode.com/api/md\";\nexport type MarkdownSource = \"docs\" | \"github\";\n\nexport interface MarkdownFetchResult {\n    identifier: string;\n    text: string;\n    reportId?: string;\n    status: PageSourceStatus;\n}\n\nexport function parseHash(hash?: string) {\n    let parsed = { cmd: '', arg: '' };\n    let match = /^(\\w+)(:([:./\\-+=\\w]+))?/.exec((hash || window.location.hash).replace(/^#/, \"\"))\n    if (match) {\n        parsed = { cmd: match[1], arg: match[3] || '' };\n    }\n    return parsed;\n}\n\nexport function parseQuery() {\n    const out: {[index: string]: string} = {};\n    const query = window.location.search;\n\n    if (query) {\n        const params = new URLSearchParams(query);\n\n        params.forEach((value, key) => {\n            if (value.toLowerCase() === \"true\" || value === \"1\") {\n                value = \"true\";\n            }\n            out[key] = value;\n        });\n    }\n\n    return out;\n}\n\nexport async function getMarkdownAsync(source: MarkdownSource, url: string): Promise<MarkdownFetchResult | undefined> {\n    if (!source || !url) return undefined;\n\n    let toFetch: string;\n    let status: PageSourceStatus = \"unknown\";\n\n    switch (source) {\n        case \"docs\":\n            url = url.trim().replace(/^[\\\\/]/i, \"\").replace(/\\.md$/i, \"\");\n            const target = (window as any).pxtTargetBundle?.name || \"arcade\";\n            toFetch = `${apiRoot}/${target}/${url}`;\n            status = \"approved\";\n            break;\n        case \"github\":\n            return await fetchSkillMapFromGithub(url);\n        default:\n            toFetch = url;\n            break;\n    }\n\n    const markdown = await httpGetAsync(toFetch);\n\n    return {\n        text: markdown,\n        identifier: toFetch,\n        status\n    };\n}\n\n\n/**\n * Fetches the result and returns an identifier to key the content on. For docs, it\n * will just be the path. For github, it will be githubUser/reponame#path/to/skillmap.md\n */\nasync function fetchSkillMapFromGithub(path: string): Promise<MarkdownFetchResult | undefined> {\n    const ghid = pxt.github.parseRepoId(path)\n    const config = await pxt.packagesConfigAsync();\n    const repoStatus = pxt.github.repoStatus(ghid, config);\n    let status: PageSourceStatus = \"unknown\";\n\n    let reportId: string | undefined;\n    switch (repoStatus) {\n        case pxt.github.GitRepoStatus.Banned:\n            status = \"banned\";\n            reportId = \"https://github.com/\" + ghid.fullName;\n            break;\n        case pxt.github.GitRepoStatus.Approved:\n            status = \"approved\";\n            reportId = undefined;\n            break;\n        default:\n            reportId = \"https://github.com/\" + ghid.fullName;\n            break;\n    }\n\n    const tag = ghid.tag || await pxt.github.latestVersionAsync(ghid.fullName, config, true);\n\n    if (!tag) {\n        pxt.log(`skillmap github tag not found at ${ghid.fullName}`);\n        return undefined;\n    }\n    ghid.tag = tag;\n\n    const gh = await pxt.github.downloadPackageAsync(`${ghid.fullName}#${ghid.tag}`, config);\n\n    if (gh) {\n        let fileName = ghid.fileName ||  \"skillmap\";\n        fileName = fileName.replace(/^\\/?blob\\/main\\//, \"\")\n        fileName = fileName.replace(/^\\/?blob\\/master\\//, \"\")\n        fileName = fileName.replace(/\\.md$/, \"\")\n\n        return {\n            text: pxt.tutorial.resolveLocalizedMarkdown(ghid, gh.files, fileName),\n            identifier: ghid.fullName + \"#\" + fileName,\n            reportId,\n            status\n        }\n    }\n\n    return undefined\n}\n\nexport async function postAbuseReportAsync(id: string, data: { text: string }): Promise<void> {\n    if (!!id) await httpPostAsync(`/api/${encodeURIComponent(id)}/abusereports`, data);\n    return;\n}\n\nexport function httpGetAsync(url: string): Promise<string> {\n    return new Promise<string>((resolve, reject) => {\n        const request = new XMLHttpRequest();\n        request.addEventListener(\"error\", err => {\n            reject(err);\n        });\n\n        request.addEventListener(\"load\", () => {\n            try {\n                resolve(request.responseText);\n            }\n            catch (e) {\n                reject(e);\n            }\n        });\n        request.open(\"GET\", url);\n        request.send();\n    })\n}\n\nexport function httpPostAsync(url: string, data: any): Promise<string> {\n    return new Promise<string>((resolve, reject) => {\n        const request = new XMLHttpRequest();\n        request.addEventListener(\"error\", err => {\n            reject(err);\n        });\n\n        request.addEventListener(\"load\", () => {\n            try {\n                resolve(request.responseText);\n            }\n            catch (e) {\n                reject(e);\n            }\n        });\n        request.open(\"POST\", url, true);\n        request.setRequestHeader('Content-type', 'application/json');\n        request.send(JSON.stringify(data));\n    })\n}\n\nfunction getRandomBuf(buf: Uint8Array) {\n    if (window.crypto)\n        window.crypto.getRandomValues(buf);\n    else {\n        for (let i = 0; i < buf.length; ++i)\n            buf[i] = Math.floor(Math.random() * 255);\n    }\n}\n\nfunction randomUint32() {\n    let buf = new Uint8Array(4)\n    getRandomBuf(buf)\n    return new Uint32Array(buf.buffer)[0]\n}\n\nexport function guidGen() {\n    function f() { return (randomUint32() | 0x10000).toString(16).slice(-4); }\n    return f() + f() + \"-\" + f() + \"-4\" + f().slice(-3) + \"-\" + f() + \"-\" + f() + f() + f();\n}\n\nexport function isLocal() {\n    return window.location.hostname === \"localhost\";\n}\n\nexport function resolvePath(path: string) {\n    return `${isLocal() ? \"\" : \"/static/skillmap\"}/${path.replace(/^\\//, \"\")}`\n}\n\nexport function tickEvent(id: string, data?: { [key: string] : string | number }) {\n    (window as any).pxtTickEvent?.(id, data);\n}","\nexport function isMapCompleted(user: UserState, map: SkillMap, skipActivity?: string) {\n    if (Object.keys(map?.activities).some(k => !user?.mapProgress[map.mapId]?.activityState[k]?.isCompleted && k !== skipActivity)) return false;\n    return true;\n}\n\nexport function isActivityCompleted(user: UserState, mapId: string, activityId: string) {\n    return !!(lookupActivityProgress(user, mapId, activityId)?.isCompleted);\n}\n\nexport function isMapUnlocked(user: UserState, map: SkillMap, pageSource: string) {\n    for (const pre of map.prerequisites) {\n        if (pre.type === \"tag\") {\n            if (!user.completedTags[pageSource]) return false;\n\n            const numCompleted = user.completedTags[pageSource][pre.tag];\n            if (numCompleted === undefined || numCompleted < pre.numberCompleted) return false;\n        }\n        else if (pre.type === \"map\") {\n            if (!isMapCompleted(user, map)) return false;\n        }\n    }\n\n    return true;\n}\n\nexport function getCompletedTags(user: UserState, maps: SkillMap[]) {\n    const completed: CompletedTags = {};\n\n    for (const map of maps) {\n        for (const activityId of Object.keys(map.activities)) {\n            const activity = map.activities[activityId];\n            if (isActivityCompleted(user, map.mapId, activity.activityId)) {\n                for (const tag of activity.tags) {\n                    if (!completed[tag]) completed[tag] = 0;\n                    completed[tag] ++;\n                }\n            }\n        }\n    }\n\n    return completed;\n}\n\nexport function isActivityUnlocked(user: UserState, map: SkillMap, activityId: string) {\n    if (map.root.activityId === activityId) return true;\n\n    return checkRecursive(map.root);\n\n    function checkRecursive(root: MapActivity) {\n        if (isActivityCompleted(user, map.mapId, root.activityId)) {\n            if (root.next.some(activity => activity.activityId === activityId)) {\n                return true;\n            }\n\n            for (const next of root.next) {\n                if (checkRecursive(next)) return true;\n            }\n        }\n\n        return false;\n    }\n}\n\nexport function lookupActivityProgress(user: UserState, mapId: string, activityId: string) {\n    return user.mapProgress[mapId]?.activityState[activityId]\n}\n","import * as actions from '../actions/types'\nimport { guidGen } from '../lib/browserUtils';\nimport { getCompletedTags, lookupActivityProgress, isMapCompleted } from '../lib/skillMapUtils';\n\nexport type ModalType = \"restart-warning\" | \"completion\" | \"report-abuse\";\nexport type PageSourceStatus = \"approved\" | \"banned\" | \"unknown\";\n\n// State for the entire page\nexport interface SkillMapState {\n    title: string;\n    description: string;\n    infoUrl?: string;\n    user: UserState;\n    pageSourceUrl?: string;\n    pageSourceStatus: PageSourceStatus;\n    maps: { [key: string]: SkillMap };\n    selectedItem?: string;\n\n    editorView?: EditorViewState;\n    modal?: ModalState;\n}\n\nexport interface EditorViewState {\n    currentHeaderId?: string;\n    currentMapId: string;\n    currentActivityId: string;\n    state: \"active\" | \"saving\";\n}\n\ninterface ModalState {\n    type: ModalType;\n    currentMapId?: string;\n    currentActivityId?: string;\n}\n\nconst initialState: SkillMapState = {\n    title: lf(\"Game Maker Guide\"),\n    description: lf(\"Level up your game making skills by completing the tutorials in this guide.\"),\n    pageSourceStatus: \"unknown\",\n    user: {\n        isDebug: true,\n        id: guidGen(),\n        mapProgress: {},\n        completedTags: {}\n    },\n    maps: {}\n}\n\nconst topReducer = (state: SkillMapState = initialState, action: any): SkillMapState => {\n    switch (action.type) {\n        case actions.ADD_SKILL_MAP:\n            return {\n                ...state,\n                user: {\n                    ...state.user,\n                    mapProgress: {\n                        ...state.user.mapProgress,\n                        [action.map.mapId]: { completionState: \"incomplete\", mapId: action.map.mapId, activityState: { } }\n                    }\n                },\n                maps: {\n                    ...state.maps,\n                    [action.map.mapId]: action.map\n                }\n            }\n        case actions.CLEAR_SKILL_MAPS:\n            return {\n                ...state,\n                maps: {}\n            };\n        case actions.CHANGE_SELECTED_ITEM:\n            return {\n                ...state,\n                selectedItem: action.id\n            };\n        case actions.SET_SKILL_MAP_COMPLETED:\n            return {\n                ...state,\n                user: {\n                    ...state.user,\n                    mapProgress: {\n                        ...state.user.mapProgress,\n                        [action.mapId]: {\n                            ...state.user.mapProgress[action.mapId],\n                            completionState: \"completed\"\n                        }\n                    }\n                }\n            }\n        case actions.OPEN_ACTIVITY:\n            return {\n                ...state,\n                editorView: {\n                    currentMapId: action.mapId,\n                    currentActivityId: action.activityId,\n                    state: \"active\",\n                    currentHeaderId: lookupActivityProgress(\n                        state.user,\n                        action.mapId,\n                        action.activityId,\n                    )?.headerId\n\n                }\n            };\n        case actions.SAVE_AND_CLOSE_ACTIVITY:\n            return {\n                ...state,\n                editorView: {\n                    ...state.editorView!,\n                    state: \"saving\"\n                }\n            };\n        case actions.CLOSE_ACTIVITY:\n            return {\n                ...state,\n                editorView: undefined,\n                user: action.finished ?\n                    setActivityFinished(state.user, state.maps[state.editorView!.currentMapId], state.editorView!.currentActivityId) :\n                    state.user\n            };\n        case actions.RESTART_ACTIVITY:\n            return {\n                ...state,\n                modal: undefined,\n                editorView: {\n                    state: \"active\",\n                    currentMapId: action.mapId,\n                    currentActivityId: action.activityId\n                },\n                user: setHeaderIdForActivity(\n                    state.user,\n                    state.maps[action.mapId],\n                    action.activityId\n                )\n            }\n        case actions.SET_HEADERID_FOR_ACTIVITY:\n            if (!state.editorView) return state;\n            return {\n                ...state,\n                editorView: {\n                    ...state.editorView!,\n                    currentHeaderId: action.id\n                },\n                user: setHeaderIdForActivity(\n                    state.user,\n                    state.maps[state.editorView!.currentMapId],\n                    state.editorView!.currentActivityId,\n                    action.id,\n                    action.currentStep,\n                    action.maxSteps\n                )\n            };\n        case actions.SET_USER:\n            return {\n                ...state,\n                user: action.user\n            };\n        case actions.UPDATE_USER_COMPLETED_TAGS:\n            if (!state.pageSourceUrl) return state;\n            return {\n                ...state,\n                user: {\n                    ...state.user,\n                    completedTags: {\n                        ...state.user.completedTags,\n                        [state.pageSourceUrl]: getCompletedTags(state.user, Object.keys(state.maps).map(key => state.maps[key]))\n                    }\n                }\n            }\n        case actions.SET_PAGE_TITLE:\n            return {\n                ...state,\n                title: action.title\n            }\n        case actions.SET_PAGE_DESCRIPTION:\n            return {\n                ...state,\n                description: action.description\n            }\n        case actions.SET_PAGE_INFO_URL:\n            return {\n                ...state,\n                infoUrl: action.infoUrl\n            }\n        case actions.SET_PAGE_SOURCE_URL:\n            return {\n                ...state,\n                pageSourceUrl: action.url,\n                pageSourceStatus: action.status\n            }\n        case actions.SHOW_COMPLETION_MODAL:\n            return {\n                ...state,\n                modal: { type: \"completion\", currentMapId: action.mapId, currentActivityId: action.activityId }\n            };\n        case actions.SHOW_RESTART_ACTIVITY_MODAL:\n            return {\n                ...state,\n                modal: { type: \"restart-warning\", currentMapId: action.mapId, currentActivityId: action.activityId }\n            };\n        case actions.SHOW_REPORT_ABUSE_MODAL:\n            return {\n                ...state,\n                modal: { type: \"report-abuse\", currentMapId: action.mapId, currentActivityId: action.activityId }\n            };\n        case actions.HIDE_MODAL:\n            return {\n                ...state,\n                modal: undefined\n            };\n        default:\n            return state\n    }\n}\n\n\nexport function setHeaderIdForActivity(user: UserState, map: SkillMap, activityId: string, headerId?: string, currentStep?: number, maxSteps?: number): UserState {\n    const mapId = map.mapId;\n    let existing = lookupActivityProgress(user, mapId, activityId);\n\n    if (!existing) {\n        existing = {\n            isCompleted: false,\n            activityId,\n            currentStep,\n            maxSteps,\n            headerId\n        }\n    }\n\n    const shouldTransition = isMapCompleted(user, map, activityId) && !existing.isCompleted;\n    const isCompleted = existing.isCompleted || currentStep !== undefined && maxSteps !== undefined && currentStep >= maxSteps;\n\n    return {\n        ...user,\n        mapProgress: {\n            ...user.mapProgress,\n            [mapId]: {\n                ...(user.mapProgress[mapId] || { mapId }),\n                activityState: {\n                    ...(user.mapProgress[mapId]?.activityState || {}),\n                    [activityId]: {\n                        ...existing,\n                        headerId,\n                        currentStep,\n                        maxSteps,\n                        isCompleted\n                    }\n                },\n                completionState: shouldTransition ? \"transitioning\" : user.mapProgress?.[mapId]?.completionState\n            }\n        }\n    };\n}\n\nexport function setActivityFinished(user: UserState, map: SkillMap, activityId: string) {\n    const mapId = map.mapId;\n    let existing = lookupActivityProgress(user, mapId, activityId);\n\n    if (!existing) {\n        existing = {\n            isCompleted: false,\n            activityId,\n            headerId: \"\",\n            currentStep: 0\n        }\n    }\n\n    const shouldTransition = isMapCompleted(user, map, activityId) && !existing.isCompleted;\n    return {\n        ...user,\n        mapProgress: {\n            ...user.mapProgress,\n            [mapId]: {\n                ...(user.mapProgress[mapId] || { mapId }),\n                activityState: {\n                    ...(user.mapProgress[mapId]?.activityState || {}),\n                    [activityId]: {\n                        ...existing,\n                        isCompleted: true\n                    }\n                },\n                completionState: shouldTransition ? \"transitioning\" : user.mapProgress?.[mapId]?.completionState\n            }\n        }\n    };\n}\n\nexport default topReducer;","let workspace: pxt.skillmap.WorkspaceProvider<UserState>;\nlet workspacePromise: Promise<pxt.skillmap.WorkspaceProvider<UserState>>;\n\nfunction getWorkspaceAsync() {\n    if (!workspacePromise) {\n        workspace = new pxt.skillmap.IndexedDBWorkspace<UserState>();\n        workspacePromise = workspace.initAsync()\n            .then(wp => workspace);\n    }\n    return workspacePromise;\n}\n\nexport async function getProjectAsync(headerId: string): Promise<pxt.workspace.Project> {\n    const ws = await getWorkspaceAsync();\n    return ws.getProjectAsync(headerId);\n}\n\nexport async function saveProjectAsync(project: pxt.workspace.Project): Promise<void> {\n    const ws = await getWorkspaceAsync();\n    await ws.saveProjectAsync(project);\n}\n\nexport async function getUserStateAsync(): Promise<UserState | undefined> {\n    const ws = await getWorkspaceAsync();\n\n    return ws.getUserStateAsync();\n}\n\nexport async function saveUserStateAsync(user: UserState): Promise<void> {\n    // Don't save debug user state\n    if (user.isDebug) return;\n\n    const ws = await getWorkspaceAsync();\n    await ws.saveUserStateAsync(user);\n}\n","import { createStore } from 'redux';\n\nimport topReducer from './reducer';\n\nconst store = createStore(topReducer);\nexport default store;","import { PageSourceStatus } from '../store/reducer';\nimport * as actions from './types'\n\nexport const dispatchAddSkillMap = (map: SkillMap) => ({ type: actions.ADD_SKILL_MAP, map });\nexport const dispatchClearSkillMaps = () => ({ type: actions.CLEAR_SKILL_MAPS });\nexport const dispatchChangeSelectedItem = (id?: string) => ({ type: actions.CHANGE_SELECTED_ITEM, id });\nexport const dispatchSetSkillMapCompleted = (mapId: string) => ({ type: actions.SET_SKILL_MAP_COMPLETED, mapId });\n\nexport const dispatchSetHeaderIdForActivity = (id: string, currentStep: number, maxSteps: number) => ({ type: actions.SET_HEADERID_FOR_ACTIVITY, id, currentStep, maxSteps });\nexport const dispatchOpenActivity = (mapId: string, activityId: string) => ({ type: actions.OPEN_ACTIVITY, mapId, activityId });\nexport const dispatchCloseActivity = (finished = false) => ({ type: actions.CLOSE_ACTIVITY, finished });\nexport const dispatchSaveAndCloseActivity = () => ({ type: actions.SAVE_AND_CLOSE_ACTIVITY });\nexport const dispatchRestartActivity = (mapId: string, activityId: string) => ({ type: actions.RESTART_ACTIVITY, mapId, activityId });\n\nexport const dispatchSetUser = (user: UserState) => ({ type: actions.SET_USER, user });\nexport const dispatchUpdateUserCompletedTags = () => ({ type: actions.UPDATE_USER_COMPLETED_TAGS });\n\nexport const dispatchSetPageTitle = (title: string) => ({ type: actions.SET_PAGE_TITLE, title });\nexport const dispatchSetPageDescription = (description: string) => ({ type: actions.SET_PAGE_DESCRIPTION, description });\nexport const dispatchSetPageInfoUrl = (infoUrl: string) => ({ type: actions.SET_PAGE_INFO_URL, infoUrl });\nexport const dispatchSetPageSourceUrl = (url: string, status: PageSourceStatus) => ({ type: actions.SET_PAGE_SOURCE_URL, url, status });\n\nexport const dispatchShowCompletionModal = (mapId: string, activityId?: string) => ({ type: actions.SHOW_COMPLETION_MODAL, mapId, activityId });\nexport const dispatchShowRestartActivityWarning = (mapId: string, activityId: string) => ({ type: actions.SHOW_RESTART_ACTIVITY_MODAL, mapId, activityId });\nexport const dispatchShowReportAbuseModal = () => ({ type: actions.SHOW_REPORT_ABUSE_MODAL });\n\nexport const dispatchHideModal = () => ({ type: actions.HIDE_MODAL });","import React, { useState } from \"react\";\n\nimport '../styles/dropdown.css'\n\nexport interface DropdownItem {\n    id: string;\n    label: string;\n    onClick: (id: string) => void;\n}\n\ninterface DropdownProps {\n    icon: string;\n    items: DropdownItem[];\n    className?: string;\n}\n\nexport function Dropdown(props: DropdownProps) {\n    const { icon, items, className } = props;\n    const [ expanded, setExpanded ] = useState(false);\n\n    return <div className={`dropdown ${className} ${expanded ? 'expanded' : ''}`} tabIndex={0}\n                onClick={ () => setExpanded(!expanded) }\n                onBlur={ () => setExpanded(false) }>\n        <i className={`icon ${icon}`} />\n        {expanded && <div className=\"dropdown-menu\">\n            {items.map((el, i) => {\n                return <div key={i} className=\"dropdown-item\" onClick={() => el.onClick(el.id)}>{el.label}</div>\n            })}\n        </div>}\n    </div>\n}","/// <reference path=\"../../../built/pxteditor.d.ts\" />\nimport * as React from \"react\";\nimport { connect } from 'react-redux';\nimport { saveProjectAsync, getProjectAsync } from \"../lib/workspaceProvider\";\nimport { isLocal, resolvePath, tickEvent } from \"../lib/browserUtils\";\nimport { lookupActivityProgress } from \"../lib/skillMapUtils\";\n\nimport { SkillMapState } from '../store/reducer';\nimport  { dispatchSetHeaderIdForActivity, dispatchCloseActivity, dispatchSaveAndCloseActivity, dispatchUpdateUserCompletedTags } from '../actions/dispatch';\n\nimport '../styles/makecode-editor.css'\n\ninterface MakeCodeFrameProps {\n    save: boolean;\n    activityId: string;\n    title: string;\n    url: string;\n    tutorialPath: string;\n    completed: boolean;\n    activityHeaderId?: string;\n    activityType: MapActivityType;\n    dispatchSetHeaderIdForActivity: (headerId: string, currentStep: number, maxSteps: number) => void;\n    dispatchCloseActivity: (finished?: boolean) => void;\n    dispatchSaveAndCloseActivity: () => void;\n    dispatchUpdateUserCompletedTags: () => void;\n}\n\ninterface MakeCodeFrameState {\n    loaded: boolean;\n\n    // See handleFrameRef\n    unloading: boolean;\n}\n\nexport const editorUrl: string = isLocal() ? \"http://localhost:3232/index.html\" : (window as any).pxtTargetBundle.appTheme.embedUrl\n\nclass MakeCodeFrameImpl extends React.Component<MakeCodeFrameProps, MakeCodeFrameState> {\n    protected ref: HTMLIFrameElement | undefined;\n    protected messageQueue: any[] = [];\n    protected finishedActivityState: \"saving\" | \"finished\" | undefined;\n    protected nextId: number = 0;\n    protected pendingMessages: {[index: string]: any} = {};\n\n    constructor(props: MakeCodeFrameProps) {\n        super(props);\n        this.state = {\n            loaded: false,\n            unloading: false\n        };\n    }\n\n    componentDidUpdate() {\n        if (this.props.save) {\n            this.sendMessage({\n                type: \"pxteditor\",\n                action: \"saveproject\",\n                response: false\n            } as pxt.editor.EditorMessage, true);\n        }\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"message\", this.onMessageReceived);\n\n        // Show Usabilla widget + footer\n        setElementVisible(\".usabilla_live_button_container\", true);\n        setElementVisible(\"footer\", true);\n    }\n\n    render() {\n        const { url, title, save } = this.props;\n        const { loaded, unloading } = this.state;\n\n        const loadingText = save ? lf(\"Saving...\") : lf(\"Loading...\")\n        const imageAlt = \"MakeCode Logo\";\n\n        return <div className=\"makecode-frame-outer\">\n            <div className={`makecode-frame-loader ${(loaded && !save) ? \"hidden\" : \"\"}`}>\n                <img src={resolvePath(\"assets/logo.svg\")} alt={imageAlt} />\n                <div className=\"makecode-frame-loader-text\">{loadingText}</div>\n            </div>\n            <iframe className=\"makecode-frame\" src={unloading ? \"about:blank\" : url} title={title} ref={this.handleFrameRef}></iframe>\n        </div>\n    }\n\n\n    protected handleFrameRef = (ref: HTMLIFrameElement) => {\n        if (ref && ref.contentWindow) {\n            window.addEventListener(\"message\", this.onMessageReceived);\n            this.ref = ref;\n\n            this.ref.addEventListener(\"load\", () => {\n                // This is a workaround for a bug in Chrome where for some reason the page hangs when\n                // trying to unload the makecode iframe. Instead, we set the src to about:blank, wait for\n                // that to load, and then unload the iframe\n                if (this.state.unloading) {\n                    this.props.dispatchCloseActivity(this.finishedActivityState === \"finished\");\n                    this.props.dispatchUpdateUserCompletedTags();\n\n                    this.finishedActivityState = undefined;\n                }\n            });\n\n            // Hide Usabilla widget + footer when inside iframe view\n            setElementVisible(\".usabilla_live_button_container\", false);\n            setElementVisible(\"footer\", false);\n        }\n    }\n\n    protected onMessageReceived = (event: MessageEvent) => {\n        const data = event.data as pxt.editor.EditorMessageRequest;\n\n        if (data.type === \"pxteditor\" && data.id && this.pendingMessages[data.id]) {\n            this.onResponseReceived(this.pendingMessages[data.id], event.data as pxt.editor.EditorMessageResponse);\n            delete this.pendingMessages[data.id];\n            return;\n        }\n\n        switch (data.action) {\n            case \"event\":\n                this.handleEditorTickEvent(data as pxt.editor.EditorMessageEventRequest);\n                break;\n            case \"workspacesync\":\n                this.handleWorkspaceSyncRequest(data as pxt.editor.EditorWorkspaceSyncRequest);\n                break;\n            case \"workspacesave\":\n                this.handleWorkspaceSaveRequestAsync(data as pxt.editor.EditorWorkspaceSaveRequest);\n                break;\n            case \"workspaceevent\":\n                if ((data as pxt.editor.EditorWorkspaceEvent).event.type === \"createproject\") {\n                    this.handleWorkspaceReadyEventAsync();\n                }\n                break;\n            default:\n                // console.log(JSON.stringify(data, null, 4));\n        }\n    }\n\n    protected onResponseReceived(original: any, response: pxt.editor.EditorMessageResponse) {\n        const { save } = this.props;\n\n        if (original.action === \"saveproject\" && save) {\n            if (this.finishedActivityState === \"saving\") {\n                this.finishedActivityState = \"finished\";\n\n                // Save again to be sure we get any final edits\n                this.sendMessage({\n                    type: \"pxteditor\",\n                    action: \"saveproject\"\n                } as pxt.editor.EditorMessage, true);\n            }\n            else {\n                this.setState({\n                    unloading: true\n                });\n            }\n        }\n\n        if (original.action === \"importproject\") {\n            this.onEditorLoaded();\n        }\n    }\n\n    protected sendMessage(message: any, response = false) {\n        const sendMessageCore = (message: any) => {\n            if (response) {\n                message.response = true;\n                message.id = this.nextId++ + \"\";\n                this.pendingMessages[message.id] = message;\n            }\n            this.ref!.contentWindow!.postMessage(message, \"*\");\n        }\n\n        if (this.ref) {\n            if (!this.ref.contentWindow) {\n                this.messageQueue.push(message);\n            }\n            else {\n                while (this.messageQueue.length) {\n                    sendMessageCore(this.messageQueue.shift());\n                }\n                sendMessageCore(message);\n            }\n        }\n    }\n\n    protected handleWorkspaceSyncRequest(request: pxt.editor.EditorWorkspaceSyncRequest) {\n        this.sendMessage({\n            ...request,\n            success: true,\n            projects: []\n        } as pxt.editor.EditorWorkspaceSyncResponse);\n    }\n\n    protected async handleWorkspaceSaveRequestAsync(request: pxt.editor.EditorWorkspaceSaveRequest) {\n        const { dispatchSetHeaderIdForActivity, activityHeaderId, activityType, title } = this.props;\n\n        const project = {\n            ...request.project,\n            header: {\n                ...request.project.header!,\n                id: activityHeaderId || request.project.header!.id\n            }\n        };\n\n        // Patch the name, otherwise it will be the name of the GitHub repo\n        if (project.header?.name !== title) {\n            project.header!.name = title;\n            const pxtJSON = project.text![\"pxt.json\"];\n            if (pxtJSON) {\n                const config = JSON.parse(pxtJSON);\n                config.name = title;\n                project.text![\"pxt.json\"] = pxt.Package.stringifyConfig(config);\n            }\n        }\n\n        if (project.header.tutorialCompleted) {\n            const existing = await getProjectAsync(project.header.id);\n\n            if (existing?.header?.tutorial) {\n                project.header.tutorial = existing.header.tutorial;\n                project.header.tutorial.tutorialStep = project.header.tutorialCompleted.steps - 1;\n                delete project.header.tutorialCompleted;\n            }\n        }\n\n        if (activityType !== \"tutorial\" || project.header.tutorial || project.header.tutorialCompleted) {\n            await saveProjectAsync(project);\n        }\n\n        if (project.header!.tutorial) {\n            dispatchSetHeaderIdForActivity(\n                project.header.id,\n                (project.header.tutorial.tutorialStep || 0) + 1,\n                project.header.tutorial.tutorialStepInfo!.length\n            );\n        }\n        else if (project.header!.tutorialCompleted) {\n            dispatchSetHeaderIdForActivity(\n                project.header.id,\n                project.header.tutorialCompleted.steps,\n                project.header.tutorialCompleted.steps\n            );\n        }\n    }\n\n    protected async handleWorkspaceReadyEventAsync() {\n        if (this.props.activityHeaderId) {\n            const project = await getProjectAsync(this.props.activityHeaderId);\n            this.sendMessage({\n                type: \"pxteditor\",\n                action: \"importproject\",\n                project: project\n            } as pxt.editor.EditorMessageImportProjectRequest, true)\n        }\n        else {\n            this.sendMessage({\n                type: \"pxteditor\",\n                action: \"startactivity\",\n                path: this.props.tutorialPath,\n                activityType: \"tutorial\"\n            } as pxt.editor.EditorMessageStartActivity, true);\n        }\n    }\n\n    protected handleEditorTickEvent(event: pxt.editor.EditorMessageEventRequest) {\n        switch (event.tick) {\n            case \"tutorial.editorLoaded\":\n                this.onEditorLoaded();\n                break;\n            case \"tutorial.complete\":\n                this.onTutorialFinished();\n                break;\n        }\n    }\n\n    protected onEditorLoaded() {\n        tickEvent(\"skillmap.activity.loaded\");\n        this.setState({\n            loaded: true\n        });\n    }\n\n    protected onTutorialFinished() {\n        tickEvent(\"skillmap.activity.complete\");\n        this.finishedActivityState = \"saving\";\n        this.props.dispatchSaveAndCloseActivity();\n    }\n}\n\nfunction mapStateToProps(state: SkillMapState, ownProps: any) {\n    if (!state || !state.editorView) return {};\n\n    const { currentActivityId, currentMapId, currentHeaderId, state: saveState } = state.editorView;\n\n    let url = editorUrl\n    let title: string | undefined;\n\n    const activity = state.maps[currentMapId].activities[currentActivityId];\n    if (editorUrl.charAt(editorUrl.length - 1) === \"/\" && !isLocal()) {\n        url = editorUrl.substr(0, editorUrl.length - 1);\n    }\n\n    url += `?controller=1&skillsMap=1&noproject=1&nocookiebanner=1`;\n    title = activity.displayName;\n\n    return {\n        url,\n        tutorialPath: activity.url,\n        title,\n        activityId: currentActivityId,\n        activityHeaderId: currentHeaderId,\n        completed: lookupActivityProgress(state.user, currentMapId, currentActivityId)?.isCompleted,\n        activityType: activity.type,\n        save: saveState === \"saving\"\n    }\n}\n\nfunction setElementVisible(selector: string, visible: boolean) {\n    const el = document.querySelector(selector) as HTMLDivElement;\n    if (el?.style) el.style.display = visible ? \"\" : \"none\";\n}\n\nconst mapDispatchToProps = {\n    dispatchSetHeaderIdForActivity,\n    dispatchCloseActivity,\n    dispatchSaveAndCloseActivity,\n    dispatchUpdateUserCompletedTags\n};\n\nexport const MakeCodeFrame = connect(mapStateToProps, mapDispatchToProps)(MakeCodeFrameImpl);","/// <reference path=\"../lib/skillMap.d.ts\" />\nimport * as React from \"react\";\n\nimport { connect } from 'react-redux';\nimport { dispatchSaveAndCloseActivity } from '../actions/dispatch';\nimport { SkillMapState } from '../store/reducer';\nimport { resolvePath, tickEvent } from \"../lib/browserUtils\";\n\nimport { Dropdown, DropdownItem } from \"./Dropdown\";\nimport { isActivityCompleted } from \"../lib/skillMapUtils\";\nimport { editorUrl } from \"./makecodeFrame\";\n\ninterface HeaderBarProps {\n    activityOpen: boolean;\n    showReportAbuse?: boolean;\n    completedHeaderId?: string;\n    dispatchSaveAndCloseActivity: () => void;\n}\n\nexport class HeaderBarImpl extends React.Component<HeaderBarProps> {\n    protected reportAbuseUrl = \"https://github.com/contact/report-content\";\n    protected getSettingItems(): DropdownItem[] {\n        const items: DropdownItem[] = [];\n        if (this.props.showReportAbuse) {\n            items.push({\n                id: \"report\",\n                label: \"Report Abuse\",\n                onClick: (id: string) => window.open(this.reportAbuseUrl)\n            })\n        }\n\n        return items;\n    }\n\n    render() {\n        const { activityOpen, completedHeaderId } = this.props;\n        const logoAlt = \"MakeCode Logo\";\n        const organizationLogoAlt = \"Microsoft Logo\";\n\n        const items = this.getSettingItems();\n\n        return <div className=\"header\">\n            <div className=\"header-left\">\n                { activityOpen\n                    ? <i className=\"icon arrow left\" role=\"button\" onClick={this.onBackClicked} />\n                    : <div className=\"header-logo\">\n                        <img src={resolvePath(\"assets/logo.svg\")} alt={logoAlt} />\n                    </div>\n                }\n            </div>\n            <div className=\"spacer\" />\n            <div className=\"header-right\">\n                {completedHeaderId && <div className=\"header-button\" onClick={this.onSaveClicked}>\n                    {lf(\"SAVE TO MY PROJECTS\")}\n                </div>}\n                { items?.length > 0 && <Dropdown icon=\"setting\" className=\"header-settings\" items={items} /> }\n                <div className=\"header-org-logo\">\n                    <img src={resolvePath(\"assets/microsoft.png\")} alt={organizationLogoAlt} />\n                </div>\n            </div>\n        </div>\n    }\n\n    onBackClicked = () => {\n        tickEvent(\"skillmap.activity.back\");\n        this.props.dispatchSaveAndCloseActivity();\n    }\n\n    onSaveClicked = () => {\n        const { completedHeaderId } = this.props;\n        window.open(`${editorUrl}#skillmapimport:${completedHeaderId}`)\n    }\n}\n\n\nfunction mapStateToProps(state: SkillMapState, ownProps: any) {\n    if (!state) return {};\n\n    let completedHeaderId: string | undefined;\n    if (state.editorView?.currentHeaderId) {\n        if (isActivityCompleted(state.user, state.editorView.currentMapId, state.editorView.currentActivityId)) {\n            completedHeaderId = state.editorView.currentHeaderId;\n        }\n    }\n\n    return {\n        activityOpen: !!state.editorView,\n        showReportAbuse: state.pageSourceStatus === \"unknown\",\n        completedHeaderId\n    }\n}\n\n\nconst mapDispatchToProps = {\n    dispatchSaveAndCloseActivity\n};\n\nexport const HeaderBar = connect(mapStateToProps, mapDispatchToProps)(HeaderBarImpl);","import * as React from \"react\";\nimport { connect } from 'react-redux';\n\nimport { SkillMapState } from '../store/reducer';\n\ninterface BannerProps {\n    title: string;\n    description: string;\n    icon: string;\n}\n\nexport class BannerImpl extends React.Component<BannerProps> {\n    render() {\n        const  { title, description, icon } = this.props;\n        return <div className=\"banner\">\n            <div className=\"banner-card\">\n                <i className={`icon ${icon}`} />\n                <div className=\"banner-text\">\n                    <div className=\"banner-title\">{title}</div>\n                    <div className=\"banner-description\">{description}</div>\n                </div>\n            </div>\n        </div>\n    }\n}\n\nfunction mapStateToProps(state: SkillMapState, ownProps: any) {\n    return {\n        title: state.title,\n        description: state.description\n    };\n}\n\nexport const Banner = connect(mapStateToProps)(BannerImpl);","import * as React from \"react\";\n\nimport '../styles/modal.css'\n\nexport interface ModalAction {\n    label: string;\n    className?: string;\n    onClick: () => void;\n}\n\ninterface ModalProps {\n    title: string;\n    actions?: ModalAction[];\n    onClose?: () => void;\n}\n\nexport class Modal extends React.Component<ModalProps> {\n    protected handleModalClick = (e: any) => {\n        e.stopPropagation();\n        e.preventDefault();\n    }\n\n    protected handleCloseClick = () => {\n        if (this.props.onClose) this.props.onClose();\n        this.setState({ visible: false });\n    }\n\n    render() {\n        const  { title, actions } = this.props;\n        return <div className=\"modal-overlay\" onClick={this.handleCloseClick}>\n            <div className=\"modal\" onClick={this.handleModalClick}>\n                <div className=\"modal-header\">\n                    <div className=\"modal-title\">{title}</div>\n                    <div className=\"spacer\" />\n                    <div className=\"modal-close-icon\" onClick={this.handleCloseClick}><i className=\"icon close\"/></div>\n                </div>\n                <div className=\"modal-body\">\n                    { this.props.children }\n                </div>\n                {actions && actions.length > 0 && <div className=\"modal-actions\">\n                    {actions.map((el, i) => {\n                        return <div key={i} className={`modal-button ${el.className}`} onClick={el.onClick}>{el.label}</div>\n                    })}\n                </div>}\n            </div>\n        </div>\n    }\n}\n","/// <reference path=\"../lib/skillMap.d.ts\" />\n\nimport * as React from \"react\";\nimport { connect } from 'react-redux';\n\nimport { ModalType, SkillMapState } from '../store/reducer';\nimport { dispatchHideModal, dispatchRestartActivity, dispatchOpenActivity } from '../actions/dispatch';\nimport { tickEvent, postAbuseReportAsync } from \"../lib/browserUtils\";\n\nimport { Modal, ModalAction } from './Modal';\n\ntype CompletionModalType = \"map\" | \"activity\";\n\ninterface AppModalProps {\n    type: ModalType;\n    completionType?: CompletionModalType;\n    mapId: string;\n    activity?: MapActivity;\n    nextActivityId?: string;\n    pageSourceUrl?: string;\n    displayName?: string;\n    actions?: ModalAction[];\n    dispatchHideModal: () => void;\n    dispatchRestartActivity: (mapId: string, activityId: string) => void;\n    dispatchOpenActivity: (mapId: string, activityId: string) => void;\n}\n\nexport class AppModalImpl extends React.Component<AppModalProps> {\n    render() {\n        const  { activity, type, completionType } = this.props;\n\n        switch (type) {\n            case \"completion\":\n                if (!activity && completionType !== \"map\") return <div />\n                return this.renderCompletionModal();\n            case \"restart-warning\":\n                if (!activity) return <div />\n                return this.renderRestartWarning();\n            case \"report-abuse\":\n                return this.renderReportAbuse();\n            default:\n                return <div/>\n        }\n    }\n\n    renderCompletionModal() {\n        const  { type, displayName, dispatchHideModal, completionType, actions } = this.props;\n        if (!type) return <div />\n\n        const completionModalTitle = completionType === \"activity\" ? lf(\"Activity Complete!\") : lf(\"Path Complete!\");\n        const completionModalText = lf(\"Good work! You've completed {0}. Collect your certificate and keep going!\", \"{0}\");\n        const completionModalTextSegments = completionModalText.split(\"{0}\");\n\n        const density = 100;\n\n        return <div className=\"confetti-container\">\n            <Modal title={completionModalTitle} actions={actions} onClose={() => dispatchHideModal()}>\n                {completionModalTextSegments[0]}{<strong>{displayName}</strong>}{completionModalTextSegments[1]}\n            </Modal>\n            {Array(density).fill(0).map((el, i) => {\n                const style = {\n                    animationDelay: `${0.1 * (i % density)}s`,\n                    left: `${1 * (Math.floor(Math.random() * density))}%`\n                }\n                return <div key={i} style={style} className={`confetti ${Math.random() > 0.5 ? \"reverse\" : \"\"} color-${Math.floor(Math.random() * 9)}`} />\n            })}\n        </div>\n    }\n\n    renderRestartWarning() {\n        const  { mapId, activity, dispatchHideModal, dispatchRestartActivity } = this.props;\n        const restartModalTitle = lf(\"Restart Activity?\");\n        const restartModalText = lf(\"Are you sure you want to restart {0}? You won't lose your path progress but the code have written for this activity will be deleted.\", \"{0}\");\n        const restartModalTextSegments = restartModalText.split(\"{0}\");\n\n        const actions = [\n            { label: lf(\"CANCEL\"), onClick: () => dispatchHideModal() },\n            { label: lf(\"RESTART\"), onClick: () => {\n                tickEvent(\"skillmap.activity.restart\", { map: mapId, activity: activity!.activityId });\n                dispatchRestartActivity(mapId, activity!.activityId);\n            }}\n        ]\n\n        return <Modal title={restartModalTitle} actions={actions} onClose={() => dispatchHideModal()}>\n            {restartModalTextSegments[0]}{<strong>{activity!.displayName}</strong>}{restartModalTextSegments[1]}\n        </Modal>\n    }\n\n    renderReportAbuse() {\n        const  { pageSourceUrl, dispatchHideModal } = this.props;\n        const abuseModalTitle = \"Report Abuse\";\n        const abuseModalText = \"Describe the content and explain why you are reporting it for abuse. Provide as much detail as possible!\";\n\n        const actions = [\n            { label: \"REPORT\", onClick: () => {\n                tickEvent(\"skillmap.reportabuse\", { path: pageSourceUrl || \"\" });\n                postAbuseReportAsync(pageSourceUrl || \"\", { text: (document.querySelector(\".report-abuse-text\") as HTMLTextAreaElement).value });\n                dispatchHideModal();\n            }}\n        ]\n\n        return <Modal title={abuseModalTitle} actions={actions} onClose={() => dispatchHideModal()}>\n            <textarea className=\"report-abuse-text\" placeholder={abuseModalText} />\n        </Modal>\n    }\n}\n\nfunction mapStateToProps(state: SkillMapState, ownProps: any) {\n    if (!state) return {};\n    const { pageSourceUrl } = state;\n    const { currentMapId, currentActivityId, type } = state.modal || {};\n    let nextActivityId: string | undefined;\n    let displayName: string | undefined;\n    let completionType: CompletionModalType | undefined;\n    let actions: ModalAction[] = [];\n\n    if (currentMapId && type !== \"restart-warning\") {\n        const map = state.maps[currentMapId];\n        if (currentActivityId) {\n            const activity = map.activities[currentActivityId];\n            completionType = \"activity\";\n            displayName = activity.displayName;\n            nextActivityId = activity.next?.[0]?.activityId;\n\n            actions.push({ label: lf(\"NEXT\"), onClick: () => {\n                tickEvent(\"skillmap.activity.next\", { map: currentMapId, activity: currentActivityId });\n                dispatchHideModal();\n                dispatchOpenActivity(currentMapId, nextActivityId || \"\");\n             } });\n        } else {\n            completionType = \"map\";\n            displayName = map.displayName;\n\n            actions.push({ label: lf(\"CERTIFICATE\"), onClick: () => {\n                tickEvent(\"skillmap.certificate\", { map: currentMapId });\n                window.open(map.completionUrl)\n            }});\n        }\n    }\n\n    return {\n        type,\n        completionType,\n        displayName,\n        nextActivityId,\n        pageSourceUrl,\n        actions,\n\n        mapId: currentMapId,\n        activity: currentMapId && currentActivityId ? state.maps[currentMapId].activities[currentActivityId] : undefined\n    }\n}\n\nconst mapDispatchToProps = {\n    dispatchHideModal,\n    dispatchRestartActivity,\n    dispatchOpenActivity\n};\n\nexport const AppModal = connect(mapStateToProps, mapDispatchToProps)(AppModalImpl);\n","import * as React from \"react\";\n\nexport interface Item {\n    id: string;\n    label?: string;\n    url?: string;\n    imageUrl?: string;\n}\n\ninterface CarouselItemTemplateProps extends Item {\n}\n\nfunction CarouselItemTemplate(props: CarouselItemTemplateProps) {\n    const { label } = props;\n    return <span>{ label }</span>\n}\n\ninterface CarouselItemProps {\n    item: Item;\n    itemTemplate?: any;\n    selected?: boolean;\n    className?: string;\n    onSelect?: (id: string) => void;\n}\n\nexport function CarouselItem(props: CarouselItemProps) {\n    const { item, itemTemplate, selected, className, onSelect } = props;\n    const Inner = itemTemplate || CarouselItemTemplate;\n\n    const handleClick = () => { if (onSelect) onSelect(item.id); };\n\n    return <div className={`carousel-item ${selected ? 'selected' : ''} ${className || ''}`} onClick={handleClick}>\n        <Inner {...item} />\n    </div>\n}","import * as React from \"react\";\n\nimport { Item, CarouselItem } from './CarouselItem';\n\nimport '../styles/carousel.css'\nimport { ComponentClass } from \"react-redux\";\n\ninterface CarouselProps {\n    title?: string;\n    titleIcon?: string;\n    titleDecoration?: JSX.Element;\n    items: Item[];\n    selectedItem?: string;\n    itemClassName?: string;\n    itemTemplate?: ((props: Item) => JSX.Element) | ComponentClass<any>;\n    onItemSelect?: (id: string) => void;\n    prependChildren?: JSX.Element[];\n    appendChildren?: JSX.Element[];\n}\n\ninterface CarouselState {\n    showLeft: boolean;\n    showRight: boolean;\n}\n\nexport class Carousel extends React.Component<CarouselProps, CarouselState> {\n    protected scrollMargin = 5;\n    protected carouselRef: any;\n    constructor(props: CarouselProps) {\n        super(props);\n\n        this.state = { showLeft: false, showRight: true };\n    }\n\n    componentDidMount() {\n        this.handleScroll();\n        window.addEventListener(\"resize\", this.handleScroll);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"resize\", this.handleScroll);\n    }\n\n    scrollTo = (left: number) => {\n        this.carouselRef.scrollTo(left, 0);\n    }\n\n    protected handleLeftArrowClick = () => {\n        this.carouselRef.scrollBy({ left: - (window.innerWidth / 2) });\n    }\n\n    protected handleRightArrowClick = () => {\n        this.carouselRef.scrollBy({ left: window.innerWidth / 2 });\n    }\n\n    protected handleScroll = () => {\n        const scrollLeft = this.carouselRef.scrollLeft;\n        this.setState({\n            showLeft: scrollLeft > this.scrollMargin,\n            showRight: ((this.carouselRef.scrollWidth - this.carouselRef.clientWidth) - scrollLeft) > this.scrollMargin\n        });\n    }\n\n    render() {\n        const {\n            title,\n            items,\n            selectedItem,\n            itemTemplate,\n            itemClassName,\n            onItemSelect,\n            prependChildren,\n            appendChildren,\n            titleIcon,\n            titleDecoration\n        } = this.props;\n        const { showLeft, showRight } = this.state;\n\n        return <div className=\"carousel\">\n            {title && <div className=\"carousel-title\">\n                {titleIcon && <i className={`icon ${titleIcon}`} />}\n                <span>{title}</span>\n                {titleDecoration && <span className=\"carousel-subtitle\">{titleDecoration}</span>}\n            </div>}\n            {showLeft && <div className=\"carousel-arrow left\" onClick={this.handleLeftArrowClick}>\n                <i className=\"icon chevron left\" />\n            </div>}\n            <div className=\"carousel-items\">\n                <div className=\"carousel-items-inner\" onScroll={this.handleScroll} ref={(el) => this.carouselRef = el}>\n                    {prependChildren}\n                    {items.map((el, i) => {\n                        return <CarouselItem key={i} className={itemClassName} item={el} itemTemplate={itemTemplate} selected={selectedItem === el.id} onSelect={onItemSelect} />\n                    })}\n                    {appendChildren}\n                </div>\n            </div>\n            {showRight && <div className=\"carousel-arrow right\" onClick={this.handleRightArrowClick}>\n                <i className=\"icon chevron right\" />\n            </div>}\n        </div>\n    }\n}\n","import * as React from \"react\";\nimport { connect } from 'react-redux';\n\nimport { SkillMapState } from '../store/reducer';\nimport { Item } from './CarouselItem';\n\nimport { dispatchOpenActivity, dispatchShowRestartActivityWarning } from '../actions/dispatch';\n\nimport { isActivityUnlocked, isMapUnlocked, lookupActivityProgress, } from '../lib/skillMapUtils';\nimport { tickEvent } from '../lib/browserUtils';\n\nimport '../styles/skillcard.css'\n\ntype SkillCardStatus = \"locked\" | \"notstarted\" | \"inprogress\" | \"completed\" ;\n\ninterface SkillCardProps extends Item {\n    mapId: string;\n    description?: string;\n    imageUrl?: string;\n    tags?: string[];\n    status?: SkillCardStatus;\n    currentStep?: number;\n    maxSteps?: number\n    dispatchOpenActivity: (mapId: string, activityId: string) => void;\n    dispatchShowRestartActivityWarning: (mapId: string, activityId: string) => void;\n}\n\nexport class SkillCardImpl extends React.Component<SkillCardProps> {\n    protected getSkillCardActionText(): string {\n        switch (this.props.status) {\n            case \"locked\":\n                return lf(\"LOCKED\");\n            case \"completed\":\n                return lf(\"VIEW CODE\");\n            case \"inprogress\":\n                return lf(\"CONTINUE\");\n            case \"notstarted\":\n            default:\n                return lf(\"START\");\n        }\n    }\n\n    protected handleActionButtonClick = () => {\n        const { status, mapId, id, dispatchOpenActivity } = this.props;\n\n        switch (status) {\n            case \"locked\":\n                break;\n            case \"completed\":\n            case \"inprogress\":\n            case \"notstarted\":\n            default:\n                tickEvent(\"skillmap.activity.open\", { map: mapId, activity: id, status: status || \"\" });\n                return dispatchOpenActivity(mapId, id);\n        }\n    }\n\n    protected handleRestartButtonClick = () => {\n        const { mapId, id, dispatchShowRestartActivityWarning } = this.props;\n        dispatchShowRestartActivityWarning(mapId, id);\n    }\n\n    render() {\n        const { label, description, imageUrl, tags, status, currentStep, maxSteps} = this.props;\n\n        return <div className=\"skill-card-container\">\n            <div className={`skill-card ${status || ''}`}>\n                <div className=\"skill-card-display\">\n                    <div className=\"skill-card-image\">\n                        {imageUrl ? <img src={imageUrl} alt={lf(\"Preview of activity content\")} /> : <i className={`icon ${status !== \"locked\" ? \"game\" : \"\"}`} />}\n                    </div>\n                    <div className=\"skill-card-label\">\n                        <div className=\"skill-card-title\">\n                            {status === \"completed\" && <i className={`icon check circle`} />}\n                            {status === \"inprogress\" && maxSteps &&\n                                <span className=\"circular-label\">{`${currentStep}/${maxSteps}`}</span>\n                            }\n                            <span>{label}</span>\n                        </div>\n                        <div className=\"skill-card-tags\">\n                            {tags?.map((t, i) => {\n                                return <div key={i}>{t}</div>\n                            })}\n                        </div>\n                    </div>\n                    {status === \"locked\" && <div className=\"skill-card-overlay\"><i className=\"icon lock\" /></div>}\n                </div>\n                <div className=\"skill-card-info\">\n                    <div className=\"skill-card-title\">{label}</div>\n                    <div className=\"skill-card-description\">{description}</div>\n                    <div className=\"spacer\"></div>\n                    <div className=\"skill-card-action\">\n                        {status === \"completed\" &&\n                            <div className=\"skill-card-button-icon\" role=\"button\" onClick={this.handleRestartButtonClick}>\n                                <i className=\"xicon redo\"></i>\n                            </div>\n                        }\n                        <div className=\"skill-card-button\" role=\"button\" onClick={this.handleActionButtonClick}>\n                            {this.getSkillCardActionText()}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    }\n}\n\nfunction mapStateToProps(state: SkillMapState, ownProps: any) {\n    const map = state.maps?.[ownProps.mapId];\n    const isUnlocked = state.user && map && isActivityUnlocked(state.user, map, ownProps.id);\n\n    let status: SkillCardStatus = isUnlocked ? \"notstarted\" : \"locked\";\n    let currentStep: number | undefined;\n    let maxSteps: number | undefined;\n\n    if (state.user) {\n        if (map && state.pageSourceUrl && !isMapUnlocked(state.user, map, state.pageSourceUrl)) {\n            status = \"locked\";\n        }\n        else {\n            const progress = lookupActivityProgress(state.user, ownProps.mapId, ownProps.id);\n\n            if (progress) {\n                if (progress.isCompleted) {\n                    status = \"completed\";\n                }\n                else if (progress.headerId) {\n                    status = \"inprogress\";\n                    currentStep = progress?.currentStep;\n                    maxSteps = progress?.maxSteps;\n                }\n            }\n        }\n    }\n\n    return {\n        status,\n        currentStep,\n        maxSteps,\n    };\n}\n\nconst mapDispatchToProps = {\n    dispatchOpenActivity,\n    dispatchShowRestartActivityWarning\n}\n\nexport const SkillCard = connect(mapStateToProps, mapDispatchToProps)(SkillCardImpl);","/// <reference path=\"../lib/skillMap.d.ts\" />\n\nimport * as React from \"react\";\nimport { connect } from 'react-redux';\n\nimport { SkillMapState } from '../store/reducer';\nimport { dispatchChangeSelectedItem, dispatchShowCompletionModal, dispatchSetSkillMapCompleted } from '../actions/dispatch';\nimport { isMapCompleted, isMapUnlocked } from '../lib/skillMapUtils';\nimport { tickEvent } from '../lib/browserUtils';\nimport { Carousel } from './Carousel';\nimport { Item } from './CarouselItem';\nimport { SkillCard } from './SkillCard';\n\ninterface SkillCarouselProps {\n    map: SkillMap;\n    requiredMaps: SkillMap[];\n    user: UserState;\n    selectedItem?: string;\n    pageSourceUrl?: string;\n    completionState: \"incomplete\" | \"transitioning\" | \"completed\";\n    dispatchChangeSelectedItem: (id?: string) => void;\n    dispatchShowCompletionModal: (mapId: string, activityId?: string) => void;\n    dispatchSetSkillMapCompleted: (mapId: string) => void;\n}\n\nclass SkillCarouselImpl extends React.Component<SkillCarouselProps> {\n    protected carouselRef: any;\n    protected items: Item[];\n\n    constructor(props: SkillCarouselProps) {\n        super(props);\n\n        this.items = this.getItems(props.map.mapId, props.map.root);\n    }\n\n    protected getItems(mapId: string, root: MapActivity): Item[] {\n        const items = [];\n        let activity = root;\n        while (activity) {\n            items.push({\n                id: activity.activityId,\n                mapId,\n                label: activity.displayName,\n                description: activity.description,\n                tags: activity.tags,\n                url: activity.url,\n                imageUrl: activity.imageUrl\n            });\n            activity = activity.next[0]; // TODO still add nonlinear items to array even if we don't render graph\n        }\n\n        return items;\n    }\n\n    protected onItemSelect = (id: string) => {\n        if (id !== this.props.selectedItem) {\n            tickEvent(\"skillmap.carousel.item.select\", { map: this.props.map.mapId, activity: id });\n            this.props.dispatchChangeSelectedItem(id);\n        } else {\n            tickEvent(\"skillmap.carousel.item.deselect\", { map: this.props.map.mapId, activity: id });\n            this.props.dispatchChangeSelectedItem(undefined);\n        }\n    }\n\n    protected handleEndCardClick = () => {\n        tickEvent(\"skillmap.carousel.endcard.click\", { map: this.props.map.mapId });\n        this.props.dispatchShowCompletionModal(this.props.map.mapId);\n    }\n\n    protected handleEndCardTransition = () => {\n        tickEvent(\"skillmap.carousel.endcard.auto\", { map: this.props.map.mapId });\n        this.props.dispatchShowCompletionModal(this.props.map.mapId);\n    }\n\n    protected getEndCard(): JSX.Element {\n        return <div className={`end-card ${this.props.completionState === \"completed\" ? \"spin\" : \"\"}`} key=\"end\">\n            <div className=\"end-card-icon\" onClick={this.handleEndCardClick}>\n                <i className=\"icon trophy\" onTransitionEnd={this.handleEndCardTransition} />\n            </div>\n        </div>\n    }\n\n    protected renderRequirements(): JSX.Element | undefined {\n        if (!this.props.pageSourceUrl) return undefined;\n\n        const requirements = this.props.map.prerequisites;\n        const completedTags = this.props.user.completedTags;\n\n        const tags = requirements.map(req => {\n            if (req.type === \"tag\") {\n                let incomplete = req.numberCompleted;\n                if (completedTags[this.props.pageSourceUrl!] && completedTags[this.props.pageSourceUrl!][req.tag]) {\n                    incomplete = Math.max(incomplete - completedTags[this.props.pageSourceUrl!][req.tag], 0);\n                }\n\n                if (incomplete) {\n                    return <span key={\"tag_\" + req.tag}>{incomplete} <span className=\"carousel-subtitle-tag\">{req.tag}</span></span>\n                }\n            }\n            return null;\n        }).filter(element => !!element) as JSX.Element[];\n\n        const finishedMaps = this.props.requiredMaps.map(map =>\n            <span key={\"map_\" + map.mapId} className=\"carousel-subtitle-map\">{map.displayName}</span>\n        );\n\n        if (!tags.length && !finishedMaps.length) {\n            return undefined;\n        }\n        else if (!finishedMaps.length) {\n            return formatString(lf(\"Complete {0} tutorial(s) to unlock!\", \"{0}\"), [formatList(tags)]);\n        }\n        else if (!tags.length) {\n            return formatString(lf(\"Complete the {0} map(s) to unlock!\", \"{0}\"), [formatList(finishedMaps)]);\n        }\n        else {\n            return formatString(lf(\"Complete {0} tutorial(s) and the {1} map(s) to unlock!\", \"{0}\", \"{1}\"), [formatList(tags), formatList(finishedMaps)]);\n        }\n    }\n\n    componentDidUpdate(props: SkillCarouselProps) {\n        if (props.completionState === \"transitioning\") {\n            // Scroll to end so user can see end card, then dispatch animation\n            this.carouselRef.scrollTo(10000);\n            setTimeout(() => props.dispatchSetSkillMapCompleted(props.map.mapId), 400);\n        }\n    }\n\n    render() {\n        const { map, user, selectedItem } = this.props;\n        const endCard = isMapCompleted(user, map) ? [this.getEndCard()] : [];\n        const requirments = this.renderRequirements();\n\n        return <Carousel title={map.displayName} items={this.items} itemTemplate={SkillCard} itemClassName=\"linked\"\n            onItemSelect={this.onItemSelect} selectedItem={selectedItem}\n            appendChildren={endCard} titleIcon={requirments && \"lock\"} titleDecoration={requirments}\n            ref={(el) => this.carouselRef = el} />\n    }\n}\n\nfunction mapStateToProps(state: SkillMapState, ownProps: any) {\n    if (!state) return {};\n\n    const map: SkillMap = ownProps.map;\n    let requiredMaps: SkillMap[] = [];\n\n    if (map.prerequisites?.length && state.pageSourceUrl) {\n        requiredMaps = map.prerequisites\n            .filter(req => req.type === \"map\" && !isMapUnlocked(state.user, state.maps[req.mapId], state.pageSourceUrl!))\n            .map(req => state.maps[(req as MapFinishedPrerequisite).mapId]);\n\n    }\n\n    return {\n        user: state.user,\n        requiredMaps,\n        pageSourceUrl: state.pageSourceUrl,\n        completionState: state.user?.mapProgress?.[map.mapId]?.completionState,\n        selectedItem: state.selectedItem && ownProps.map?.activities?.[state.selectedItem] ? state.selectedItem : undefined\n    }\n}\n\n\n\nfunction formatList(elements: JSX.Element[]) {\n    // FIXME: \"and\" does not localize well\n    if (elements.length <= 1) return elements[0];\n    else if (elements.length === 2) return <span>{elements[0]} and {elements[1]}</span>;\n    else {\n        return <span>\n            {elements.slice(0, elements.length - 1).map(e => <span>{e}, </span>)} and {elements[elements.length - 1]}\n        </span>\n    }\n}\n\nfunction formatString(fmtString: string, elements: JSX.Element[]) {\n    let out: JSX.Element[] = [];\n    let current = fmtString;\n    let index = 0;\n    for (let i = 0; i < elements.length; i++) {\n        const parts = current.split(\"{\" + i + \"}\");\n        out.push(<span key={index++}>{parts[0]}</span>);\n        out.push(<span key={index++}>{elements[i]}</span>);\n        current = current.substr(parts[0].length + 3);\n    }\n    out.push(<span key={index++}>{current}</span>);\n\nreturn <span>{out}</span>\n}\n\n\nconst mapDispatchToProps = {\n    dispatchChangeSelectedItem,\n    dispatchShowCompletionModal,\n    dispatchSetSkillMapCompleted\n};\n\nexport const SkillCarousel = connect(mapStateToProps, mapDispatchToProps)(SkillCarouselImpl);\n","/// <reference path=\"./skillMap.d.ts\" />\n\nconst testMap = ``\n\ninterface MarkdownSection {\n    headerKind: \"single\" | \"double\" | \"triple\";\n    header: string;\n    attributes: {[index: string]: string};\n}\n\nexport function test() {\n    return parseSkillMap(testMap);\n}\n\nexport function parseSkillMap(text: string): { maps: SkillMap[], metadata?: PageMetadata } {\n    const sections = getSectionsFromText(text);\n\n    const parsed: SkillMap[] = [];\n    let metadata: PageMetadata | undefined;\n\n    let start = -1;\n\n    for (let i = 0; i < sections.length; i++) {\n        if (sections[i].headerKind === \"single\") {\n            metadata = inflateMetadata(sections[i]);\n        } else if (sections[i].headerKind === \"double\") {\n            if (start >= 0) {\n                parsed.push(buildMapFromSections(sections[start], sections.slice(start + 1, i)));\n            }\n            start = i;\n        }\n    }\n\n    if (start > 0 || parsed.length === 0) {\n        parsed.push(buildMapFromSections(sections[start], sections.slice(start + 1, sections.length)));\n    }\n\n    return { maps: parsed, metadata };\n}\n\nfunction getSectionsFromText(text: string) {\n    const lines = text.split(\"\\n\");\n\n    let sections: MarkdownSection[] = [];\n    let currentSection: MarkdownSection | null = null;\n\n    let currentKey: string | null = null;\n    let currentValue: string | null = null;\n\n    for (const line of lines) {\n        if (!line.trim()) {\n            if (currentValue) {\n                currentValue += \"\\n\";\n            }\n            continue;\n        }\n\n        if (line.startsWith(\"#\")) {\n            const headerMatch = /^(#+)\\s*(.+)$/.exec(line);\n\n            if (headerMatch) {\n                pushSection();\n\n                currentSection = {\n                    headerKind: headerMatch[1].length === 1 ? \"single\" :\n                        (headerMatch[1].length === 2 ? \"double\" : \"triple\"),\n                    header: headerMatch[2],\n                    attributes: {}\n                }\n                currentKey = null;\n                currentValue = null;\n                continue;\n            }\n        }\n\n        if (currentSection) {\n            const keyMatch = /^[*-]\\s+(?:([^:]+):)?(.*)$/.exec(line);\n\n            if (keyMatch) {\n                if (keyMatch[1]) {\n                    if (currentKey && currentValue) {\n                        currentSection.attributes[currentKey] = currentValue.trim();\n                    }\n                    currentKey = keyMatch[1].toLowerCase();\n                    currentValue = keyMatch[2];\n                }\n                else if (currentKey) {\n                    currentValue += keyMatch[2];\n                }\n            }\n        }\n    }\n\n    pushSection();\n\n    return sections;\n\n    function pushSection() {\n        if (currentSection) {\n            if (currentKey && currentValue) {\n                currentSection.attributes[currentKey] = currentValue.trim();\n            }\n            sections.push(currentSection);\n        }\n    }\n}\n\nfunction buildMapFromSections(header: MarkdownSection, sections: MarkdownSection[]) {\n    const result = inflateSkillMap(header);\n    const activities = sections.map(inflateActivity);\n\n    result.root = activities[0];\n\n    for (const activity of activities) {\n        if (result.activities![activity.activityId]) {\n            error(`Duplicate activity id '${activity.activityId}' in map '${result.mapId}'`);\n        }\n\n        result.activities![activity.activityId] = activity;\n    }\n\n    for (const activity of activities) {\n        for (const id of activity.nextIds) {\n            if (!result.activities![id]) error(`Unknown activity id '${id}' in map '${result.mapId}'`);\n            activity.next.push(result.activities![id]);\n        }\n    }\n\n    const reachable: {[index: string]: boolean} = {};\n\n    checkForLoopsRecursive(result.root);\n\n    for (const activity of activities) {\n        if (!reachable[activity.activityId]) {\n            console.warn(`Unreachable activity detected '${activity.activityId}' in map '${result.mapId}'`);\n        }\n    }\n\n    return result as SkillMap;\n\n    function checkForLoopsRecursive(root: MapActivity, visited: {[index: string]: boolean} = {}) {\n        if (visited[root.activityId]) error(`Loop in map '${result.mapId}' detected`);\n        visited[root.activityId] = true;\n        reachable[root.activityId] = true;\n\n        if (root.next.length > 1) {\n            error(\"Branching currently not supported\")\n        }\n\n        for (const next of root.next) {\n            checkForLoopsRecursive(next, {...visited});\n        }\n    }\n}\n\n\nfunction inflateSkillMap(section: MarkdownSection): Partial<SkillMap> {\n    const result: Partial<SkillMap> = {\n        mapId: section.header.toLowerCase(),\n        displayName: section.attributes[\"name\"] || section.header,\n        description: section.attributes[\"description\"],\n        completionUrl: section.attributes[\"completionurl\"],\n        prerequisites: [],\n        activities: {}\n    };\n\n    if (section.attributes[\"required\"]) {\n        const parts = section.attributes[\"required\"].split(\",\");\n        for (const part of parts) {\n            const match = /^\\s*(?:(\\d+) +)?(.+)$/.exec(part)!;\n\n            if (match[1]) {\n                result.prerequisites!.push({\n                    type: \"tag\",\n                    tag: match[2].trim(),\n                    numberCompleted: parseInt(match[1])\n                });\n            }\n            else {\n                result.prerequisites!.push({\n                    type: \"map\",\n                    mapId: match[2].trim()\n                });\n            }\n        }\n    }\n\n    return result;\n}\n\nfunction inflateActivity(section: MarkdownSection): MapActivity {\n    const result: Partial<MapActivity> = {\n        activityId: section.header.toLowerCase(),\n        displayName: section.attributes[\"name\"] || section.header,\n        description: section.attributes[\"description\"],\n        url: section.attributes[\"url\"],\n        imageUrl: section.attributes[\"imageurl\"],\n        tags: parseList(section.attributes[\"tags\"]),\n        next: [],\n        nextIds: parseList(section.attributes[\"next\"])\n    };\n\n    if (section.attributes[\"type\"]) {\n        const type = section.attributes[\"type\"].toLowerCase();\n        switch (type) {\n            case \"tutorial\":\n                result.type = type;\n                break;\n        }\n    }\n\n    if (section.attributes[\"editor\"]) {\n        const editor = section.attributes[\"editor\"].toLowerCase();\n        switch (editor) {\n            case \"py\":\n            case \"blocks\":\n            case \"js\":\n                result.editor = editor;\n                break;\n            default:\n                result.editor = \"blocks\";\n        }\n    }\n\n    if (!result.url) error(`Activity '${result.activityId}' is missing attribute 'url'`);\n    if (!result.type) error(`Activity '${result.activityId}' is missing attribute 'type'`);\n\n    return result as MapActivity;\n}\n\nfunction inflateMetadata(section: MarkdownSection): PageMetadata {\n    return {\n        title: section.attributes[\"name\"] || section.header,\n        description: section.attributes[\"description\"],\n        infoUrl: section.attributes[\"infoUrl\"]\n    }\n}\n\nfunction parseList(list: string, includeDuplicates = false) {\n    if (!list) return [];\n    const parts = list.split(\",\").map(p => p.trim().toLowerCase()).filter(p => !!p);\n\n    if (!includeDuplicates) {\n        let map: {[index: string]: string} = {};\n        parts.forEach(p => map[p] = p);\n        return Object.keys(map);\n    }\n    return parts;\n}\n\nfunction error(message: string): never {\n    throw(message);\n}\n\n\n\n","/// <reference path=\"./lib/skillMap.d.ts\" />\n\nimport React from 'react';\nimport { connect } from 'react-redux';\n\nimport * as Promise from \"bluebird\";\nimport store from \"./store/store\";\n\nimport {\n    dispatchAddSkillMap,\n    dispatchClearSkillMaps,\n    dispatchSetPageTitle,\n    dispatchSetPageDescription,\n    dispatchSetPageInfoUrl,\n    dispatchSetUser,\n    dispatchSetPageSourceUrl\n} from './actions/dispatch';\nimport { PageSourceStatus, SkillMapState } from './store/reducer';\nimport { HeaderBar } from './components/HeaderBar';\nimport { Banner } from './components/Banner';\nimport { AppModal } from './components/AppModal';\nimport { SkillCarousel } from './components/SkillCarousel';\n\nimport { parseSkillMap } from './lib/skillMapParser';\nimport { parseHash, getMarkdownAsync, MarkdownSource, parseQuery, guidGen } from './lib/browserUtils';\n\nimport './App.css';\nimport { MakeCodeFrame } from './components/makecodeFrame';\nimport { getUserStateAsync, saveUserStateAsync } from './lib/workspaceProvider';\nimport { Unsubscribe } from 'redux';\n\n// TODO: this file needs to read colors from the target\nimport './arcade.css';\n\n(window as any).Promise = Promise;\n\ninterface AppProps {\n    skillMaps: { [key: string]: SkillMap };\n    activityOpen: boolean;\n    dispatchAddSkillMap: (map: SkillMap) => void;\n    dispatchClearSkillMaps: () => void;\n    dispatchSetPageTitle: (title: string) => void;\n    dispatchSetPageDescription: (description: string) => void;\n    dispatchSetPageInfoUrl: (infoUrl: string) => void;\n    dispatchSetUser: (user: UserState) => void;\n    dispatchSetPageSourceUrl: (url: string, status: PageSourceStatus) => void;\n}\n\ninterface AppState {\n    error?: string;\n}\n\nclass AppImpl extends React.Component<AppProps, AppState> {\n    protected queryFlags: {[index: string]: string} = {};\n    protected unsubscribeChangeListener: Unsubscribe | undefined;\n    protected loadedUser: UserState | undefined;\n\n    constructor(props: any) {\n        super(props);\n        this.state = {};\n\n        window.addEventListener(\"hashchange\", this.handleHashChange);\n    }\n\n    protected handleHashChange = async (e: HashChangeEvent) => {\n        let config = await pxt.targetConfigAsync();\n        let hash = parseHash(window.location.hash || config.skillMap?.defaultPath);\n        this.fetchAndParseSkillMaps(hash.cmd as MarkdownSource, hash.arg);\n\n        e.stopPropagation();\n        e.preventDefault();\n    }\n\n    protected handleError = (msg?: string) => {\n        const errorMsg = msg || lf(\"Oops! Couldn't load content, please check the URL and markdown file.\");\n        console.error(errorMsg);\n        this.setState({ error: errorMsg });\n    }\n\n    protected async initLocalizationAsync() {\n        const theme = pxt.appTarget.appTheme;\n\n        const href = window.location.href;\n        let force = false;\n        let useLang: string | undefined = undefined;\n        if (/[&?]translate=1/.test(href) && !pxt.BrowserUtils.isIE()) {\n            console.log(`translation mode`);\n            useLang = ts.pxtc.Util.TRANSLATION_LOCALE;\n        } else {\n            const mlang = /(live)?(force)?lang=([a-z]{2,}(-[A-Z]+)?)/i.exec(window.location.href);\n            if (mlang && window.location.hash.indexOf(mlang[0]) >= 0) {\n                pxt.BrowserUtils.changeHash(window.location.hash.replace(mlang[0], \"\"));\n            }\n            useLang = mlang ? mlang[3] : (pxt.BrowserUtils.getCookieLang() || theme.defaultLocale || (navigator as any).userLanguage || navigator.language);\n            force = !!mlang && !!mlang[2];\n        }\n\n        // TODO: include the pxt webconfig so that we can get the commitcdnurl (and not always pass live=true)\n        const baseUrl = \"\";\n        const targetId = pxt.appTarget.id;\n        const pxtBranch = pxt.appTarget.versions.pxtCrowdinBranch;\n        const targetBranch = pxt.appTarget.versions.targetCrowdinBranch;\n\n        await updateLocalizationAsync(\n            targetId,\n            baseUrl,\n            useLang!,\n            pxtBranch!,\n            targetBranch!,\n            true,\n            force\n        );\n\n        if (pxt.Util.isLocaleEnabled(useLang!)) {\n            pxt.BrowserUtils.setCookieLang(useLang!);\n        }\n    }\n\n    protected async fetchAndParseSkillMaps(source: MarkdownSource, url: string) {\n        const result = await getMarkdownAsync(source, url);\n\n        const md = result?.text;\n        const fetched = result?.identifier;\n        const status = result?.status;\n\n        let loadedMaps: SkillMap[] | undefined;\n\n        if (md && fetched && status) {\n            try {\n                const { maps, metadata } = parseSkillMap(md);\n                if (maps?.length > 0) {\n                    loadedMaps = maps;\n                    this.props.dispatchClearSkillMaps();\n                    maps.forEach(map => {\n                        this.props.dispatchAddSkillMap(map);\n                    })\n                }\n                if (metadata) {\n                    const { title, description, infoUrl } = metadata;\n                    this.props.dispatchSetPageTitle(title);\n                    if (description) this.props.dispatchSetPageDescription(description);\n                    if (infoUrl) this.props.dispatchSetPageDescription(infoUrl);\n                }\n\n                if (status === \"banned\") {\n                    this.handleError(lf(\"This GitHub repository has been banned.\"));\n                } else {\n                    this.props.dispatchSetPageSourceUrl(fetched, status);\n                    this.setState({ error: undefined });\n                }\n            } catch {\n                this.handleError();\n            }\n        } else {\n            this.setState({ error: lf(\"No content loaded.\") })\n        }\n\n        let user = await getUserStateAsync();\n\n        if (!user) {\n            user = {\n                id: guidGen(),\n                completedTags: {},\n                mapProgress: {}\n            };\n        }\n\n        if (fetched && !user.completedTags[fetched]) {\n            user.completedTags[fetched] = {};\n        }\n\n        this.applyQueryFlags(user, loadedMaps);\n        this.loadedUser = user;\n        this.props.dispatchSetUser(user);\n    }\n\n    async componentDidMount() {\n        this.unsubscribeChangeListener = store.subscribe(this.onStoreChange);\n        this.queryFlags = parseQuery();\n        let config = await pxt.targetConfigAsync();\n        let hash = parseHash(window.location.hash || config.skillMap?.defaultPath);\n        await this.initLocalizationAsync();\n        this.fetchAndParseSkillMaps(hash.cmd as MarkdownSource, hash.arg);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"hashchange\", this.handleHashChange);\n        if (this.unsubscribeChangeListener) {\n            this.unsubscribeChangeListener();\n        }\n    }\n\n    render() {\n        const { skillMaps, activityOpen } = this.props;\n        const { error } = this.state;\n        const maps = Object.keys(skillMaps).map((id: string) => skillMaps[id]);\n        return (<div className={`app-container ${pxt.appTarget.id}`}>\n                <HeaderBar />\n                { activityOpen ? <MakeCodeFrame /> : <div>\n                    <Banner icon=\"map\" />\n                    <div className=\"skill-map-container\">\n                        { error\n                            ? <div className=\"skill-map-error\">{error}</div>\n                            : maps?.map((el, i) => {\n                                return <SkillCarousel map={el} key={i} />\n                            })}\n                    </div>\n                </div>\n                }\n                <AppModal />\n            </div>);\n    }\n\n    protected applyQueryFlags(user: UserState, maps?: SkillMap[], sourceUrl?: string) {\n        if (this.queryFlags[\"debugNewUser\"] === \"true\") {\n            user.isDebug = true;\n            user.mapProgress = {};\n            user.completedTags = {};\n        }\n\n        if (this.queryFlags[\"debugCompleted\"] === \"true\") {\n            user.isDebug = true;\n\n            if (maps) {\n                for (const map of maps) {\n                    user.mapProgress[map.mapId] = {\n                        completionState: \"completed\",\n                        mapId: map.mapId,\n                        activityState: {}\n                    };\n\n                    for (const key of Object.keys(map.activities)) {\n                        const activity = map.activities[key];\n                        if (!user.mapProgress[map.mapId].activityState[activity.activityId]) {\n                            user.mapProgress[map.mapId].activityState[activity.activityId] = {\n                                activityId: activity.activityId,\n                                isCompleted: true\n                            };\n                        }\n                        else {\n                            user.mapProgress[map.mapId].activityState[activity.activityId].isCompleted = true;\n                        }\n\n                        if (activity.tags?.length && sourceUrl) {\n                            for (const tag of activity.tags) {\n                                if (!user.completedTags[sourceUrl][tag]) user.completedTags[sourceUrl][tag] = 0;\n                                user.completedTags[sourceUrl][tag]++;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    protected onStoreChange = async () => {\n        const { user } = store.getState();\n\n        if (user !== this.loadedUser && (!this.loadedUser || user.id === this.loadedUser.id)) {\n            await saveUserStateAsync(user);\n            this.loadedUser = user;\n        }\n    }\n}\n\nfunction mapStateToProps(state: SkillMapState, ownProps: any) {\n    if (!state) return {};\n    return {\n        skillMaps: state.maps,\n        activityOpen: !!state.editorView\n    };\n}\n\nasync function updateLocalizationAsync(targetId: string, baseUrl: string, code: string, pxtBranch: string, targetBranch: string, live?: boolean, force?: boolean) {\n    code = pxt.Util.normalizeLanguageCode(code)[0];\n    if (code === \"en-US\")\n        code = \"en\"; // special case for built-in language\n    if (code === pxt.Util.userLanguage() || (!pxt.Util.isLocaleEnabled(code) && !force)) {\n        return;\n    }\n\n    const translations = await pxt.Util.downloadTranslationsAsync(\n        targetId,\n        baseUrl,\n        code,\n        pxtBranch,\n        targetBranch,\n        !!live,\n        ts.pxtc.Util.TranslationsKind.SkillMap\n    );\n\n    pxt.Util.setUserLanguage(code);\n    if (translations) {\n        pxt.Util.setLocalizedStrings(translations);\n        if (live) {\n            pxt.Util.localizeLive = true;\n        }\n    }\n}\n\nconst mapDispatchToProps = {\n    dispatchAddSkillMap,\n    dispatchClearSkillMaps,\n    dispatchSetPageTitle,\n    dispatchSetPageDescription,\n    dispatchSetPageInfoUrl,\n    dispatchSetUser,\n    dispatchSetPageSourceUrl\n};\n\nconst App = connect(mapStateToProps, mapDispatchToProps)(AppImpl);\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store/store';\nimport App from './App';\n\nconst bundle = (window as any).pxtTargetBundle as pxt.TargetBundle;\nbundle.bundledpkgs = {}\n\npxt.setAppTarget(bundle);\npxt.Cloud.apiRoot = \"https://www.makecode.com/api/\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n\n    document.getElementById('root')\n);"],"sourceRoot":""}