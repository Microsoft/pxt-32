{"version":3,"sources":["actions/types.ts","lib/browserUtils.ts","lib/skillMapUtils.ts","store/reducer.ts","store/store.ts","actions/dispatch.ts","components/HeaderBar.tsx","components/Banner.tsx","components/Modal.tsx","components/AppModal.tsx","components/CarouselItem.tsx","components/Carousel.tsx","components/SkillCard.tsx","components/SkillCarousel.tsx","lib/skillMapParser.ts","lib/workspaceProvider.ts","lib/indexedDBWrapper.ts","components/makecodeFrame.tsx","App.tsx","index.tsx"],"names":["ADD_SKILL_MAP","CLEAR_SKILL_MAPS","CHANGE_SELECTED_ITEM","SET_HEADERID_FOR_ACTIVITY","OPEN_ACTIVITY","CLOSE_ACTIVITY","SAVE_AND_CLOSE_ACTIVITY","RESTART_ACTIVITY","SET_USER","SET_PAGE_TITLE","SET_PAGE_DESCRIPTION","SET_PAGE_INFO_URL","SHOW_COMPLETION_MODAL","SHOW_RESTART_ACTIVITY_MODAL","HIDE_MODAL","apiRoot","parseHash","hash","cmd","arg","match","exec","window","location","getMarkdownAsync","source","url","a","trim","replace","target","pxtTargetBundle","name","httpGetAsync","rawUrl","Promise","resolve","reject","request","XMLHttpRequest","addEventListener","err","responseText","e","open","send","randomUint32","buf","Uint8Array","crypto","getRandomValues","i","length","Math","floor","random","getRandomBuf","Uint32Array","buffer","guidGen","f","toString","slice","isLocal","hostname","resolvePath","path","isActivityUnlocked","user","map","activityId","root","checkRecursive","mapId","lookupActivityProgress","isCompleted","isActivityCompleted","next","some","activity","mapProgress","activityState","initialState","title","description","isDebug","id","completedTags","maps","setHeaderIdForActivity","headerId","currentStep","maxSteps","existing","undefined","setActivityFinished","topReducer","state","action","type","actions","selectedItem","editorView","currentMapId","currentActivityId","currentHeaderId","finished","modal","infoUrl","store","createStore","dispatchOpenActivity","dispatchSaveAndCloseActivity","dispatchHideModal","HeaderBarImpl","onBackClicked","props","activityOpen","this","className","role","onClick","src","alt","React","mapDispatchToProps","HeaderBar","connect","ownProps","BannerImpl","icon","Banner","Modal","handleModalClick","stopPropagation","preventDefault","handleCloseClick","onClose","setState","visible","children","el","label","AppModalImpl","completionType","renderCompletionModal","renderRestartWarning","displayName","completionModalTitle","completionModalTextSegments","split","dispatchRestartActivity","restartModalTextSegments","AppModal","nextActivityId","activities","push","completionUrl","CarouselItemTemplate","CarouselItem","item","itemTemplate","selected","onSelect","Inner","Carousel","scrollMargin","carouselRef","handleLeftArrowClick","scrollBy","left","innerWidth","handleRightArrowClick","handleScroll","scrollLeft","showLeft","showRight","scrollWidth","clientWidth","removeEventListener","items","itemClassName","onItemSelect","prependChildren","appendChildren","onScroll","ref","SkillCardImpl","handleActionButtonClick","status","handleRestartButtonClick","dispatchShowRestartActivityWarning","imageUrl","tags","t","getSkillCardActionText","SkillCard","progress","SkillCarouselImpl","dispatchChangeSelectedItem","handleEndCardClick","dispatchShowCompletionModal","getItems","endCard","Object","keys","k","isMapCompleted","getEndCard","SkillCarousel","parseSkillMap","text","metadata","section","sections","lines","currentSection","currentKey","currentValue","line","startsWith","headerMatch","pushSection","headerKind","header","attributes","keyMatch","toLowerCase","getSectionsFromText","parsed","start","buildMapFromSections","result","prerequisites","parts","part","tag","numberCompleted","parseInt","inflateSkillMap","inflateActivity","error","nextIds","reachable","checkForLoopsRecursive","visited","console","warn","parseList","editor","list","includeDuplicates","p","filter","forEach","message","workspace","workspacePromise","IDBWrapper","version","upgradeHandler","quotaExceededHandler","_db","Error","op","pxt","log","tickEvent","mode","throwIfNotOpened","transaction","objectStore","indexedDB","mozIndexedDB","webkitIndexedDB","msIndexedDB","onsuccess","onerror","errorHandler","onupgradeneeded","ev","storeName","getObjectStore","get","cursor","openCursor","data","value","continue","put","add","delete","clear","deleteDatabase","getWorkspaceAsync","IndexedDBWorkspace","initAsync","then","wp","getProjectAsync","ws","saveProjectAsync","project","getUserStateAsync","saveUserStateAsync","db","databaseName","createObjectStore","projectTable","keyPath","projectKey","userTable","userKey","openAsync","getAsync","entry","setAsync","editorUrl","appTheme","embedUrl","MakeCodeFrameImpl","messageQueue","finishedTutorial","nextId","pendingMessages","handleFrameRef","contentWindow","onMessageReceived","unloading","dispatchCloseActivity","event","onResponseReceived","handleEditorTickEvent","handleWorkspaceSyncRequest","handleWorkspaceSaveRequestAsync","JSON","stringify","handleWorkspaceReadyEventAsync","loaded","save","sendMessage","response","loadingText","original","sendMessageCore","postMessage","shift","success","projects","dispatchSetHeaderIdForActivity","activityHeaderId","tutorial","tutorialStep","tutorialStepInfo","tutorialCompleted","steps","tutorialPath","activityType","tick","onEditorLoaded","onTutorialFinished","MakeCodeFrame","saveState","charAt","substr","completed","AppImpl","queryFlags","unsubscribeChangeListener","loadedUser","handleHashChange","fetchAndParseSkillMaps","onStoreChange","getState","md","loadedMaps","dispatchClearSkillMaps","dispatchAddSkillMap","dispatchSetPageTitle","dispatchSetPageDescription","errorMsg","applyQueryFlags","dispatchSetUser","subscribe","out","query","search","URLSearchParams","key","parseQuery","skillMaps","Component","dispatchSetPageInfoUrl","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iSAAaA,EAAgB,gBAChBC,EAAmB,mBACnBC,EAAuB,uBACvBC,EAA4B,4BAC5BC,EAAgB,gBAChBC,EAAiB,iBACjBC,EAA0B,0BAC1BC,EAAmB,mBAEnBC,EAAW,WAEXC,EAAiB,iBACjBC,EAAuB,uBACvBC,EAAoB,oBAEpBC,EAAwB,wBACxBC,EAA8B,8BAC9BC,EAAa,a,wBCjBpBC,EAAU,kCAGT,SAASC,IACZ,IAAIC,EAAO,CAAEC,IAAK,GAAIC,IAAK,IAEvBC,EAAQ,4BAA4BC,KAAKC,OAAOC,SAASN,MAAQ,gDAIrE,OAHIG,IACAH,EAAO,CAAEC,IAAKE,EAAM,GAAID,IAAKC,EAAM,IAAM,KAEtCH,EAqBJ,SAAeO,EAAtB,oC,4CAAO,WAAgCC,EAAwBC,GAAxD,qBAAAC,EAAA,yDACEF,GAAWC,EADb,yCACyB,IADzB,YAEKD,EAFL,OAGM,SAHN,OAOM,WAPN,+BAIKC,EAAMA,EAAIE,OAAOC,QAAQ,UAAW,IAAIA,QAAQ,SAAU,IACpDC,GAAS,UAACR,OAAeS,uBAAhB,eAAiCC,OAAQ,SAL7D,SAMkBC,EAAa,GAAD,OAAIlB,EAAJ,YAAee,EAAf,YAAyBJ,IANvD,uDAgBSQ,EAASR,EAAIE,QACbR,EAAQ,6GAA6GC,KAAKa,MAE1HA,EAAM,4CAAwCd,EAAM,GAA9C,YAAoDA,EAAM,GAA1D,YAAgEA,EAAM,GAAtE,YAA4EA,EAAM,GAAlF,QAnBf,UAsBkBa,EAAaC,GAtB/B,kEAwBkBD,EAAaP,GAxB/B,sF,sBA4BA,SAASO,EAAaP,GACzB,OAAO,IAAIS,SAAgB,SAACC,EAASC,GACjC,IAAMC,EAAU,IAAIC,eACpBD,EAAQE,iBAAiB,SAAS,SAAAC,GAC9BJ,EAAOI,MAGXH,EAAQE,iBAAiB,QAAQ,WAC7B,IACIJ,EAAQE,EAAQI,cAEpB,MAAOC,GACHN,EAAOM,OAGfL,EAAQM,KAAK,MAAOlB,GACpBY,EAAQO,UAahB,SAASC,IACL,IAAIC,EAAM,IAAIC,WAAW,GAEzB,OAZJ,SAAsBD,GAClB,GAAIzB,OAAO2B,OACP3B,OAAO2B,OAAOC,gBAAgBH,QAE9B,IAAK,IAAII,EAAI,EAAGA,EAAIJ,EAAIK,SAAUD,EAC9BJ,EAAII,GAAKE,KAAKC,MAAsB,IAAhBD,KAAKE,UAMjCC,CAAaT,GACN,IAAIU,YAAYV,EAAIW,QAAQ,GAGhC,SAASC,IACZ,SAASC,IAAM,OAAyB,MAAjBd,KAA0Be,SAAS,IAAIC,OAAO,GACrE,OAAOF,IAAMA,IAAM,IAAMA,IAAM,KAAOA,IAAIE,OAAO,GAAK,IAAMF,IAAM,IAAMA,IAAMA,IAAMA,IAGjF,SAASG,IACZ,MAAoC,cAA7BzC,OAAOC,SAASyC,SAGpB,SAASC,EAAYC,GACxB,MAAM,GAAN,OAAUH,IAAY,GAAK,mBAA3B,YAAiDG,EAAKrC,QAAQ,MAAO,K,WChFlE,SAASsC,EAAmBC,EAAiBC,EAAeC,GAC/D,OAAID,EAAIE,KAAKD,aAAeA,GAI5B,SAASE,EAAeD,GACpB,GAxBD,SAA6BH,EAAiBK,EAAeH,GAAqB,IAAD,EACpF,SAAQ,UAAEI,EAAuBN,EAAMK,EAAOH,UAAtC,aAAE,EAAiDK,aAuBnDC,CAAoBR,EAAMC,EAAII,MAAOF,EAAKD,YAAa,CACvD,GAAIC,EAAKM,KAAKC,MAAK,SAAAC,GAAQ,OAAIA,EAAST,aAAeA,KACnD,OAAO,EAF4C,oBAKpCC,EAAKM,MAL+B,IAKvD,2BAA8B,CAAC,IAApBA,EAAmB,QAC1B,GAAIL,EAAeK,GAAO,OAAO,GANkB,+BAU3D,OAAO,EAbJL,CAAeH,EAAIE,MAiBvB,SAASG,EAAuBN,EAAiBK,EAAeH,GAAqB,IAAD,EACvF,iBAAOF,EAAKY,YAAYP,UAAxB,aAAO,EAAyBQ,cAAcX,GCdlD,IAAMY,EAA8B,CAChCC,MAAO,mBACPC,YAAa,8EACbhB,KAAM,CACFiB,SAAS,EACTC,GAAI3B,IACJqB,YAAa,GACbO,cAAe,IAEnBC,KAAM,IAsIH,SAASC,EAAuBrB,EAAiBK,EAAeH,EAAoBoB,EAAmBC,EAAsBC,GAA+B,IAAD,EAC1JC,EAAWnB,EAAuBN,EAAMK,EAAOH,GAE9CuB,IACDA,EAAW,CACPlB,aAAa,EACbL,aACAqB,cACAC,WACAF,aAIR,IAAMf,EAAckB,EAASlB,kBAA+BmB,IAAhBH,QAA0CG,IAAbF,GAA0BD,GAAeC,EAElH,OAAO,2BACAxB,GADP,IAEIY,YAAY,2BACLZ,EAAKY,aADD,kBAENP,EAFM,2BAGCL,EAAKY,YAAYP,IAAU,CAAEA,UAH9B,IAIHQ,cAAc,4BACN,UAAAb,EAAKY,YAAYP,UAAjB,eAAyBQ,gBAAiB,IADrC,kBAERX,EAFQ,2BAGFuB,GAHE,IAILH,WACAC,cACAC,WACAjB,wBAQjB,SAASoB,EAAoB3B,EAAiBK,EAAeH,GAAqB,IAAD,EAChFuB,EAAWnB,EAAuBN,EAAMK,EAAOH,GAWnD,OATKuB,IACDA,EAAW,CACPlB,aAAa,EACbL,aACAoB,SAAU,GACVC,YAAa,IAId,2BACAvB,GADP,IAEIY,YAAY,2BACLZ,EAAKY,aADD,kBAENP,EAFM,2BAGCL,EAAKY,YAAYP,IAAU,CAAEA,UAH9B,IAIHQ,cAAc,4BACN,UAAAb,EAAKY,YAAYP,UAAjB,eAAyBQ,gBAAiB,IADrC,kBAERX,EAFQ,2BAGFuB,GAHE,IAILlB,aAAa,YAQtBqB,MArMI,WAAsE,IAAD,EAApEC,EAAoE,uDAA7Cf,EAAcgB,EAA+B,uCACpF,OAAQA,EAAOC,MACX,KAAKC,EACD,OAAO,2BACAH,GADP,IAEI7B,KAAK,2BACE6B,EAAM7B,MADT,IAEAY,YAAY,2BACLiB,EAAM7B,KAAKY,aADP,kBAENkB,EAAO7B,IAAII,MAAQ,CAAEA,MAAOyB,EAAO7B,IAAII,MAAOQ,cAAe,QAGtEO,KAAK,2BACES,EAAMT,MADT,kBAECU,EAAO7B,IAAII,MAAQyB,EAAO7B,QAGvC,KAAK+B,EACD,OAAO,2BACAH,GADP,IAEIT,KAAM,KAEd,KAAKY,EACD,OAAO,2BACAH,GADP,IAEII,aAAcH,EAAOZ,KAE7B,KAAKc,EACD,OAAO,2BACAH,GADP,IAEIK,WAAY,CACRC,aAAcL,EAAOzB,MACrB+B,kBAAmBN,EAAO5B,WAC1B2B,MAAO,SACPQ,gBAAe,UAAE/B,EACbuB,EAAM7B,KACN8B,EAAOzB,MACPyB,EAAO5B,mBAHI,aAAE,EAIdoB,YAIf,KAAKU,EACD,OAAO,2BACAH,GADP,IAEIK,WAAW,2BACJL,EAAMK,YADH,IAENL,MAAO,aAGnB,KAAKG,EACD,OAAO,2BACAH,GADP,IAEIK,gBAAYR,EACZ1B,KAAM8B,EAAOQ,SACTX,EAAoBE,EAAM7B,KAAM6B,EAAMK,WAAYC,aAAcN,EAAMK,WAAYE,mBAClFP,EAAM7B,OAElB,KAAKgC,EACD,OAAO,2BACAH,GADP,IAEIU,WAAOb,EACPQ,WAAY,CACRL,MAAO,SACPM,aAAcL,EAAOzB,MACrB+B,kBAAmBN,EAAO5B,YAE9BF,KAAMqB,EACFQ,EAAM7B,KACN8B,EAAOzB,MACPyB,EAAO5B,cAGnB,KAAK8B,EACD,OAAKH,EAAMK,WACJ,2BACAL,GADP,IAEIK,WAAW,2BACJL,EAAMK,YADH,IAENG,gBAAiBP,EAAOZ,KAE5BlB,KAAMqB,EACFQ,EAAM7B,KACN6B,EAAMK,WAAYC,aAClBN,EAAMK,WAAYE,kBAClBN,EAAOZ,GACPY,EAAOP,YACPO,EAAON,YAbeK,EAgBlC,KAAKG,EACD,OAAO,2BACAH,GADP,IAEI7B,KAAM8B,EAAO9B,OAErB,KAAKgC,EACD,OAAO,2BACAH,GADP,IAEId,MAAOe,EAAOf,QAEtB,KAAKiB,EACD,OAAO,2BACAH,GADP,IAEIb,YAAac,EAAOd,cAE5B,KAAKgB,EACD,OAAO,2BACAH,GADP,IAEIW,QAASV,EAAOU,UAExB,KAAKR,EACD,OAAO,2BACAH,GADP,IAEIU,MAAO,CAAER,KAAM,aAAcI,aAAcL,EAAOzB,MAAO+B,kBAAmBN,EAAO5B,cAE3F,KAAK8B,EACD,OAAO,2BACAH,GADP,IAEIU,MAAO,CAAER,KAAM,kBAAmBI,aAAcL,EAAOzB,MAAO+B,kBAAmBN,EAAO5B,cAEhG,KAAK8B,EACD,OAAO,2BACAH,GADP,IAEIU,WAAOb,IAEf,QACI,OAAOG,ICpKJY,EADDC,YAAYd,G,4BCEbe,EAAuB,SAACtC,EAAeH,GAAhB,MAAwC,CAAE6B,KAAMC,EAAuB3B,QAAOH,eAErG0C,EAA+B,iBAAO,CAAEb,KAAMC,IAU9Ca,EAAoB,iBAAO,CAAEd,KAAMC,ICLnCc,GAAb,4MAwBIC,cAAgB,WACZ,EAAKC,MAAMJ,gCAzBnB,uDACc,IACEK,EAAiBC,KAAKF,MAAtBC,aAIR,OAAO,sBAAKE,UAAU,SAAf,UACH,qBAAKA,UAAU,cAAf,SACMF,EACI,mBAAGE,UAAU,kBAAkBC,KAAK,SAASC,QAASH,KAAKH,gBAC3D,qBAAKI,UAAU,cAAf,SACE,qBAAKG,IAAKzD,EAAY,mBAAoB0D,IAR1C,sBAYZ,qBAAKJ,UAAU,WACf,qBAAKA,UAAU,eAAf,SACI,qBAAKA,UAAU,kBAAf,SACI,qBAAKG,IAAKzD,EAAY,wBAAyB0D,IAd/B,8BAJpC,GAAmCC,aAsCnC,IAAMC,GAAqB,CACvBb,gCAGSc,GAAYC,aAZzB,SAAyB9B,EAAsB+B,GAC3C,OAAK/B,EACE,CACHoB,eAAgBpB,EAAMK,YAFP,KAW2BuB,GAAzBE,CAA6Cb,IC5CzDe,GAAb,uKACc,IAAD,EACiCX,KAAKF,MAAlCjC,EADJ,EACIA,MAAOC,EADX,EACWA,YAAa8C,EADxB,EACwBA,KAC7B,OAAO,qBAAKX,UAAU,SAAf,SACH,sBAAKA,UAAU,cAAf,UACI,mBAAGA,UAAS,eAAUW,KACtB,sBAAKX,UAAU,cAAf,UACI,qBAAKA,UAAU,eAAf,SAA+BpC,IAC/B,qBAAKoC,UAAU,qBAAf,SAAqCnC,gBARzD,GAAgCwC,aAsBzB,IAAMO,GAASJ,aAPtB,SAAyB9B,EAAsB+B,GAC3C,MAAO,CACH7C,MAAOc,EAAMd,MACbC,YAAaa,EAAMb,eAIL2C,CAAyBE,ICjBlCG,I,MAAb,4MACcC,iBAAmB,SAAC1F,GAC1BA,EAAE2F,kBACF3F,EAAE4F,kBAHV,EAMcC,iBAAmB,WACrB,EAAKpB,MAAMqB,SAAS,EAAKrB,MAAMqB,UACnC,EAAKC,SAAS,CAAEC,SAAS,KARjC,uDAWc,IAAD,EACuBrB,KAAKF,MAAxBjC,EADJ,EACIA,MAAOiB,EADX,EACWA,QAChB,OAAO,qBAAKmB,UAAU,gBAAgBE,QAASH,KAAKkB,iBAA7C,SACH,sBAAKjB,UAAU,QAAQE,QAASH,KAAKe,iBAArC,UACI,sBAAKd,UAAU,eAAf,UACI,qBAAKA,UAAU,cAAf,SAA8BpC,IAC9B,qBAAKoC,UAAU,WACf,qBAAKA,UAAU,mBAAmBE,QAASH,KAAKkB,iBAAhD,SAAkE,mBAAGjB,UAAU,oBAEnF,qBAAKA,UAAU,aAAf,SACMD,KAAKF,MAAMwB,WAEhBxC,GAAWA,EAAQhD,OAAS,GAAK,qBAAKmE,UAAU,gBAAf,SAC7BnB,EAAQ/B,KAAI,SAACwE,EAAI1F,GACd,OAAO,qBAAaoE,UAAS,uBAAkBsB,EAAGtB,WAAaE,QAASoB,EAAGpB,QAApE,SAA8EoB,EAAGC,OAAvE3F,iBAzBzC,GAA2ByE,cCSdmB,GAAb,uKACc,IAAD,EACuCzB,KAAKF,MAAxCrC,EADJ,EACIA,SAAUoB,EADd,EACcA,KAAM6C,EADpB,EACoBA,eACzB,IAAKjE,GAA+B,QAAnBiE,EAA0B,OAAO,wBAElD,OAAQ7C,GACJ,IAAK,aACD,OAAOmB,KAAK2B,wBAChB,IAAK,kBACD,OAAO3B,KAAK4B,uBAChB,QACI,OAAO,2BAXvB,8CAe6B,IAAD,EACuD5B,KAAKF,MAAvEjB,EADW,EACXA,KAAMgD,EADK,EACLA,YAAalC,EADR,EACQA,kBAAmB+B,EAD3B,EAC2BA,eAAgB5C,EAD3C,EAC2CA,QAC/D,IAAKD,EAAM,OAAO,wBAElB,IAAMiD,EAA0C,aAAnBJ,EAAgC,qBAAuB,iBAE9EK,EADsB,+CAC4BC,MAAM,OAE9D,OAAO,eAAC,GAAD,CAAOnE,MAAOiE,EAAsBhD,QAASA,EAASqC,QAAS,kBAAMxB,KAArE,UACFoC,EAA4B,GAAI,iCAASF,IAAuBE,EAA4B,QAxBzG,6CA4B4B,IAAD,EACsD/B,KAAKF,MAArE3C,EADU,EACVA,MAAOM,EADG,EACHA,SAAUkC,EADP,EACOA,kBAAmBsC,EAD1B,EAC0BA,wBAGvCC,EADmB,iHACyBF,MAAM,OAElDlD,EAAU,CACZ,CAAE0C,MAAO,SAAUrB,QAAS,kBAAMR,MAClC,CAAE6B,MAAO,UAAWrB,QAAS,WACzB8B,EAAwB9E,EAAOM,EAAUT,eAIjD,OAAO,eAAC,GAAD,CAAOa,MAXY,oBAWciB,QAASA,EAASqC,QAAS,kBAAMxB,KAAlE,UACFuC,EAAyB,GAAI,iCAASzE,EAAUoE,cAAuBK,EAAyB,UA1C7G,GAAkC5B,aAuFlC,IAAMC,GAAqB,CACvBZ,oBACAsC,wBJzGmC,SAAC9E,EAAeH,GAAhB,MAAwC,CAAE6B,KAAMC,EAA0B3B,QAAOH,eI0GpHyC,wBAGS0C,GAAW1B,aA9CxB,SAAyB9B,EAAsB+B,GAC3C,IAAK/B,EAAO,MAAO,GADuC,IAGtDyD,EACAP,EACAH,EALsD,EAER/C,EAAMU,OAAS,GAAzDJ,EAFkD,EAElDA,aAAcC,EAFoC,EAEpCA,kBAAmBL,EAFiB,EAEjBA,KAIrCC,EAAyB,GAE7B,GAAIG,EAAc,CACd,IAAMlC,EAAM4B,EAAMT,KAAKe,GACvB,GAAIC,EAAmB,CAAC,IAAD,EACbzB,EAAWV,EAAIsF,WAAWnD,GAChCwC,EAAiB,WACjBG,EAAcpE,EAASoE,YACvBO,EAAc,UAAG3E,EAASF,YAAZ,aAAG,EAAgB,GAAGP,WAEpC8B,EAAQwD,KAAK,CAAEd,MAAM,OAAQrB,QAAS,WAClCR,IACAF,EAAqBR,EAAcmD,GAAkB,YAGzDV,EAAiB,MACjBG,EAAc9E,EAAI8E,YAElB/C,EAAQwD,KAAK,CAAEd,MAAO,cAAerB,QAAS,kBAAMnG,OAAOsB,KAAKyB,EAAIwF,kBAI5E,MAAO,CACH1D,OACA6C,iBACAG,cACAO,iBACAtD,UAEA3B,MAAO8B,EACPxB,SAAUwB,GAAgBC,EAAoBP,EAAMT,KAAKe,GAAcoD,WAAWnD,QAAqBV,KAU9D+B,GAAzBE,CAA6CgB,IC1GrE,SAASe,GAAqB1C,GAAmC,IACrD0B,EAAU1B,EAAV0B,MACR,OAAO,+BAAQA,IAWZ,SAASiB,GAAa3C,GAA2B,IAC5C4C,EAAsD5C,EAAtD4C,KAAMC,EAAgD7C,EAAhD6C,aAAcC,EAAkC9C,EAAlC8C,SAAU3C,EAAwBH,EAAxBG,UAAW4C,EAAa/C,EAAb+C,SAC3CC,EAAQH,GAAgBH,GAI9B,OAAO,qBAAKvC,UAAS,wBAAmB2C,EAAW,WAAa,GAA3C,YAAiD3C,GAAa,IAAME,QAFrE,WAAY0C,GAAUA,EAASH,EAAK1E,KAEjD,SACH,cAAC8E,EAAD,eAAWJ,M,UCTNK,GAAb,kDAGI,WAAYjD,GAAuB,IAAD,8BAC9B,cAAMA,IAHAkD,aAAe,EAES,EADxBC,iBACwB,IAexBC,qBAAuB,WAC7B,EAAKD,YAAYE,SAAS,CAAEC,MAASpJ,OAAOqJ,WAAa,KAhB3B,EAmBxBC,sBAAwB,WAC9B,EAAKL,YAAYE,SAAS,CAAEC,KAAMpJ,OAAOqJ,WAAa,KApBxB,EAuBxBE,aAAe,WACrB,IAAMC,EAAa,EAAKP,YAAYO,WACpC,EAAKpC,SAAS,CACVqC,SAAUD,EAAa,EAAKR,aAC5BU,UAAa,EAAKT,YAAYU,YAAc,EAAKV,YAAYW,YAAeJ,EAAc,EAAKR,gBAxBnG,EAAKrE,MAAQ,CAAE8E,UAAU,EAAOC,WAAW,GAHb,EAHtC,gEAUQ1D,KAAKuD,eACLvJ,OAAOkB,iBAAiB,SAAU8E,KAAKuD,gBAX/C,6CAeQvJ,OAAO6J,oBAAoB,SAAU7D,KAAKuD,gBAflD,+BAkCc,IAAD,SAC8GvD,KAAKF,MAAhHjC,EADH,EACGA,MAAOiG,EADV,EACUA,MAAO/E,EADjB,EACiBA,aAAc4D,EAD/B,EAC+BA,aAAcoB,EAD7C,EAC6CA,cAAeC,EAD5D,EAC4DA,aAAcC,EAD1E,EAC0EA,gBAAiBC,EAD3F,EAC2FA,eAD3F,EAE2BlE,KAAKrB,MAA7B8E,EAFH,EAEGA,SAAUC,EAFb,EAEaA,UAElB,OAAO,sBAAKzD,UAAU,WAAf,UACFpC,GAAS,qBAAKoC,UAAU,iBAAf,SAAiCpC,IAC1C4F,GAAY,qBAAKxD,UAAU,sBAAsBE,QAASH,KAAKkD,qBAAnD,SACT,mBAAGjD,UAAU,wBAEjB,qBAAKA,UAAU,iBAAf,SACI,sBAAKA,UAAU,uBAAuBkE,SAAUnE,KAAKuD,aAAca,IAAK,SAAC7C,GAAD,OAAQ,EAAK0B,YAAc1B,GAAnG,UACK0C,EACAH,EAAM/G,KAAI,SAACwE,EAAI1F,GACZ,OAAO,cAAC4G,GAAD,CAAsBxC,UAAW8D,EAAerB,KAAMnB,EAAIoB,aAAcA,EAAcC,SAAU7D,IAAiBwC,EAAGvD,GAAI6E,SAAUmB,GAA/GnI,MAE7BqI,OAGRR,GAAa,qBAAKzD,UAAU,uBAAuBE,QAASH,KAAKsD,sBAApD,SACV,mBAAGrD,UAAU,gCArD7B,GAA8BK,aCGjB+D,I,MAAb,4MAecC,wBAA0B,WAAO,IAAD,EACc,EAAKxE,MAAjDyE,EAD8B,EAC9BA,OAAQpH,EADsB,EACtBA,MAAOa,EADe,EACfA,GAAIyB,EADW,EACXA,qBAE3B,OAAQ8E,GACJ,IAAK,SACD,MACJ,IAAK,YACL,IAAK,aACL,IAAK,aACL,QACI,OAAO9E,EAAqBtC,EAAOa,KAzBnD,EA6BcwG,yBAA2B,WAAO,IAAD,EACmB,EAAK1E,MAAvD3C,EAD+B,EAC/BA,MAAOa,EADwB,EACxBA,IACfyG,EAFuC,EACpBA,oCACgBtH,EAAOa,IA/BlD,uEAEQ,OAAQgC,KAAKF,MAAMyE,QACf,IAAK,SACD,MAAO,SACX,IAAK,YACD,MAAO,YACX,IAAK,aACD,MAAO,WACX,IAAK,aACL,QACI,MAAO,WAXvB,+BAkCc,IAAD,EACwEvE,KAAKF,MAA1E0B,EADH,EACGA,MAAO1D,EADV,EACUA,YAAa4G,EADvB,EACuBA,SAAUC,EADjC,EACiCA,KAAMJ,EADvC,EACuCA,OAAQlG,EAD/C,EAC+CA,YAAaC,EAD5D,EAC4DA,SAEjE,OAAO,sBAAK2B,UAAS,qBAAgBsE,GAAU,IAAxC,UACH,sBAAKtE,UAAU,qBAAf,UACI,qBAAKA,UAAU,mBAAf,SACKyE,EAAW,qBAAKtE,IAAKsE,EAAUrE,IAAG,gCAAsC,mBAAGJ,UAAS,eAAqB,WAAXsE,EAAsB,OAAS,QAElI,sBAAKtE,UAAU,mBAAf,UACI,sBAAKA,UAAU,mBAAf,UACgB,cAAXsE,GAA0B,mBAAGtE,UAAS,sBAC3B,eAAXsE,GAA2BjG,GACxB,sBAAM2B,UAAU,iBAAhB,mBAAqC5B,EAArC,YAAoDC,KAExD,+BAAOkD,OAEX,qBAAKvB,UAAU,kBAAf,gBACK0E,QADL,IACKA,OADL,EACKA,EAAM5H,KAAI,SAAC6H,EAAG/I,GACX,OAAO,8BAAc+I,GAAJ/I,WAIjB,WAAX0I,GAAuB,qBAAKtE,UAAU,qBAAf,SAAoC,mBAAGA,UAAU,mBAE7E,sBAAKA,UAAU,kBAAf,UACI,qBAAKA,UAAU,mBAAf,SAAmCuB,IACnC,qBAAKvB,UAAU,yBAAf,SAAyCnC,IACzC,qBAAKmC,UAAU,WACf,sBAAKA,UAAU,oBAAf,UACgB,cAAXsE,GACG,qBAAKtE,UAAU,yBAAyBC,KAAK,SAASC,QAASH,KAAKwE,yBAApE,SACI,mBAAGvE,UAAU,iBAGrB,qBAAKA,UAAU,oBAAoBC,KAAK,SAASC,QAASH,KAAKsE,wBAA/D,SACKtE,KAAK6E,wCArE9B,GAAmCvE,cA0GnC,IAAMC,GAAqB,CACvBd,uBACAgF,mCPlH8C,SAACtH,EAAeH,GAAhB,MAAwC,CAAE6B,KAAMC,EAAqC3B,QAAOH,gBOqHjI8H,GAAYrE,aAlCzB,SAAyB9B,EAAsB+B,GAAgB,IAAD,EAItDrC,EACAC,EAFAiG,EAFe5F,EAAM7B,OAAN,UAAc6B,EAAMT,YAApB,aAAc,EAAawC,EAASvD,SAAUN,EAAmB8B,EAAM7B,KAAM6B,EAAMT,KAAKwC,EAASvD,OAAQuD,EAAS1C,IAE1F,aAAe,SAI1D,GAAIW,EAAM7B,KAAM,CACZ,IAAMiI,EAAW3H,EAAuBuB,EAAM7B,KAAM4D,EAASvD,MAAOuD,EAAS1C,IAEzE+G,IACIA,EAAS1H,YACTkH,EAAS,YAEJQ,EAAS3G,WACdmG,EAAS,aACTlG,EAAW,OAAG0G,QAAH,IAAGA,OAAH,EAAGA,EAAU1G,YACxBC,EAAQ,OAAGyG,QAAH,IAAGA,OAAH,EAAGA,EAAUzG,WAKjC,MAAO,CACHiG,SACAlG,cACAC,cAS0CiC,GAAzBE,CAA6C4D,ICrHhEW,G,kDAGF,WAAYlF,GAA4B,IAAD,8BACnC,cAAMA,IAHAgE,WAE6B,IAyB7BE,aAAe,SAAChG,GACtB,EAAK8B,MAAMmF,2BAA2BjH,IA1BH,EA6B7BkH,mBAAqB,WAC3B,EAAKpF,MAAMqF,4BAA4B,EAAKrF,MAAM/C,IAAII,QA3BtD,EAAK2G,MAAQ,EAAKsB,SAAStF,EAAM/C,IAAII,MAAO2C,EAAM/C,IAAIE,MAHnB,E,qDAMpBE,EAAeF,GAG9B,IAFA,IAAM6G,EAAQ,GACVrG,EAAWR,EACRQ,GACHqG,EAAMxB,KAAK,CACPtE,GAAIP,EAAST,WACbG,QACAqE,MAAO/D,EAASoE,YAChB/D,YAAaL,EAASK,YACtB6G,KAAMlH,EAASkH,KACfvK,IAAKqD,EAASrD,IACdsK,SAAUjH,EAASiH,WAEvBjH,EAAWA,EAASF,KAAK,GAG7B,OAAOuG,I,mCAYP,OAAO,qBAAK7D,UAAU,WAAf,SACH,qBAAKA,UAAU,gBAAgBE,QAASH,KAAKkF,mBAA7C,SACI,mBAAGjF,UAAU,mBAFgB,S,+BAO/B,IAAD,EAC+BD,KAAKF,MAAjC/C,EADH,EACGA,IAAKD,EADR,EACQA,KAAMiC,EADd,EACcA,aACbsG,EXjEP,SAAwBvI,EAAiBC,GAC5C,OAAIuI,OAAOC,KAAP,OAAYxI,QAAZ,IAAYA,OAAZ,EAAYA,EAAKsF,YAAY7E,MAAK,SAAAgI,GAAC,gBAAI,OAAC1I,QAAD,IAACA,GAAD,UAACA,EAAMY,YAAYX,EAAII,cAAvB,iBAAC,EAA8BQ,cAAc6H,UAA7C,aAAC,EAAgDnI,gBWgExEoI,CAAe3I,EAAMC,GAAO,CAACiD,KAAK0F,cAAgB,GAElE,OAAO,cAAC,GAAD,CAAU7H,MAAOd,EAAI8E,YAAaiC,MAAO9D,KAAK8D,MAAOnB,aAAcmC,GAAWf,cAAc,SAC/FC,aAAchE,KAAKgE,aAAcjF,aAAcA,EAC/CmF,eAAgBmB,Q,GAlDI/E,aA8DhC,IAAMC,GAAqB,CACvB0E,2BR/EsC,SAACjH,GAAD,MAAiB,CAAEa,KAAMC,EAA8Bd,OQgF7FmH,4BRnEuC,SAAChI,EAAeH,GAAhB,MAAyC,CAAE6B,KAAMC,EAA+B3B,QAAOH,gBQsErH2I,GAAgBlF,aAb7B,SAAyB9B,EAAsB+B,GAAgB,IAAD,IAC1D,OAAK/B,EACE,CACH7B,KAAM6B,EAAM7B,KACZiC,aAAcJ,EAAMI,eAAN,UAAsB2B,EAAS3D,WAA/B,iBAAsB,EAAcsF,kBAApC,aAAsB,EAA2B1D,EAAMI,eAAgBJ,EAAMI,kBAAeP,GAH3F,KAY+B+B,GAAzBE,CAA6CuE,ICzEnE,SAASY,GAAcC,GAQ1B,IAPA,IAGIC,EAoNiBC,EAvNfC,EAyBV,SAA6BH,GACzB,IADuC,EACjCI,EAAQJ,EAAK7D,MAAM,MAErBgE,EAA8B,GAC9BE,EAAyC,KAEzCC,EAA4B,KAC5BC,EAA8B,KAPK,cASpBH,GAToB,IASvC,2BAA0B,CAAC,IAAhBI,EAAe,QACtB,GAAKA,EAAK/L,OAAV,CAOA,GAAI+L,EAAKC,WAAW,KAAM,CACtB,IAAMC,EAAc,gBAAgBxM,KAAKsM,GAEzC,GAAIE,EAAa,CACbC,IAEAN,EAAiB,CACbO,WAAsC,IAA1BF,EAAY,GAAGzK,OAAe,SACX,IAA1ByK,EAAY,GAAGzK,OAAe,SAAW,SAC9C4K,OAAQH,EAAY,GACpBI,WAAY,IAEhBR,EAAa,KACbC,EAAe,KACf,UAIR,GAAIF,EAAgB,CAChB,IAAMU,EAAW,6BAA6B7M,KAAKsM,GAE/CO,IACIA,EAAS,IACLT,GAAcC,IACdF,EAAeS,WAAWR,GAAcC,EAAa9L,QAEzD6L,EAAaS,EAAS,GAAGC,cACzBT,EAAeQ,EAAS,IAEnBT,IACLC,GAAgBQ,EAAS,WApC7BR,IACAA,GAAgB,OAZW,8BAuDvC,OAFAI,IAEOR,EAEP,SAASQ,IACDN,IACIC,GAAcC,IACdF,EAAeS,WAAWR,GAAcC,EAAa9L,QAEzD0L,EAAS1D,KAAK4D,KAvFLY,CAAoBjB,GAE/BkB,EAAqB,GAGvBC,GAAS,EAEJnL,EAAI,EAAGA,EAAImK,EAASlK,OAAQD,IACF,WAA3BmK,EAASnK,GAAG4K,WACZX,EA+MD,CACHjI,OAFiBkI,EA9McC,EAASnK,IAgNzB8K,WAAR,MAA8BZ,EAAQW,OAC7C5I,YAAaiI,EAAQY,WAAR,YACbrH,QAASyG,EAAQY,WAAR,SAjN6B,WAA3BX,EAASnK,GAAG4K,aACfO,GAAS,GACTD,EAAOzE,KAAK2E,GAAqBjB,EAASgB,GAAQhB,EAASxJ,MAAMwK,EAAQ,EAAGnL,KAEhFmL,EAAQnL,GAQhB,OAJImL,EAAQ,GAAuB,IAAlBD,EAAOjL,SACpBiL,EAAOzE,KAAK2E,GAAqBjB,EAASgB,GAAQhB,EAASxJ,MAAMwK,EAAQ,EAAGhB,EAASlK,UAGlF,CAAEoC,KAAM6I,EAAQjB,YAsE3B,SAASmB,GAAqBP,EAAyBV,GACnD,IAAMkB,EAgDV,SAAyBnB,GACrB,IAAMmB,EAA4B,CAC9B/J,MAAO4I,EAAQW,OAAOG,cACtBhF,YAAakE,EAAQY,WAAR,MAA8BZ,EAAQW,OACnD5I,YAAaiI,EAAQY,WAAR,YACbpE,cAAewD,EAAQY,WAAR,cACfQ,cAAe,GACf9E,WAAY,IAGhB,GAAI0D,EAAQY,WAAR,SAAgC,CAChC,IADgC,EAC1BS,EAAQrB,EAAQY,WAAR,SAA+B3E,MAAM,KADnB,cAEboF,GAFa,IAEhC,2BAA0B,CAAC,IAAhBC,EAAe,QAChBvN,EAAQ,wBAAwBC,KAAKsN,GAEvCvN,EAAM,GACNoN,EAAOC,cAAe7E,KAAK,CACvBzD,KAAM,MACNyI,IAAKxN,EAAM,GAAGQ,OACdiN,gBAAiBC,SAAS1N,EAAM,MAIpCoN,EAAOC,cAAe7E,KAAK,CACvBzD,KAAM,WACN1B,MAAOrD,EAAM,GAAGQ,UAfI,+BAqBpC,OAAO4M,EA/EQO,CAAgBf,GACzBrE,EAAa2D,EAASjJ,IAAI2K,IAEhCR,EAAOjK,KAAOoF,EAAW,GAJuD,oBAMzDA,GANyD,IAMhF,2BAAmC,CAAC,IAAzB5E,EAAwB,QAC3ByJ,EAAO7E,WAAY5E,EAAST,aAC5B2K,GAAM,0BAAD,OAA2BlK,EAAST,WAApC,qBAA2DkK,EAAO/J,MAAlE,MAGT+J,EAAO7E,WAAY5E,EAAST,YAAcS,GAXkC,kDAczD4E,GAdyD,IAchF,2BAAmC,CAAC,IAAD,EAAxB5E,EAAwB,sBACdA,EAASmK,SADK,IAC/B,2BAAmC,CAAC,IAAzB5J,EAAwB,QAC1BkJ,EAAO7E,WAAYrE,IAAK2J,GAAM,wBAAD,OAAyB3J,EAAzB,qBAAwCkJ,EAAO/J,MAA/C,MAClCM,EAASF,KAAK+E,KAAK4E,EAAO7E,WAAYrE,KAHX,gCAd6C,8BAqBhF,IAAM6J,EAAwC,IAY9C,SAASC,EAAuB7K,GAA8D,IAA3C8K,EAA0C,uDAAJ,GACjFA,EAAQ9K,EAAKD,aAAa2K,GAAM,gBAAD,OAAiBT,EAAO/J,MAAxB,eACnC4K,EAAQ9K,EAAKD,aAAc,EAC3B6K,EAAU5K,EAAKD,aAAc,EAEzBC,EAAKM,KAAKzB,OAAS,GACnB6L,GAAM,qCAN+E,oBAStE1K,EAAKM,MATiE,IASzF,2BAA8B,CAAC,IAApBA,EAAmB,QAC1BuK,EAAuBvK,EAAD,eAAWwK,KAVoD,+BAV7FD,CAAuBZ,EAAOjK,MAvBkD,oBAyBzDoF,GAzByD,IAyBhF,2BAAmC,CAAC,IAAzB5E,EAAwB,QAC1BoK,EAAUpK,EAAST,aACpBgL,QAAQC,KAAR,yCAA+CxK,EAAST,WAAxD,qBAA+EkK,EAAO/J,MAAtF,OA3BwE,8BA+BhF,OAAO+J,EAoDX,SAASQ,GAAgB3B,GACrB,IAAMmB,EAA+B,CACjClK,WAAY+I,EAAQW,OAAOG,cAC3BhF,YAAakE,EAAQY,WAAR,MAA8BZ,EAAQW,OACnD5I,YAAaiI,EAAQY,WAAR,YACbvM,IAAK2L,EAAQY,WAAR,IACLjC,SAAUqB,EAAQY,WAAR,SACVhC,KAAMuD,GAAUnC,EAAQY,WAAR,MAChBpJ,KAAM,GACNqK,QAASM,GAAUnC,EAAQY,WAAR,OAGvB,GAAIZ,EAAQY,WAAR,KAA4B,CAC5B,IAAM9H,EAAOkH,EAAQY,WAAR,KAA2BE,cACxC,OAAQhI,GACJ,IAAK,WACDqI,EAAOrI,KAAOA,GAK1B,GAAIkH,EAAQY,WAAR,OAA8B,CAC9B,IAAMwB,EAASpC,EAAQY,WAAR,OAA6BE,cAC5C,OAAQsB,GACJ,IAAK,KACL,IAAK,SACL,IAAK,KACDjB,EAAOiB,OAASA,EAChB,MACJ,QACIjB,EAAOiB,OAAS,UAO5B,OAHKjB,EAAO9M,KAAKuN,GAAM,aAAD,OAAcT,EAAOlK,WAArB,iCACjBkK,EAAOrI,MAAM8I,GAAM,aAAD,OAAcT,EAAOlK,WAArB,kCAEhBkK,EAWX,SAASgB,GAAUE,GAA0C,IAA5BC,EAA2B,wDACxD,IAAKD,EAAM,MAAO,GAClB,IAAMhB,EAAQgB,EAAKpG,MAAM,KAAKjF,KAAI,SAAAuL,GAAC,OAAIA,EAAEhO,OAAOuM,iBAAe0B,QAAO,SAAAD,GAAC,QAAMA,KAE7E,IAAKD,EAAmB,CACpB,IAAItL,EAAiC,GAErC,OADAqK,EAAMoB,SAAQ,SAAAF,GAAC,OAAIvL,EAAIuL,GAAKA,KACrBhD,OAAOC,KAAKxI,GAEvB,OAAOqK,EAGX,SAASO,GAAMc,GACX,MAAMA,E,UCjPNC,GACAC,GCJSC,GAAb,WAGI,WACYlO,EACAmO,EACAC,EACAC,GAAoC,yBAHpCrO,OAGmC,KAFnCmO,UAEmC,KADnCC,iBACmC,KAAnCC,uBAAmC,KANvCC,SAMuC,EAPnD,+DAWQ,IAAKhJ,KAAKgJ,IACN,MAAM,IAAIC,MAAM,4DAZ5B,mCAgByB9N,EAAY+N,EAAYnO,GACzCiN,QAAQL,MAAM,IAAIsB,MAAJ,UAAajJ,KAAKtF,KAAlB,iCAA+CwO,EAA/C,aAAsD/N,EAAIsN,WACxE1N,EAAOI,GAEU,uBAAbA,EAAIT,OAEJyO,IAAIC,IAAJ,6BACAD,IAAIE,UAAU,8BACVrJ,KAAK+I,sBACL/I,KAAK+I,0BAzBrB,qCA6B2BrO,GAA4E,IAA9D4O,EAA6D,uDAA5B,WAClEtJ,KAAKuJ,mBACL,IAAMC,EAAcxJ,KAAKgJ,IAAIQ,YAAY,CAAC9O,GAAO4O,GACjD,OAAOE,EAAYC,YAAY/O,KAhCvC,kCA4CuC,IAAD,OAC9B,OAAO,IAAIG,SAAQ,SAACC,EAASC,GACzB,IACMC,GADyBhB,OAAO0P,WAAc1P,OAAe2P,cAAiB3P,OAAe4P,iBAAoB5P,OAAe6P,aAC3GvO,KAAK,EAAKZ,KAAM,EAAKmO,SAChD7N,EAAQ8O,UAAY,WAChB,EAAKd,IAAMhO,EAAQkM,OACnBpM,KAEJE,EAAQ+O,QAAU,kBAAM,EAAKC,aAAahP,EAAQ2M,MAAQ,OAAQ5M,IAClEC,EAAQiP,gBAAkB,SAACC,GAAD,OAAQ,EAAKpB,gBAAkB,EAAKA,eAAeoB,EAAIlP,SArD7F,+BAyDuBmP,EAAmBnM,GAAyB,IAAD,OAC1D,OAAO,IAAInD,SAAQ,SAACC,EAASC,GACzB,IACMC,EADQ,EAAKoP,eAAeD,GACZE,IAAIrM,GAC1BhD,EAAQ8O,UAAY,kBAAMhP,EAAQE,EAAQkM,SAC1ClM,EAAQ+O,QAAU,kBAAM,EAAKC,aAAahP,EAAQ2M,MAAQ,MAAO5M,SA9D7E,kCAkE0BoP,GAAkC,IAAD,OACnD,OAAO,IAAItP,SAAQ,SAACC,EAASC,GACzB,IACMuP,EADQ,EAAKF,eAAeD,GACbI,aACfC,EAAY,GAElBF,EAAOR,UAAY,WACXQ,EAAOpD,QACPsD,EAAKlI,KAAKgI,EAAOpD,OAAOuD,OACxBH,EAAOpD,OAAOwD,YAEd5P,EAAQ0P,IAGhBF,EAAOP,QAAU,kBAAM,EAAKC,aAAaM,EAAO3C,MAAQ,SAAU5M,SAhF9E,+BAoFoBoP,EAAmBK,GAA2B,IAAD,OACzD,OAAO,IAAI3P,SAAQ,SAACC,EAASC,GACzB,IACIC,EADEuE,EAAQ,EAAK6K,eAAeD,EAAW,cAIzCnP,EADmB,qBAAZwP,EAAKxM,IAAkC,OAAZwM,EAAKxM,GAC7BuB,EAAMoL,IAAIH,GAEVjL,EAAMqL,IAAIJ,IAGhBV,UAAY,kBAAMhP,KAC1BE,EAAQ+O,QAAU,kBAAM,EAAKC,aAAahP,EAAQ2M,MAAQ,MAAO5M,SAhG7E,kCAoGuBoP,EAAmBnM,GAA4B,IAAD,OAC7D,OAAO,IAAInD,SAAQ,SAACC,EAASC,GACzB,IACMC,EADQ,EAAKoP,eAAeD,EAAW,aACvBU,OAAO7M,GAC7BhD,EAAQ8O,UAAY,kBAAMhP,KAC1BE,EAAQ+O,QAAU,kBAAM,EAAKC,aAAahP,EAAQ2M,MAAQ,SAAU5M,SAzGhF,qCA6G0BoP,GAAmC,IAAD,OACpD,OAAO,IAAItP,SAAQ,SAACC,EAASC,GACzB,IACMC,EADQ,EAAKoP,eAAeD,EAAW,aACvBW,QACtB9P,EAAQ8O,UAAY,kBAAMhP,KAC1BE,EAAQ+O,QAAU,kBAAM,EAAKC,aAAahP,EAAQ2M,MAAQ,YAAa5M,UAlHnF,2CAmC+BL,GACvB,OAAO,IAAIG,SAAQ,SAACC,EAASC,GACzB,IACMC,GADyBhB,OAAO0P,WAAc1P,OAAe2P,cAAiB3P,OAAe4P,iBAAoB5P,OAAe6P,aAC3GkB,eAAerQ,GAC1CM,EAAQ8O,UAAY,kBAAMhP,KAC1BE,EAAQ+O,QAAU,kBAAMhP,EAAOC,EAAQ2M,eAxCnD,KDMA,SAASqD,KAML,OALKrC,KACDD,GAAY,IAAIuC,GAChBtC,GAAmBD,GAAUwC,YACxBC,MAAK,SAAAC,GAAE,OAAI1C,OAEbC,GAGJ,SAAe0C,GAAtB,mC,8CAAO,WAA+BjN,GAA/B,eAAA/D,EAAA,sEACc2Q,KADd,cACGM,EADH,yBAEIA,EAAGD,gBAAgBjN,IAFvB,4C,sBAKA,SAAemN,GAAtB,mC,8CAAO,WAAgCC,GAAhC,eAAAnR,EAAA,sEACc2Q,KADd,cACGM,EADH,gBAEGA,EAAGC,iBAAiBC,GAFvB,4C,sBAKA,SAAeC,KAAtB,gC,8CAAO,4BAAApR,EAAA,sEACc2Q,KADd,cACGM,EADH,yBAGIA,EAAGG,qBAHP,4C,sBAMA,SAAeC,GAAtB,mC,8CAAO,WAAkC5O,GAAlC,eAAAzC,EAAA,0DAECyC,EAAKiB,QAFN,iEAIciN,KAJd,cAIGM,EAJH,gBAKGA,EAAGI,mBAAmB5O,GALzB,4C,0BASDmO,G,WAUF,aAAe,yBAFfU,QAEc,EACV3L,KAAK2L,GAAK,IAAI/C,GAAWqC,EAAmBW,aAAcX,EAAmBpC,SAAS,SAACqB,EAAIhD,GACvF,IAAMyE,EAAKzE,EAAOA,OAElByE,EAAGE,kBAAkBZ,EAAmBa,aAAc,CAAEC,QAASd,EAAmBe,aACpFL,EAAGE,kBAAkBZ,EAAmBgB,UAAW,CAAEF,QAASd,EAAmBiB,a,wDAKrF,OAAOlM,KAAK2L,GAAGQ,c,sCAIH/N,GACZ,OAAO4B,KAAK2L,GAAGS,SAASnB,EAAmBa,aAAc1N,GACpD+M,MAAK,SAAAkB,GAAK,OAAKA,EAAcb,a,uCAGrBA,GACb,OAAOxL,KAAK2L,GAAGW,SACXrB,EAAmBa,aACnB,CACI9N,GAAIwN,EAAQ9E,OAAQ1I,GACpBwN,c,0CAMR,OAAOxL,KAAK2L,GAAGS,SAASnB,EAAmBgB,UAAW,cACjDd,MAAK,SAAAkB,GAAK,cAAKA,QAAL,IAAKA,OAAL,EAAKA,EAAevP,U,yCAGpBA,GACf,OAAOkD,KAAK2L,GAAGW,SACXrB,EAAmBgB,UACnB,CACIjO,GAAI,aACJlB,a,KAjDVmO,GACKpC,QAAU,EADfoC,GAEKW,aAAe,kBAFpBX,GAGKa,aAAe,WAHpBb,GAIKe,WAAa,KAJlBf,GAKKgB,UAAY,QALjBhB,GAMKiB,QAAU,K,UErBfK,GAAoB9P,IAAY,mCAAsCzC,OAAeS,gBAAgB+R,SAASC,SAE9GC,G,kDAOF,WAAY5M,GAA4B,IAAD,8BACnC,cAAMA,IAPAsE,SAM6B,IAL7BuI,aAAsB,GAKO,EAJ7BC,kBAAmB,EAIU,EAH7BC,OAAiB,EAGY,EAF7BC,gBAA0C,GAEb,EAuC7BC,eAAiB,SAAC3I,GACpBA,GAAOA,EAAI4I,gBACXhT,OAAOkB,iBAAiB,UAAW,EAAK+R,mBACxC,EAAK7I,IAAMA,EAEX,EAAKA,IAAIlJ,iBAAiB,QAAQ,WAI1B,EAAKyD,MAAMuO,WAAW,EAAKpN,MAAMqN,6BAhDV,EAqD7BF,kBAAoB,SAACG,GAC3B,IAAM5C,EAAO4C,EAAM5C,KAEnB,GAA8B,UAAzBA,EAAK3L,KAAV,CAKA,GAAkB,cAAd2L,EAAK3L,MAAwB2L,EAAKxM,IAAM,EAAK8O,gBAAgBtC,EAAKxM,IAGlE,OAFA,EAAKqP,mBAAmB,EAAKP,gBAAgBtC,EAAKxM,IAAKoP,EAAM5C,kBACtD,EAAKsC,gBAAgBtC,EAAKxM,IAIrC,OAAQwM,EAAK5L,QACT,IAAK,QACD,EAAK0O,sBAAsB9C,GAC3B,MACJ,IAAK,gBACD,EAAK+C,2BAA2B/C,GAChC,MACJ,IAAK,gBACD,EAAKgD,gCAAgChD,GACrC,MACJ,QACIxC,QAAQoB,IAAIqE,KAAKC,UAAUlD,EAAM,KAAM,UArB3C,EAAKmD,kCAvDT,EAAKhP,MAAQ,CACTiP,QAAQ,EACRV,WAAW,GAJoB,E,iEAS/BlN,KAAKF,MAAM+N,MACX7N,KAAK8N,YAAY,CACbjP,KAAM,YACND,OAAQ,cACRmP,UAAU,IACiB,K,6CAKnC/T,OAAO6J,oBAAoB,UAAW7D,KAAKiN,qB,+BAGrC,IAAD,EACwBjN,KAAKF,MAA1B1F,EADH,EACGA,IAAKyD,EADR,EACQA,MAAOgQ,EADf,EACeA,KADf,EAEyB7N,KAAKrB,MAA3BiP,EAFH,EAEGA,OAAQV,EAFX,EAEWA,UAEVc,EAAcH,EAAO,YAAc,aAGzC,OAAO,sBAAK5N,UAAU,uBAAf,UACH,sBAAKA,UAAS,gCAA4B2N,IAAWC,EAAQ,SAAW,IAAxE,UACI,qBAAKzN,IAAKzD,EAAY,mBAAoB0D,IAJjC,kBAKT,qBAAKJ,UAAU,6BAAf,SAA6C+N,OAEjD,wBAAQ/N,UAAU,iBAAiBG,IAAK8M,EAAY,cAAgB9S,EAAKyD,MAAOA,EAAOuG,IAAKpE,KAAK+M,sB,yCAgD5EkB,EAAeF,GAA6C,IAC7EF,EAAS7N,KAAKF,MAAd+N,KAEgB,gBAApBI,EAASrP,QAA4BiP,IACjC7N,KAAK4M,kBACL5M,KAAK4M,kBAAmB,EAGxB5M,KAAK8N,YAAY,CACbjP,KAAM,YACND,OAAQ,gBACmB,IAG/BoB,KAAKoB,SAAS,CACV8L,WAAW,O,kCAMLzE,GAAiC,IAAD,OAAlBsF,EAAkB,wDAC5CG,EAAkB,SAACzF,GACjBsF,IACAtF,EAAQsF,UAAW,EACnBtF,EAAQzK,GAAK,EAAK6O,SAAW,GAC7B,EAAKC,gBAAgBrE,EAAQzK,IAAMyK,GAEvC,EAAKrE,IAAK4I,cAAemB,YAAY1F,EAAS,MAGlD,GAAIzI,KAAKoE,IACL,GAAKpE,KAAKoE,IAAI4I,cAGT,CACD,KAAOhN,KAAK2M,aAAa7Q,QACrBoS,EAAgBlO,KAAK2M,aAAayB,SAEtCF,EAAgBzF,QANhBzI,KAAK2M,aAAarK,KAAKmG,K,iDAWEzN,GACjCgF,KAAK8N,YAAL,2BACO9S,GADP,IAEIqT,SAAS,EACTC,SAAU,Q,+FAI8BtT,G,sFACiBgF,KAAKF,MAA1DyO,E,EAAAA,+BAAgCC,E,EAAAA,iBAElChD,E,2BACCxQ,EAAQwQ,S,IACX9E,OAAO,2BACA1L,EAAQwQ,QAAQ9E,QADjB,IAEF1I,GAAIwQ,GAAoBxT,EAAQwQ,QAAQ9E,OAAQ1I,O,SAIlDuN,GAAiBC,G,OAEnBA,EAAQ9E,OAAQ+H,SAChBF,EACI/C,EAAQ9E,OAAO1I,IACdwN,EAAQ9E,OAAO+H,SAASC,cAAgB,GAAK,EAC9ClD,EAAQ9E,OAAO+H,SAASE,iBAAkB7S,QAGzC0P,EAAQ9E,OAAQkI,mBACrBL,EACI/C,EAAQ9E,OAAO1I,GACfwN,EAAQ9E,OAAOkI,kBAAkBC,MACjCrD,EAAQ9E,OAAOkI,kBAAkBC,O,kRAMrC7O,KAAKF,MAAM0O,iB,gCACWnD,GAAgBrL,KAAKF,MAAM0O,kB,OAA3ChD,E,OACNxL,KAAK8N,YAAY,CACbjP,KAAM,YACND,OAAQ,gBACR4M,QAASA,I,sBAIbxL,KAAK8N,YAAY,CACbjP,KAAM,YACND,OAAQ,gBACRhC,KAAMoD,KAAKF,MAAMgP,aACjBC,aAAc,a,kJAKM3B,GAC5B,OAAQA,EAAM4B,MAEV,IAAK,aACDhP,KAAKiP,iBACL,MACJ,IAAK,oBACDjP,KAAKkP,wB,uCAOblP,KAAKoB,SAAS,CACVwM,QAAQ,M,2CAKZ5N,KAAK4M,kBAAmB,EACxB5M,KAAKF,MAAMJ,mC,GAlNaY,aAiPhC,IAAMC,GAAqB,CACvBgO,+BZ/Q0C,SAACvQ,EAAYK,EAAqBC,GAAlC,MAAwD,CAAEO,KAAMC,EAAmCd,KAAIK,cAAaC,aYgR9J6O,sBZ9QiC,eAAC/N,EAAD,8DAAuB,CAAEP,KAAMC,EAAwBM,aY+QxFM,gCAGSyP,GAAgB1O,aAjC7B,SAAyB9B,EAAsB+B,GAAgB,IAAD,EAC1D,IAAK/B,IAAUA,EAAMK,WAAY,MAAO,GADkB,IAMtDnB,EANsD,EAGqBc,EAAMK,WAA7EE,EAHkD,EAGlDA,kBAAmBD,EAH+B,EAG/BA,aAAcE,EAHiB,EAGjBA,gBAAwBiQ,EAHP,EAGAzQ,MAEtDvE,EAAMmS,GAGJ9O,EAAWkB,EAAMT,KAAKe,GAAcoD,WAAWnD,GAQrD,MAP+C,MAA3CqN,GAAU8C,OAAO9C,GAAUzQ,OAAS,IAAeW,MACnDrC,EAAMmS,GAAU+C,OAAO,EAAG/C,GAAUzQ,OAAS,IAGjD1B,GAAG,4BACHyD,EAAQJ,EAASoE,YAEV,CACHzH,MACA0U,aAAcrR,EAASrD,IACvByD,QACAb,WAAYkC,EACZsP,iBAAkBrP,EAClBoQ,UAAS,UAAEnS,EAAuBuB,EAAM7B,KAAMmC,EAAcC,UAAnD,aAAE,EAAqE7B,YAChFwQ,KAAoB,WAAduB,KAUwC7O,GAAzBE,CAA6CiM,ICpPpE8C,G,kDAKF,WAAY1P,GAAa,IAAD,8BACpB,cAAMA,IALA2P,WAAwC,GAI1B,EAHdC,+BAGc,IAFdC,gBAEc,IAOdC,iBAAmB,SAACvU,GAC1B,IAAI1B,EAAOD,IACX,EAAKmW,uBAAuBlW,EAAKC,IAAuBD,EAAKE,KAE7DwB,EAAE2F,kBACF3F,EAAE4F,kBAZkB,EAsId6O,cAtIc,sBAsIE,8BAAAzV,EAAA,2DACLkF,EAAMwQ,YAAfjT,EADc,EACdA,QAEK,EAAK6S,YAAgB,EAAKA,YAAc7S,EAAKkB,KAAO,EAAK2R,WAAW3R,GAH3D,gCAIZ0N,GAAmB5O,GAJP,OAKlB,EAAK6S,WAAa7S,EALA,2CApItB,EAAK6B,MAAQ,GAEb3E,OAAOkB,iBAAiB,aAAc,EAAK0U,kBAJvB,E,4GAeezV,EAAwBC,G,gHAC1CF,EAAiBC,EAAQC,G,OAI1C,GAJM4V,E,OAKF,IAAK,EAC0BpK,GAAcoK,GAAjC9R,EADR,EACQA,KAAM4H,EADd,EACcA,UACN,OAAJ5H,QAAI,IAAJA,OAAA,EAAAA,EAAMpC,QAAS,IACfmU,EAAa/R,EACb8B,KAAKF,MAAMoQ,yBACXhS,EAAKsK,SAAQ,SAAAzL,GACT,EAAK+C,MAAMqQ,oBAAoBpT,OAGnC+I,IACQjI,EAAgCiI,EAAhCjI,MAAOC,EAAyBgI,EAAzBhI,YAAawB,EAAYwG,EAAZxG,QAC5BU,KAAKF,MAAMsQ,qBAAqBvS,GAC5BC,GAAakC,KAAKF,MAAMuQ,2BAA2BvS,GACnDwB,GAASU,KAAKF,MAAMuQ,2BAA2B/Q,IAEvDU,KAAKoB,SAAS,CAAEuG,WAAOnJ,IACzB,SACQ8R,EAAW,uEACjBtI,QAAQL,MAAM2I,GACdtQ,KAAKoB,SAAS,CAAEuG,MAAO2I,I,gBAId7E,K,QAAb3O,E,UAGAA,EAAO,CACHkB,GAAI3B,IACJ4B,cAAe,GACfP,YAAa,KAIrBsC,KAAKuQ,gBAAgBzT,EAAMmT,GAC3BjQ,KAAK2P,WAAa7S,EAClBkD,KAAKF,MAAM0Q,gBAAgB1T,G,oJAI3BkD,KAAK0P,0BAA4BnQ,EAAMkR,UAAUzQ,KAAK8P,eACtD9P,KAAKyP,WjB1FN,WACH,IAAMiB,EAAiC,GACjCC,EAAQ3W,OAAOC,SAAS2W,OAa9B,OAXID,GACe,IAAIE,gBAAgBF,GAE5BnI,SAAQ,SAACiC,EAAOqG,GACS,SAAxBrG,EAAM5D,eAAsC,MAAV4D,IAClCA,EAAQ,QAEZiG,EAAII,GAAOrG,KAIZiG,EiB2EeK,GAClB,IAAIpX,EAAOD,IACXsG,KAAK6P,uBAAuBlW,EAAKC,IAAuBD,EAAKE,O,6CAI7DG,OAAO6J,oBAAoB,aAAc7D,KAAK4P,kBAC1C5P,KAAK0P,2BACL1P,KAAK0P,8B,+BAIH,IAAD,EAC+B1P,KAAKF,MAAjCkR,EADH,EACGA,UAAWjR,EADd,EACcA,aACX4H,EAAU3H,KAAKrB,MAAfgJ,MACFzJ,EAAOoH,OAAOC,KAAKyL,GAAWjU,KAAI,SAACiB,GAAD,OAAgBgT,EAAUhT,MAClE,OAAQ,sBAAKiC,UAAU,gBAAf,UACA,cAACO,GAAD,IACET,EAAe,cAACoP,GAAD,IAAoB,gCACjC,cAACtO,GAAD,CAAQhD,MAAM,mBAAmB+C,KAAK,MAAM9C,YAAY,gFACxD,qBAAKmC,UAAU,sBAAf,SACM0H,EACI,qBAAK1H,UAAU,kBAAf,SAAkC0H,IADjC,OAEDzJ,QAFC,IAEDA,OAFC,EAEDA,EAAMnB,KAAI,SAACwE,EAAI1F,GACb,OAAO,cAAC8J,GAAD,CAAe5I,IAAKwE,GAAS1F,WAKpD,cAACsG,GAAD,S,sCAIcrF,EAAiBoB,GAOvC,GANwC,SAApC8B,KAAKyP,WAAL,eACA3S,EAAKiB,SAAU,EACfjB,EAAKY,YAAc,GACnBZ,EAAKmB,cAAgB,IAGiB,SAAtC+B,KAAKyP,WAAL,iBACA3S,EAAKiB,SAAU,EAEXG,GAAM,CAAC,IAAD,gBACYA,GADZ,IACN,2BAAwB,CAAC,IAAdnB,EAAa,QACpBD,EAAKY,YAAYX,EAAII,OAAS,CAC1BA,MAAOJ,EAAII,MACXQ,cAAe,IAGnB,cAAkB2H,OAAOC,KAAKxI,EAAIsF,YAAlC,eAA+C,CAAC,IAAD,EAApCyO,EAAG,KACJrT,EAAWV,EAAIsF,WAAWyO,GAWhC,GAVKhU,EAAKY,YAAYX,EAAII,OAAOQ,cAAcF,EAAST,YAOpDF,EAAKY,YAAYX,EAAII,OAAOQ,cAAcF,EAAST,YAAYK,aAAc,EAN7EP,EAAKY,YAAYX,EAAII,OAAOQ,cAAcF,EAAST,YAAc,CAC7DA,WAAYS,EAAST,WACrBK,aAAa,GAOrB,UAAII,EAASkH,YAAb,aAAI,EAAe7I,OAAQ,CAAC,IAAD,gBACL2B,EAASkH,MADJ,IACvB,2BAAiC,CAAC,IAAvB2C,EAAsB,QAC7BxK,EAAKmB,cAAcqJ,MAFA,kCAnB7B,oC,GA7GAhH,IAAM2Q,WA6J5B,IAAM1Q,GAAqB,CACvB4P,oBbjM+B,SAACpT,GAAD,MAAoB,CAAE8B,KAAMC,EAAuB/B,QakMlFmT,uBbjMkC,iBAAO,CAAErR,KAAMC,IakMjDsR,qBbxLgC,SAACvS,GAAD,MAAoB,CAAEgB,KAAMC,EAAwBjB,UayLpFwS,2BbxLsC,SAACvS,GAAD,MAA0B,CAAEe,KAAMC,EAA8BhB,gBayLtGoT,uBbxLkC,SAAC5R,GAAD,MAAsB,CAAET,KAAMC,EAA2BQ,YayL3FkR,gBb7L2B,SAAC1T,GAAD,MAAsB,CAAE+B,KAAMC,EAAkBhC,UakMhEqU,GAFH1Q,aAjBZ,SAAyB9B,EAAsB+B,GAC3C,OAAK/B,EACE,CACHqS,UAAWrS,EAAMT,KACjB6B,eAAgBpB,EAAMK,YAHP,KAgBcuB,GAAzBE,CAA6C+O,ICrMzD4B,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,CAAU/R,MAAOA,EAAjB,SACI,cAAC,GAAD,QAIRgS,SAASC,eAAe,W","file":"static/js/main.85739e79.chunk.js","sourcesContent":["export const ADD_SKILL_MAP = \"ADD_SKILL_MAP\";\nexport const CLEAR_SKILL_MAPS = \"CLEAR_SKILL_MAPS\";\nexport const CHANGE_SELECTED_ITEM = \"CHANGE_SELECTED_ITEM\";\nexport const SET_HEADERID_FOR_ACTIVITY = \"SET_HEADERID_FOR_ACTIVITY\";\nexport const OPEN_ACTIVITY = \"OPEN_ACTIVITY\";\nexport const CLOSE_ACTIVITY = \"CLOSE_ACTIVITY\";\nexport const SAVE_AND_CLOSE_ACTIVITY = \"SAVE_AND_CLOSE_ACTIVITY\";\nexport const RESTART_ACTIVITY = \"RESTART_ACTIVITY\";\n\nexport const SET_USER = \"SET_USER\";\n\nexport const SET_PAGE_TITLE = \"SET_PAGE_TITLE\";\nexport const SET_PAGE_DESCRIPTION = \"SET_PAGE_DESCRIPTION\";\nexport const SET_PAGE_INFO_URL = \"SET_PAGE_INFO_URL\";\n\nexport const SHOW_COMPLETION_MODAL = \"SHOW_COMPLETION_MODAL\";\nexport const SHOW_RESTART_ACTIVITY_MODAL = \"SHOW_RESTART_ACTIVITY_MODAL\";\nexport const HIDE_MODAL = \"HIDE_MODAL\";\n","const apiRoot = \"https://www.makecode.com/api/md\";\nexport type MarkdownSource = \"docs\" | \"github\";\n\nexport function parseHash() {\n    let hash = { cmd: '', arg: '' };\n    // TODO shakao remove testing url later\n    let match = /^#(\\w+)(:([:./\\-+=\\w]+))?/.exec(window.location.hash || \"#github:shakao-test/skill-map-test/main/test\")\n    if (match) {\n        hash = { cmd: match[1], arg: match[3] || '' };\n    }\n    return hash;\n}\n\nexport function parseQuery() {\n    const out: {[index: string]: string} = {};\n    const query = window.location.search;\n\n    if (query) {\n        const params = new URLSearchParams(query);\n\n        params.forEach((value, key) => {\n            if (value.toLowerCase() === \"true\" || value === \"1\") {\n                value = \"true\";\n            }\n            out[key] = value;\n        });\n    }\n\n    return out;\n}\n\nexport async function getMarkdownAsync(source: MarkdownSource, url: string) {\n    if (!source || !url) return \"\";\n    switch (source) {\n        case \"docs\":\n            url = url.trim().replace(/^[\\\\/]/i, \"\").replace(/\\.md$/i, \"\");\n            const target = (window as any).pxtTargetBundle?.name || \"arcade\";\n            return await httpGetAsync(`${apiRoot}/${target}/${url}`);\n        case \"github\":\n            /**\n             * FORMATS:\n             * /user-name/repo-name/branch-name/file-name\n             * https://github.com/user-name/repo-name/blob/branch-name/file-name.md\n             * https://raw.githubusercontent.com/user-name/repo-name/branch-name/file-name.md\n             *\n             * Leading slash and '.md' are optional but allowed\n             */\n            let rawUrl = url.trim();\n            let match = /^(?:(?:https?:\\/\\/)?[^/]*?github\\.com)?(?:\\/)?([^/.]+)\\/([^/]+)\\/(?:blob\\/)?([^/]+)\\/([^/.]+?)(?:\\.md)?$/gi.exec(rawUrl);\n            if (match) {\n                rawUrl = `https://raw.githubusercontent.com/${match[1]}/${match[2]}/${match[3]}/${match[4]}.md`\n            }\n\n            return await httpGetAsync(rawUrl);\n        default:\n            return await httpGetAsync(url);\n    }\n}\n\nexport function httpGetAsync(url: string): Promise<string> {\n    return new Promise<string>((resolve, reject) => {\n        const request = new XMLHttpRequest();\n        request.addEventListener(\"error\", err => {\n            reject(err);\n        });\n\n        request.addEventListener(\"load\", () => {\n            try {\n                resolve(request.responseText);\n            }\n            catch (e) {\n                reject(e);\n            }\n        });\n        request.open(\"GET\", url);\n        request.send();\n    })\n}\n\nfunction getRandomBuf(buf: Uint8Array) {\n    if (window.crypto)\n        window.crypto.getRandomValues(buf);\n    else {\n        for (let i = 0; i < buf.length; ++i)\n            buf[i] = Math.floor(Math.random() * 255);\n    }\n}\n\nfunction randomUint32() {\n    let buf = new Uint8Array(4)\n    getRandomBuf(buf)\n    return new Uint32Array(buf.buffer)[0]\n}\n\nexport function guidGen() {\n    function f() { return (randomUint32() | 0x10000).toString(16).slice(-4); }\n    return f() + f() + \"-\" + f() + \"-4\" + f().slice(-3) + \"-\" + f() + \"-\" + f() + f() + f();\n}\n\nexport function isLocal() {\n    return window.location.hostname === \"localhost\";\n}\n\nexport function resolvePath(path: string) {\n    return `${isLocal() ? \"\" : \"/static/skillmap\"}/${path.replace(/^\\//, \"\")}`\n}","\nexport function isMapCompleted(user: UserState, map: SkillMap) {\n    if (Object.keys(map?.activities).some(k => !user?.mapProgress[map.mapId]?.activityState[k]?.isCompleted)) return false;\n    return true;\n}\n\nexport function isActivityCompleted(user: UserState, mapId: string, activityId: string) {\n    return !!(lookupActivityProgress(user, mapId, activityId)?.isCompleted);\n}\n\nexport function isMapUnlocked(user: UserState, map: SkillMap) {\n    for (const pre of map.prerequisites) {\n        if (pre.type === \"tag\") {\n            const numCompleted = user.completedTags[pre.tag];\n            if (numCompleted === undefined || numCompleted < pre.numberCompleted) return false;\n        }\n        else if (pre.type === \"activity\") {\n            if (user.mapProgress[pre.mapId]) return false;\n        }\n    }\n\n    return true;\n}\n\nexport function isActivityUnlocked(user: UserState, map: SkillMap, activityId: string) {\n    if (map.root.activityId === activityId) return true;\n\n    return checkRecursive(map.root);\n\n    function checkRecursive(root: MapActivity) {\n        if (isActivityCompleted(user, map.mapId, root.activityId)) {\n            if (root.next.some(activity => activity.activityId === activityId)) {\n                return true;\n            }\n\n            for (const next of root.next) {\n                if (checkRecursive(next)) return true;\n            }\n        }\n\n        return false;\n    }\n}\n\nexport function lookupActivityProgress(user: UserState, mapId: string, activityId: string) {\n    return user.mapProgress[mapId]?.activityState[activityId]\n}\n","import * as actions from '../actions/types'\nimport { guidGen } from '../lib/browserUtils';\nimport { lookupActivityProgress } from '../lib/skillMapUtils';\n\nexport interface SkillMapState {\n    title: string;\n    description: string;\n    infoUrl?: string;\n    user: UserState;\n    maps: { [key: string]: SkillMap };\n    selectedItem?: string;\n\n    editorView?: EditorViewState;\n    modal?: ModalState;\n}\n\nexport interface EditorViewState {\n    currentHeaderId?: string;\n    currentMapId: string;\n    currentActivityId: string;\n    state: \"active\" | \"saving\";\n}\n\nexport type ModalType = \"restart-warning\" | \"completion\";\n\ninterface ModalState {\n    type: ModalType;\n    currentMapId?: string;\n    currentActivityId?: string;\n}\n\nconst initialState: SkillMapState = {\n    title: \"Game Maker Guide\",\n    description: \"Level up your game making skills by completing the tutorials in this guide.\",\n    user: {\n        isDebug: true,\n        id: guidGen(),\n        mapProgress: {},\n        completedTags: {}\n    },\n    maps: {}\n}\n\nconst topReducer = (state: SkillMapState = initialState, action: any): SkillMapState => {\n    switch (action.type) {\n        case actions.ADD_SKILL_MAP:\n            return {\n                ...state,\n                user: {\n                    ...state.user,\n                    mapProgress: {\n                        ...state.user.mapProgress,\n                        [action.map.mapId]: { mapId: action.map.mapId, activityState: { } }\n                    }\n                },\n                maps: {\n                    ...state.maps,\n                    [action.map.mapId]: action.map\n                }\n            }\n        case actions.CLEAR_SKILL_MAPS:\n            return {\n                ...state,\n                maps: {}\n            };\n        case actions.CHANGE_SELECTED_ITEM:\n            return {\n                ...state,\n                selectedItem: action.id\n            };\n        case actions.OPEN_ACTIVITY:\n            return {\n                ...state,\n                editorView: {\n                    currentMapId: action.mapId,\n                    currentActivityId: action.activityId,\n                    state: \"active\",\n                    currentHeaderId: lookupActivityProgress(\n                        state.user,\n                        action.mapId,\n                        action.activityId,\n                    )?.headerId\n\n                }\n            };\n        case actions.SAVE_AND_CLOSE_ACTIVITY:\n            return {\n                ...state,\n                editorView: {\n                    ...state.editorView!,\n                    state: \"saving\"\n                }\n            };\n        case actions.CLOSE_ACTIVITY:\n            return {\n                ...state,\n                editorView: undefined,\n                user: action.finished ?\n                    setActivityFinished(state.user, state.editorView!.currentMapId, state.editorView!.currentActivityId) :\n                    state.user\n            };\n        case actions.RESTART_ACTIVITY:\n            return {\n                ...state,\n                modal: undefined,\n                editorView: {\n                    state: \"active\",\n                    currentMapId: action.mapId,\n                    currentActivityId: action.activityId\n                },\n                user: setHeaderIdForActivity(\n                    state.user,\n                    action.mapId,\n                    action.activityId\n                )\n            }\n        case actions.SET_HEADERID_FOR_ACTIVITY:\n            if (!state.editorView) return state;\n            return {\n                ...state,\n                editorView: {\n                    ...state.editorView!,\n                    currentHeaderId: action.id\n                },\n                user: setHeaderIdForActivity(\n                    state.user,\n                    state.editorView!.currentMapId,\n                    state.editorView!.currentActivityId,\n                    action.id,\n                    action.currentStep,\n                    action.maxSteps\n                )\n            };\n        case actions.SET_USER:\n            return {\n                ...state,\n                user: action.user\n            };\n        case actions.SET_PAGE_TITLE:\n            return {\n                ...state,\n                title: action.title\n            }\n        case actions.SET_PAGE_DESCRIPTION:\n            return {\n                ...state,\n                description: action.description\n            }\n        case actions.SET_PAGE_INFO_URL:\n            return {\n                ...state,\n                infoUrl: action.infoUrl\n            }\n        case actions.SHOW_COMPLETION_MODAL:\n            return {\n                ...state,\n                modal: { type: \"completion\", currentMapId: action.mapId, currentActivityId: action.activityId }\n            };\n        case actions.SHOW_RESTART_ACTIVITY_MODAL:\n            return {\n                ...state,\n                modal: { type: \"restart-warning\", currentMapId: action.mapId, currentActivityId: action.activityId }\n            };\n        case actions.HIDE_MODAL:\n            return {\n                ...state,\n                modal: undefined\n            };\n        default:\n            return state\n    }\n}\n\n\nexport function setHeaderIdForActivity(user: UserState, mapId: string, activityId: string, headerId?: string, currentStep?: number, maxSteps?: number): UserState {\n    let existing = lookupActivityProgress(user, mapId, activityId);\n\n    if (!existing) {\n        existing = {\n            isCompleted: false,\n            activityId,\n            currentStep,\n            maxSteps,\n            headerId\n        }\n    }\n\n    const isCompleted = existing.isCompleted || currentStep !== undefined && maxSteps !== undefined && currentStep >= maxSteps;\n\n    return {\n        ...user,\n        mapProgress: {\n            ...user.mapProgress,\n            [mapId]: {\n                ...(user.mapProgress[mapId] || { mapId }),\n                activityState: {\n                    ...(user.mapProgress[mapId]?.activityState || {}),\n                    [activityId]: {\n                        ...existing,\n                        headerId,\n                        currentStep,\n                        maxSteps,\n                        isCompleted\n                    }\n                }\n            }\n        }\n    };\n}\n\nexport function setActivityFinished(user: UserState, mapId: string, activityId: string) {\n    let existing = lookupActivityProgress(user, mapId, activityId);\n\n    if (!existing) {\n        existing = {\n            isCompleted: false,\n            activityId,\n            headerId: \"\",\n            currentStep: 0\n        }\n    }\n\n    return {\n        ...user,\n        mapProgress: {\n            ...user.mapProgress,\n            [mapId]: {\n                ...(user.mapProgress[mapId] || { mapId }),\n                activityState: {\n                    ...(user.mapProgress[mapId]?.activityState || {}),\n                    [activityId]: {\n                        ...existing,\n                        isCompleted: true\n                    }\n                }\n            }\n        }\n    };\n}\n\nexport default topReducer;","import { createStore } from 'redux';\n\nimport topReducer from './reducer';\n\nconst store = createStore(topReducer);\nexport default store;","import * as actions from './types'\n\nexport const dispatchAddSkillMap = (map: SkillMap) => ({ type: actions.ADD_SKILL_MAP, map });\nexport const dispatchClearSkillMaps = () => ({ type: actions.CLEAR_SKILL_MAPS });\nexport const dispatchChangeSelectedItem = (id: string) => ({ type: actions.CHANGE_SELECTED_ITEM, id });\nexport const dispatchSetHeaderIdForActivity = (id: string, currentStep: number, maxSteps: number) => ({ type: actions.SET_HEADERID_FOR_ACTIVITY, id, currentStep, maxSteps });\nexport const dispatchOpenActivity = (mapId: string, activityId: string) => ({ type: actions.OPEN_ACTIVITY, mapId, activityId });\nexport const dispatchCloseActivity = (finished = false) => ({ type: actions.CLOSE_ACTIVITY, finished });\nexport const dispatchSaveAndCloseActivity = () => ({ type: actions.SAVE_AND_CLOSE_ACTIVITY });\nexport const dispatchRestartActivity = (mapId: string, activityId: string) => ({ type: actions.RESTART_ACTIVITY, mapId, activityId });\n\nexport const dispatchSetUser = (user: UserState) => ({ type: actions.SET_USER, user });\n\nexport const dispatchSetPageTitle = (title: string) => ({ type: actions.SET_PAGE_TITLE, title });\nexport const dispatchSetPageDescription = (description: string) => ({ type: actions.SET_PAGE_DESCRIPTION, description });\nexport const dispatchSetPageInfoUrl = (infoUrl: string) => ({ type: actions.SET_PAGE_INFO_URL, infoUrl });\n\nexport const dispatchShowCompletionModal = (mapId: string, activityId?: string) => ({ type: actions.SHOW_COMPLETION_MODAL, mapId, activityId });\nexport const dispatchHideModal = () => ({ type: actions.HIDE_MODAL });\n\nexport const dispatchShowRestartActivityWarning = (mapId: string, activityId: string) => ({ type: actions.SHOW_RESTART_ACTIVITY_MODAL, mapId, activityId });\n","/// <reference path=\"../lib/skillMap.d.ts\" />\nimport * as React from \"react\";\n\nimport { connect } from 'react-redux';\nimport { dispatchSaveAndCloseActivity } from '../actions/dispatch';\nimport { SkillMapState } from '../store/reducer';\nimport { resolvePath } from \"../lib/browserUtils\";\n\ninterface HeaderBarProps {\n    activityOpen: boolean;\n    dispatchSaveAndCloseActivity: () => void;\n}\n\nexport class HeaderBarImpl extends React.Component<HeaderBarProps> {\n    render() {\n        const { activityOpen } = this.props;\n        const logoAlt = \"MakeCode Logo\";\n        const organizationLogoAlt = \"Microsoft Logo\";\n\n        return <div className=\"header\">\n            <div className=\"header-left\">\n                { activityOpen\n                    ? <i className=\"icon arrow left\" role=\"button\" onClick={this.onBackClicked}/>\n                    : <div className=\"header-logo\">\n                        <img src={resolvePath(\"assets/logo.svg\")} alt={logoAlt} />\n                    </div>\n                }\n            </div>\n            <div className=\"spacer\" />\n            <div className=\"header-right\">\n                <div className=\"header-org-logo\">\n                    <img src={resolvePath(\"assets/microsoft.png\")} alt={organizationLogoAlt} />\n                </div>\n            </div>\n        </div>\n    }\n\n    onBackClicked = () => {\n        this.props.dispatchSaveAndCloseActivity();\n    }\n}\n\n\nfunction mapStateToProps(state: SkillMapState, ownProps: any) {\n    if (!state) return {};\n    return {\n        activityOpen: !!state.editorView\n    }\n}\n\n\nconst mapDispatchToProps = {\n    dispatchSaveAndCloseActivity\n};\n\nexport const HeaderBar = connect(mapStateToProps, mapDispatchToProps)(HeaderBarImpl);","import * as React from \"react\";\nimport { connect } from 'react-redux';\n\nimport { SkillMapState } from '../store/reducer';\n\ninterface BannerProps {\n    title: string;\n    description: string;\n    icon: string;\n}\n\nexport class BannerImpl extends React.Component<BannerProps> {\n    render() {\n        const  { title, description, icon } = this.props;\n        return <div className=\"banner\">\n            <div className=\"banner-card\">\n                <i className={`icon ${icon}`} />\n                <div className=\"banner-text\">\n                    <div className=\"banner-title\">{title}</div>\n                    <div className=\"banner-description\">{description}</div>\n                </div>\n            </div>\n        </div>\n    }\n}\n\nfunction mapStateToProps(state: SkillMapState, ownProps: any) {\n    return {\n        title: state.title,\n        description: state.description\n    };\n}\n\nexport const Banner = connect(mapStateToProps)(BannerImpl);","import * as React from \"react\";\n\nimport '../styles/modal.css'\n\nexport interface ModalAction {\n    label: string;\n    className?: string;\n    onClick: () => void;\n}\n\ninterface ModalProps {\n    title: string;\n    actions?: ModalAction[];\n    onClose?: () => void;\n}\n\nexport class Modal extends React.Component<ModalProps> {\n    protected handleModalClick = (e: any) => {\n        e.stopPropagation();\n        e.preventDefault();\n    }\n\n    protected handleCloseClick = () => {\n        if (this.props.onClose) this.props.onClose();\n        this.setState({ visible: false });\n    }\n\n    render() {\n        const  { title, actions } = this.props;\n        return <div className=\"modal-overlay\" onClick={this.handleCloseClick}>\n            <div className=\"modal\" onClick={this.handleModalClick}>\n                <div className=\"modal-header\">\n                    <div className=\"modal-title\">{title}</div>\n                    <div className=\"spacer\" />\n                    <div className=\"modal-close-icon\" onClick={this.handleCloseClick}><i className=\"icon close\"/></div>\n                </div>\n                <div className=\"modal-body\">\n                    { this.props.children }\n                </div>\n                {actions && actions.length > 0 && <div className=\"modal-actions\">\n                    {actions.map((el, i) => {\n                        return <div key={i} className={`modal-button ${el.className}`} onClick={el.onClick}>{el.label}</div>\n                    })}\n                </div>}\n            </div>\n        </div>\n    }\n}\n","/// <reference path=\"../lib/skillMap.d.ts\" />\n\nimport * as React from \"react\";\nimport { connect } from 'react-redux';\n\nimport { ModalType, SkillMapState } from '../store/reducer';\nimport { dispatchHideModal, dispatchRestartActivity, dispatchOpenActivity } from '../actions/dispatch';\n\nimport { Modal, ModalAction } from './Modal';\n\ntype CompletionModalType = \"map\" | \"activity\";\n\ninterface AppModalProps {\n    type: ModalType;\n    completionType?: CompletionModalType;\n    mapId: string;\n    activity?: MapActivity;\n    nextActivityId?: string;\n    displayName?: string;\n    actions?: ModalAction[];\n    dispatchHideModal: () => void;\n    dispatchRestartActivity: (mapId: string, activityId: string) => void;\n    dispatchOpenActivity: (mapId: string, activityId: string) => void;\n}\n\nexport class AppModalImpl extends React.Component<AppModalProps> {\n    render() {\n        const  { activity, type, completionType } = this.props;\n        if (!activity && completionType !== \"map\") return <div />\n\n        switch (type) {\n            case \"completion\":\n                return this.renderCompletionModal();\n            case \"restart-warning\":\n                return this.renderRestartWarning();\n            default:\n                return <div/>\n        }\n    }\n\n    renderCompletionModal() {\n        const  { type, displayName, dispatchHideModal, completionType, actions } = this.props;\n        if (!type) return <div />\n\n        const completionModalTitle = completionType === \"activity\" ? \"Activity Complete!\" : \"Path Complete!\";\n        const completionModalText = \"Good work! You've completed {0}. Keep going!\";\n        const completionModalTextSegments = completionModalText.split(\"{0}\");\n\n        return <Modal title={completionModalTitle} actions={actions} onClose={() => dispatchHideModal()}>\n            {completionModalTextSegments[0]}{<strong>{displayName}</strong>}{completionModalTextSegments[1]}\n        </Modal>\n    }\n\n    renderRestartWarning() {\n        const  { mapId, activity, dispatchHideModal, dispatchRestartActivity } = this.props;\n        const restartModalTitle = \"Restart Activity?\";\n        const restartModalText = \"Are you sure you want to restart {0}? You won't lose your map progress but any code you wrote will be deleted.\";\n        const restartModalTextSegments = restartModalText.split(\"{0}\");\n\n        const actions = [\n            { label: \"CANCEL\", onClick: () => dispatchHideModal() },\n            { label: \"RESTART\", onClick: () => {\n                dispatchRestartActivity(mapId, activity!.activityId);\n            }}\n        ]\n\n        return <Modal title={restartModalTitle} actions={actions} onClose={() => dispatchHideModal()}>\n            {restartModalTextSegments[0]}{<strong>{activity!.displayName}</strong>}{restartModalTextSegments[1]}\n        </Modal>\n    }\n}\n\nfunction mapStateToProps(state: SkillMapState, ownProps: any) {\n    if (!state) return {};\n    const { currentMapId, currentActivityId, type } = state.modal || {};\n    let nextActivityId: string | undefined;\n    let displayName: string | undefined;\n    let completionType: CompletionModalType | undefined;\n    let actions: ModalAction[] = [];\n\n    if (currentMapId) {\n        const map = state.maps[currentMapId];\n        if (currentActivityId) {\n            const activity = map.activities[currentActivityId];\n            completionType = \"activity\";\n            displayName = activity.displayName;\n            nextActivityId = activity.next?.[0].activityId;\n\n            actions.push({ label:\"NEXT\", onClick: () => {\n                dispatchHideModal();\n                dispatchOpenActivity(currentMapId, nextActivityId || \"\");\n             } });\n        } else {\n            completionType = \"map\";\n            displayName = map.displayName;\n\n            actions.push({ label: \"CERTIFICATE\", onClick: () => window.open(map.completionUrl) });\n        }\n    }\n\n    return {\n        type,\n        completionType,\n        displayName,\n        nextActivityId,\n        actions,\n\n        mapId: currentMapId,\n        activity: currentMapId && currentActivityId ? state.maps[currentMapId].activities[currentActivityId] : undefined\n    }\n}\n\nconst mapDispatchToProps = {\n    dispatchHideModal,\n    dispatchRestartActivity,\n    dispatchOpenActivity\n};\n\nexport const AppModal = connect(mapStateToProps, mapDispatchToProps)(AppModalImpl);\n","import * as React from \"react\";\n\nexport interface Item {\n    id: string;\n    label?: string;\n    url?: string;\n    imageUrl?: string;\n}\n\ninterface CarouselItemTemplateProps extends Item {\n}\n\nfunction CarouselItemTemplate(props: CarouselItemTemplateProps) {\n    const { label } = props;\n    return <span>{ label }</span>\n}\n\ninterface CarouselItemProps {\n    item: Item;\n    itemTemplate?: any;\n    selected?: boolean;\n    className?: string;\n    onSelect?: (id: string) => void;\n}\n\nexport function CarouselItem(props: CarouselItemProps) {\n    const { item, itemTemplate, selected, className, onSelect } = props;\n    const Inner = itemTemplate || CarouselItemTemplate;\n\n    const handleClick = () => { if (onSelect) onSelect(item.id); };\n\n    return <div className={`carousel-item ${selected ? 'selected' : ''} ${className || ''}`} onClick={handleClick}>\n        <Inner {...item} />\n    </div>\n}","import * as React from \"react\";\n\nimport { Item, CarouselItem } from './CarouselItem';\n\nimport '../styles/carousel.css'\nimport { ComponentClass } from \"react-redux\";\n\ninterface CarouselProps {\n    title?: string;\n    items: Item[];\n    selectedItem?: string;\n    itemClassName?: string;\n    itemTemplate?: ((props: Item) => JSX.Element) | ComponentClass<any>;\n    onItemSelect?: (id: string) => void;\n    prependChildren?: JSX.Element[];\n    appendChildren?: JSX.Element[];\n}\n\ninterface CarouselState {\n    showLeft: boolean;\n    showRight: boolean;\n}\n\nexport class Carousel extends React.Component<CarouselProps, CarouselState> {\n    protected scrollMargin = 5;\n    protected carouselRef: any;\n    constructor(props: CarouselProps) {\n        super(props);\n\n        this.state = { showLeft: false, showRight: true };\n    }\n\n    componentDidMount() {\n        this.handleScroll();\n        window.addEventListener(\"resize\", this.handleScroll);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"resize\", this.handleScroll);\n    }\n\n    protected handleLeftArrowClick = () => {\n        this.carouselRef.scrollBy({ left: - (window.innerWidth / 2) });\n    }\n\n    protected handleRightArrowClick = () => {\n        this.carouselRef.scrollBy({ left: window.innerWidth / 2 });\n    }\n\n    protected handleScroll = () => {\n        const scrollLeft = this.carouselRef.scrollLeft;\n        this.setState({\n            showLeft: scrollLeft > this.scrollMargin,\n            showRight: ((this.carouselRef.scrollWidth - this.carouselRef.clientWidth) - scrollLeft) > this.scrollMargin\n        });\n    }\n\n    render() {\n        const { title, items, selectedItem, itemTemplate, itemClassName, onItemSelect, prependChildren, appendChildren } = this.props;\n        const { showLeft, showRight } = this.state;\n\n        return <div className=\"carousel\">\n            {title && <div className=\"carousel-title\">{title}</div>}\n            {showLeft && <div className=\"carousel-arrow left\" onClick={this.handleLeftArrowClick}>\n                <i className=\"icon chevron left\" />\n            </div>}\n            <div className=\"carousel-items\">\n                <div className=\"carousel-items-inner\" onScroll={this.handleScroll} ref={(el) => this.carouselRef = el}>\n                    {prependChildren}\n                    {items.map((el, i) => {\n                        return <CarouselItem key={i} className={itemClassName} item={el} itemTemplate={itemTemplate} selected={selectedItem === el.id} onSelect={onItemSelect} />\n                    })}\n                    {appendChildren}\n                </div>\n            </div>\n            {showRight && <div className=\"carousel-arrow right\" onClick={this.handleRightArrowClick}>\n                <i className=\"icon chevron right\" />\n            </div>}\n        </div>\n    }\n}\n","import * as React from \"react\";\nimport { connect } from 'react-redux';\n\nimport { SkillMapState } from '../store/reducer';\nimport { Item } from './CarouselItem';\n\nimport { dispatchOpenActivity, dispatchShowRestartActivityWarning } from '../actions/dispatch';\n\nimport { isActivityUnlocked, lookupActivityProgress, } from '../lib/skillMapUtils';\n\nimport '../styles/skillcard.css'\n\ntype SkillCardStatus = \"locked\" | \"notstarted\" | \"inprogress\" | \"completed\" ;\n\ninterface SkillCardProps extends Item {\n    mapId: string;\n    description?: string;\n    imageUrl?: string;\n    tags?: string[];\n    status?: SkillCardStatus;\n    currentStep?: number;\n    maxSteps?: number\n    dispatchOpenActivity: (mapId: string, activityId: string) => void;\n    dispatchShowRestartActivityWarning: (mapId: string, activityId: string) => void;\n}\n\nexport class SkillCardImpl extends React.Component<SkillCardProps> {\n    protected getSkillCardActionText(): string {\n        switch (this.props.status) {\n            case \"locked\":\n                return \"LOCKED\"\n            case \"completed\":\n                return \"VIEW CODE\"\n            case \"inprogress\":\n                return \"CONTINUE\"\n            case \"notstarted\":\n            default:\n                return \"START\"\n        }\n    }\n\n    protected handleActionButtonClick = () => {\n        const { status, mapId, id, dispatchOpenActivity } = this.props;\n\n        switch (status) {\n            case \"locked\":\n                break;\n            case \"completed\":\n            case \"inprogress\":\n            case \"notstarted\":\n            default:\n                return dispatchOpenActivity(mapId, id);\n        }\n    }\n\n    protected handleRestartButtonClick = () => {\n        const { mapId, id, dispatchShowRestartActivityWarning } = this.props;\n        dispatchShowRestartActivityWarning(mapId, id);\n    }\n\n    render() {\n        const { label, description, imageUrl, tags, status, currentStep, maxSteps} = this.props;\n\n        return <div className={`skill-card ${status || ''}`}>\n            <div className=\"skill-card-display\">\n                <div className=\"skill-card-image\">\n                    {imageUrl ? <img src={imageUrl} alt={`Preview of activity content`} /> : <i className={`icon ${status !== \"locked\" ? \"game\" : \"\"}`} />}\n                </div>\n                <div className=\"skill-card-label\">\n                    <div className=\"skill-card-title\">\n                        {status === \"completed\" && <i className={`icon check circle`} />}\n                        {status === \"inprogress\" && maxSteps &&\n                            <span className=\"circular-label\">{`${currentStep}/${maxSteps}`}</span>\n                        }\n                        <span>{label}</span>\n                    </div>\n                    <div className=\"skill-card-tags\">\n                        {tags?.map((t, i) => {\n                            return <div key={i}>{t}</div>\n                        })}\n                    </div>\n                </div>\n                {status === \"locked\" && <div className=\"skill-card-overlay\"><i className=\"icon lock\" /></div>}\n            </div>\n            <div className=\"skill-card-info\">\n                <div className=\"skill-card-title\">{label}</div>\n                <div className=\"skill-card-description\">{description}</div>\n                <div className=\"spacer\"></div>\n                <div className=\"skill-card-action\">\n                    {status === \"completed\" &&\n                        <div className=\"skill-card-button-icon\" role=\"button\" onClick={this.handleRestartButtonClick}>\n                            <i className=\"xicon redo\"></i>\n                        </div>\n                    }\n                    <div className=\"skill-card-button\" role=\"button\" onClick={this.handleActionButtonClick}>\n                        {this.getSkillCardActionText()}\n                    </div>\n                </div>\n            </div>\n        </div>\n    }\n}\n\nfunction mapStateToProps(state: SkillMapState, ownProps: any) {\n    const isUnlocked = state.user && state.maps?.[ownProps.mapId] && isActivityUnlocked(state.user, state.maps[ownProps.mapId], ownProps.id);\n\n    let status: SkillCardStatus = isUnlocked ? \"notstarted\" : \"locked\";\n    let currentStep: number | undefined;\n    let maxSteps: number | undefined;\n\n    if (state.user) {\n        const progress = lookupActivityProgress(state.user, ownProps.mapId, ownProps.id);\n\n        if (progress) {\n            if (progress.isCompleted) {\n                status = \"completed\";\n            }\n            else if (progress.headerId) {\n                status = \"inprogress\";\n                currentStep = progress?.currentStep;\n                maxSteps = progress?.maxSteps;\n            }\n        }\n    }\n\n    return {\n        status,\n        currentStep,\n        maxSteps\n    };\n}\n\nconst mapDispatchToProps = {\n    dispatchOpenActivity,\n    dispatchShowRestartActivityWarning\n}\n\nexport const SkillCard = connect(mapStateToProps, mapDispatchToProps)(SkillCardImpl);","/// <reference path=\"../lib/skillMap.d.ts\" />\n\nimport * as React from \"react\";\nimport { connect } from 'react-redux';\n\nimport { SkillMapState } from '../store/reducer';\nimport { dispatchChangeSelectedItem, dispatchShowCompletionModal } from '../actions/dispatch';\nimport { isMapCompleted } from '../lib/skillMapUtils';\nimport { Carousel } from './Carousel';\nimport { Item } from './CarouselItem';\nimport { SkillCard } from './SkillCard';\n\ninterface SkillCarouselProps {\n    map: SkillMap;\n    user: UserState;\n    selectedItem?: string;\n    dispatchChangeSelectedItem: (id: string) => void;\n    dispatchShowCompletionModal: (mapId: string, activityId?: string) => void;\n}\n\nclass SkillCarouselImpl extends React.Component<SkillCarouselProps> {\n    protected items: Item[];\n\n    constructor(props: SkillCarouselProps) {\n        super(props);\n\n        this.items = this.getItems(props.map.mapId, props.map.root);\n    }\n\n    protected getItems(mapId: string, root: MapActivity): Item[] {\n        const items = [];\n        let activity = root;\n        while (activity) {\n            items.push({\n                id: activity.activityId,\n                mapId,\n                label: activity.displayName,\n                description: activity.description,\n                tags: activity.tags,\n                url: activity.url,\n                imageUrl: activity.imageUrl\n            });\n            activity = activity.next[0]; // TODO still add nonlinear items to array even if we don't render graph\n        }\n\n        return items;\n    }\n\n    protected onItemSelect = (id: string) => {\n        this.props.dispatchChangeSelectedItem(id);\n    }\n\n    protected handleEndCardClick = () => {\n        this.props.dispatchShowCompletionModal(this.props.map.mapId);\n    }\n\n    protected getEndCard(): JSX.Element {\n        return <div className=\"end-card\" key=\"end\">\n            <div className=\"end-card-icon\" onClick={this.handleEndCardClick}>\n                <i className=\"icon trophy\" />\n            </div>\n        </div>\n    }\n\n    render() {\n        const { map, user, selectedItem } = this.props;\n        const endCard = isMapCompleted(user, map) ? [this.getEndCard()] : [];\n\n        return <Carousel title={map.displayName} items={this.items} itemTemplate={SkillCard} itemClassName=\"linked\"\n            onItemSelect={this.onItemSelect} selectedItem={selectedItem}\n            appendChildren={endCard} />\n    }\n}\n\nfunction mapStateToProps(state: SkillMapState, ownProps: any) {\n    if (!state) return {};\n    return {\n        user: state.user,\n        selectedItem: state.selectedItem && ownProps.map?.activities?.[state.selectedItem] ? state.selectedItem : undefined\n    }\n}\n\nconst mapDispatchToProps = {\n    dispatchChangeSelectedItem,\n    dispatchShowCompletionModal\n};\n\nexport const SkillCarousel = connect(mapStateToProps, mapDispatchToProps)(SkillCarouselImpl);\n","/// <reference path=\"./skillMap.d.ts\" />\n\nconst testMap = ``\n\ninterface MarkdownSection {\n    headerKind: \"single\" | \"double\" | \"triple\";\n    header: string;\n    attributes: {[index: string]: string};\n}\n\nexport function test() {\n    return parseSkillMap(testMap);\n}\n\nexport function parseSkillMap(text: string): { maps: SkillMap[], metadata?: PageMetadata } {\n    const sections = getSectionsFromText(text);\n\n    const parsed: SkillMap[] = [];\n    let metadata: PageMetadata | undefined;\n\n    let start = -1;\n\n    for (let i = 0; i < sections.length; i++) {\n        if (sections[i].headerKind === \"single\") {\n            metadata = inflateMetadata(sections[i]);\n        } else if (sections[i].headerKind === \"double\") {\n            if (start >= 0) {\n                parsed.push(buildMapFromSections(sections[start], sections.slice(start + 1, i)));\n            }\n            start = i;\n        }\n    }\n\n    if (start > 0 || parsed.length === 0) {\n        parsed.push(buildMapFromSections(sections[start], sections.slice(start + 1, sections.length)));\n    }\n\n    return { maps: parsed, metadata };\n}\n\nfunction getSectionsFromText(text: string) {\n    const lines = text.split(\"\\n\");\n\n    let sections: MarkdownSection[] = [];\n    let currentSection: MarkdownSection | null = null;\n\n    let currentKey: string | null = null;\n    let currentValue: string | null = null;\n\n    for (const line of lines) {\n        if (!line.trim()) {\n            if (currentValue) {\n                currentValue += \"\\n\";\n            }\n            continue;\n        }\n\n        if (line.startsWith(\"#\")) {\n            const headerMatch = /^(#+)\\s*(.+)$/.exec(line);\n\n            if (headerMatch) {\n                pushSection();\n\n                currentSection = {\n                    headerKind: headerMatch[1].length === 1 ? \"single\" :\n                        (headerMatch[1].length === 2 ? \"double\" : \"triple\"),\n                    header: headerMatch[2],\n                    attributes: {}\n                }\n                currentKey = null;\n                currentValue = null;\n                continue;\n            }\n        }\n\n        if (currentSection) {\n            const keyMatch = /^[*-]\\s+(?:([^:]+):)?(.*)$/.exec(line);\n\n            if (keyMatch) {\n                if (keyMatch[1]) {\n                    if (currentKey && currentValue) {\n                        currentSection.attributes[currentKey] = currentValue.trim();\n                    }\n                    currentKey = keyMatch[1].toLowerCase();\n                    currentValue = keyMatch[2];\n                }\n                else if (currentKey) {\n                    currentValue += keyMatch[2];\n                }\n            }\n        }\n    }\n\n    pushSection();\n\n    return sections;\n\n    function pushSection() {\n        if (currentSection) {\n            if (currentKey && currentValue) {\n                currentSection.attributes[currentKey] = currentValue.trim();\n            }\n            sections.push(currentSection);\n        }\n    }\n}\n\nfunction buildMapFromSections(header: MarkdownSection, sections: MarkdownSection[]) {\n    const result = inflateSkillMap(header);\n    const activities = sections.map(inflateActivity);\n\n    result.root = activities[0];\n\n    for (const activity of activities) {\n        if (result.activities![activity.activityId]) {\n            error(`Duplicate activity id '${activity.activityId}' in map '${result.mapId}'`);\n        }\n\n        result.activities![activity.activityId] = activity;\n    }\n\n    for (const activity of activities) {\n        for (const id of activity.nextIds) {\n            if (!result.activities![id]) error(`Unknown activity id '${id}' in map '${result.mapId}'`);\n            activity.next.push(result.activities![id]);\n        }\n    }\n\n    const reachable: {[index: string]: boolean} = {};\n\n    checkForLoopsRecursive(result.root);\n\n    for (const activity of activities) {\n        if (!reachable[activity.activityId]) {\n            console.warn(`Unreachable activity detected '${activity.activityId}' in map '${result.mapId}'`);\n        }\n    }\n\n    return result as SkillMap;\n\n    function checkForLoopsRecursive(root: MapActivity, visited: {[index: string]: boolean} = {}) {\n        if (visited[root.activityId]) error(`Loop in map '${result.mapId}' detected`);\n        visited[root.activityId] = true;\n        reachable[root.activityId] = true;\n\n        if (root.next.length > 1) {\n            error(\"Branching currently not supported\")\n        }\n\n        for (const next of root.next) {\n            checkForLoopsRecursive(next, {...visited});\n        }\n    }\n}\n\n\nfunction inflateSkillMap(section: MarkdownSection): Partial<SkillMap> {\n    const result: Partial<SkillMap> = {\n        mapId: section.header.toLowerCase(),\n        displayName: section.attributes[\"name\"] || section.header,\n        description: section.attributes[\"description\"],\n        completionUrl: section.attributes[\"completionurl\"],\n        prerequisites: [],\n        activities: {}\n    };\n\n    if (section.attributes[\"required\"]) {\n        const parts = section.attributes[\"required\"].split(\",\");\n        for (const part of parts) {\n            const match = /^\\s*(?:(\\d+) +)?(.+)$/.exec(part)!;\n\n            if (match[1]) {\n                result.prerequisites!.push({\n                    type: \"tag\",\n                    tag: match[2].trim(),\n                    numberCompleted: parseInt(match[1])\n                });\n            }\n            else {\n                result.prerequisites!.push({\n                    type: \"activity\",\n                    mapId: match[2].trim()\n                });\n            }\n        }\n    }\n\n    return result;\n}\n\nfunction inflateActivity(section: MarkdownSection): MapActivity {\n    const result: Partial<MapActivity> = {\n        activityId: section.header.toLowerCase(),\n        displayName: section.attributes[\"name\"] || section.header,\n        description: section.attributes[\"description\"],\n        url: section.attributes[\"url\"],\n        imageUrl: section.attributes[\"imageurl\"],\n        tags: parseList(section.attributes[\"tags\"]),\n        next: [],\n        nextIds: parseList(section.attributes[\"next\"])\n    };\n\n    if (section.attributes[\"type\"]) {\n        const type = section.attributes[\"type\"].toLowerCase();\n        switch (type) {\n            case \"tutorial\":\n                result.type = type;\n                break;\n        }\n    }\n\n    if (section.attributes[\"editor\"]) {\n        const editor = section.attributes[\"editor\"].toLowerCase();\n        switch (editor) {\n            case \"py\":\n            case \"blocks\":\n            case \"js\":\n                result.editor = editor;\n                break;\n            default:\n                result.editor = \"blocks\";\n        }\n    }\n\n    if (!result.url) error(`Activity '${result.activityId}' is missing attribute 'url'`);\n    if (!result.type) error(`Activity '${result.activityId}' is missing attribute 'type'`);\n\n    return result as MapActivity;\n}\n\nfunction inflateMetadata(section: MarkdownSection): PageMetadata {\n    return {\n        title: section.attributes[\"name\"] || section.header,\n        description: section.attributes[\"description\"],\n        infoUrl: section.attributes[\"infoUrl\"]\n    }\n}\n\nfunction parseList(list: string, includeDuplicates = false) {\n    if (!list) return [];\n    const parts = list.split(\",\").map(p => p.trim().toLowerCase()).filter(p => !!p);\n\n    if (!includeDuplicates) {\n        let map: {[index: string]: string} = {};\n        parts.forEach(p => map[p] = p);\n        return Object.keys(map);\n    }\n    return parts;\n}\n\nfunction error(message: string): never {\n    throw(message);\n}\n\n\n\n","import { IDBWrapper } from \"./indexedDBWrapper\";\n\nexport interface WorkspaceProvider {\n    initAsync(): Promise<void>\n    getProjectAsync(headerId: string): Promise<pxt.workspace.Project>;\n    saveProjectAsync(project: pxt.workspace.Project): Promise<void>;\n    getUserStateAsync(): Promise<UserState | undefined>;\n    saveUserStateAsync(user: UserState): Promise<void>;\n}\n\nlet workspace: WorkspaceProvider;\nlet workspacePromise: Promise<WorkspaceProvider>;\n\nfunction getWorkspaceAsync() {\n    if (!workspacePromise) {\n        workspace = new IndexedDBWorkspace();\n        workspacePromise = workspace.initAsync()\n            .then(wp => workspace);\n    }\n    return workspacePromise;\n}\n\nexport async function getProjectAsync(headerId: string): Promise<pxt.workspace.Project> {\n    const ws = await getWorkspaceAsync();\n    return ws.getProjectAsync(headerId);\n}\n\nexport async function saveProjectAsync(project: pxt.workspace.Project): Promise<void> {\n    const ws = await getWorkspaceAsync();\n    await ws.saveProjectAsync(project);\n}\n\nexport async function getUserStateAsync(): Promise<UserState | undefined> {\n    const ws = await getWorkspaceAsync();\n\n    return ws.getUserStateAsync();\n}\n\nexport async function saveUserStateAsync(user: UserState): Promise<void> {\n    // Don't save debug user state\n    if (user.isDebug) return;\n\n    const ws = await getWorkspaceAsync();\n    await ws.saveUserStateAsync(user);\n}\n\n\nclass IndexedDBWorkspace implements WorkspaceProvider {\n    static version = 6;\n    static databaseName = \"local-skill-map\";\n    static projectTable = \"projects\";\n    static projectKey = \"id\";\n    static userTable = \"users\";\n    static userKey = \"id\";\n\n    db: IDBWrapper;\n\n    constructor() {\n        this.db = new IDBWrapper(IndexedDBWorkspace.databaseName, IndexedDBWorkspace.version, (ev, result) => {\n            const db = result.result as IDBDatabase;\n\n            db.createObjectStore(IndexedDBWorkspace.projectTable, { keyPath: IndexedDBWorkspace.projectKey });\n            db.createObjectStore(IndexedDBWorkspace.userTable, { keyPath: IndexedDBWorkspace.userKey });\n        });\n    }\n\n    initAsync() {\n        return this.db.openAsync();\n    }\n\n\n    getProjectAsync(headerId: string): Promise<pxt.workspace.Project> {\n        return this.db.getAsync(IndexedDBWorkspace.projectTable, headerId)\n            .then(entry => (entry as any).project);\n    }\n\n    saveProjectAsync(project: pxt.workspace.Project): Promise<void> {\n        return this.db.setAsync(\n            IndexedDBWorkspace.projectTable,\n            {\n                id: project.header!.id,\n                project\n            }\n        );\n    }\n\n    getUserStateAsync(): Promise<UserState | undefined> {\n        return this.db.getAsync(IndexedDBWorkspace.userTable, \"local-user\")\n            .then(entry => (entry as any)?.user);\n    }\n\n    saveUserStateAsync(user: UserState): Promise<void> {\n        return this.db.setAsync(\n            IndexedDBWorkspace.userTable,\n            {\n                id: \"local-user\",\n                user\n            }\n        );\n    }\n}","// Duplicated from pxtlib/browserutils.ts\n// TODO: Move to common location\n\n\n// IndexedDB wrapper class\nexport type IDBUpgradeHandler = (ev: IDBVersionChangeEvent, request: IDBRequest) => void;\n\nexport class IDBWrapper {\n    private _db!: IDBDatabase;\n\n    constructor(\n        private name: string,\n        private version: number,\n        private upgradeHandler?: IDBUpgradeHandler,\n        private quotaExceededHandler?: () => void) {\n    }\n\n    private throwIfNotOpened(): void {\n        if (!this._db) {\n            throw new Error(\"Database not opened; call IDBWrapper.openAsync() first\");\n        }\n    }\n\n    private errorHandler(err: Error, op: string, reject: (err: Error) => void): void {\n        console.error(new Error(`${this.name} IDBWrapper error for ${op}: ${err.message}`));\n        reject(err);\n        // special case for quota exceeded\n        if (err.name === \"QuotaExceededError\") {\n            // oops, we ran out of space\n            pxt.log(`storage quota exceeded...`);\n            pxt.tickEvent('storage.quotaexceedederror');\n            if (this.quotaExceededHandler)\n                this.quotaExceededHandler();\n        }\n    }\n\n    private getObjectStore(name: string, mode: \"readonly\" | \"readwrite\" = \"readonly\"): IDBObjectStore {\n        this.throwIfNotOpened();\n        const transaction = this._db.transaction([name], mode);\n        return transaction.objectStore(name);\n    }\n\n    static deleteDatabaseAsync(name: string): Promise<void> {\n        return new Promise((resolve, reject) => {\n            const idbFactory: IDBFactory = window.indexedDB || (window as any).mozIndexedDB || (window as any).webkitIndexedDB || (window as any).msIndexedDB;\n            const request = idbFactory.deleteDatabase(name);\n            request.onsuccess = () => resolve();\n            request.onerror = () => reject(request.error);\n        });\n    }\n\n    public openAsync(): Promise<void> {\n        return new Promise((resolve, reject) => {\n            const idbFactory: IDBFactory = window.indexedDB || (window as any).mozIndexedDB || (window as any).webkitIndexedDB || (window as any).msIndexedDB;\n            const request = idbFactory.open(this.name, this.version);\n            request.onsuccess = () => {\n                this._db = request.result;\n                resolve();\n            };\n            request.onerror = () => this.errorHandler(request.error!, \"open\", reject);\n            request.onupgradeneeded = (ev) => this.upgradeHandler && this.upgradeHandler(ev, request);\n        });\n    }\n\n    public getAsync<T>(storeName: string, id: string): Promise<T> {\n        return new Promise((resolve, reject) => {\n            const store = this.getObjectStore(storeName);\n            const request = store.get(id);\n            request.onsuccess = () => resolve(request.result as T);\n            request.onerror = () => this.errorHandler(request.error!, \"get\", reject);\n        });\n    }\n\n    public getAllAsync<T>(storeName: string): Promise<T[]> {\n        return new Promise((resolve, reject) => {\n            const store = this.getObjectStore(storeName);\n            const cursor = store.openCursor();\n            const data: T[] = [];\n\n            cursor.onsuccess = () => {\n                if (cursor.result) {\n                    data.push(cursor.result.value);\n                    cursor.result.continue();\n                } else {\n                    resolve(data);\n                }\n            };\n            cursor.onerror = () => this.errorHandler(cursor.error!, \"getAll\", reject);\n        });\n    }\n\n    public setAsync(storeName: string, data: any): Promise<void> {\n        return new Promise((resolve, reject) => {\n            const store = this.getObjectStore(storeName, \"readwrite\");\n            let request: IDBRequest;\n\n            if (typeof data.id !== \"undefined\" && data.id !== null) {\n                request = store.put(data);\n            } else {\n                request = store.add(data);\n            }\n\n            request.onsuccess = () => resolve();\n            request.onerror = () => this.errorHandler(request.error!, \"set\", reject);\n        });\n    }\n\n    public deleteAsync(storeName: string, id: string): Promise<void> {\n        return new Promise((resolve, reject) => {\n            const store = this.getObjectStore(storeName, \"readwrite\");\n            const request = store.delete(id);\n            request.onsuccess = () => resolve();\n            request.onerror = () => this.errorHandler(request.error!, \"delete\", reject);\n        });\n    }\n\n    public deleteAllAsync(storeName: string): Promise<void> {\n        return new Promise((resolve, reject) => {\n            const store = this.getObjectStore(storeName, \"readwrite\");\n            const request = store.clear();\n            request.onsuccess = () => resolve();\n            request.onerror = () => this.errorHandler(request.error!, \"deleteAll\", reject);\n        });\n    }\n}","/// <reference path=\"../../../built/pxteditor.d.ts\" />\nimport * as React from \"react\";\nimport { connect } from 'react-redux';\nimport { saveProjectAsync, getProjectAsync } from \"../lib/workspaceProvider\";\nimport { isLocal, resolvePath } from \"../lib/browserUtils\";\nimport { lookupActivityProgress } from \"../lib/skillMapUtils\";\n\nimport { SkillMapState } from '../store/reducer';\nimport  { dispatchSetHeaderIdForActivity, dispatchCloseActivity, dispatchSaveAndCloseActivity } from '../actions/dispatch';\n\nimport '../styles/makecode-editor.css'\n\ninterface MakeCodeFrameProps {\n    save: boolean;\n    activityId: string;\n    title: string;\n    url: string;\n    tutorialPath: string;\n    completed: boolean;\n    activityHeaderId?: string;\n    dispatchSetHeaderIdForActivity: (headerId: string, currentStep: number, maxSteps: number) => void;\n    dispatchCloseActivity: (finished?: boolean) => void;\n    dispatchSaveAndCloseActivity: () => void;\n}\n\ninterface MakeCodeFrameState {\n    loaded: boolean;\n\n    // See handleFrameRef\n    unloading: boolean;\n}\n\nconst editorUrl: string = isLocal() ? \"http://localhost:3232/index.html\" : (window as any).pxtTargetBundle.appTheme.embedUrl\n\nclass MakeCodeFrameImpl extends React.Component<MakeCodeFrameProps, MakeCodeFrameState> {\n    protected ref: HTMLIFrameElement | undefined;\n    protected messageQueue: any[] = [];\n    protected finishedTutorial = false;\n    protected nextId: number = 0;\n    protected pendingMessages: {[index: string]: any} = {};\n\n    constructor(props: MakeCodeFrameProps) {\n        super(props);\n        this.state = {\n            loaded: false,\n            unloading: false\n        };\n    }\n\n    componentDidUpdate() {\n        if (this.props.save) {\n            this.sendMessage({\n                type: \"pxteditor\",\n                action: \"saveproject\",\n                response: false\n            } as pxt.editor.EditorMessage, true);\n        }\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"message\", this.onMessageReceived);\n    }\n\n    render() {\n        const { url, title, save } = this.props;\n        const { loaded, unloading } = this.state;\n\n        const loadingText = save ? \"Saving...\" : \"Loading...\"\n        const imageAlt = \"MakeCode Logo\";\n\n        return <div className=\"makecode-frame-outer\">\n            <div className={`makecode-frame-loader ${(loaded && !save) ? \"hidden\" : \"\"}`}>\n                <img src={resolvePath(\"assets/logo.svg\")} alt={imageAlt} />\n                <div className=\"makecode-frame-loader-text\">{loadingText}</div>\n            </div>\n            <iframe className=\"makecode-frame\" src={unloading ? \"about:blank\" : url} title={title} ref={this.handleFrameRef}></iframe>\n        </div>\n    }\n\n\n    protected handleFrameRef = (ref: HTMLIFrameElement) => {\n        if (ref && ref.contentWindow) {\n            window.addEventListener(\"message\", this.onMessageReceived);\n            this.ref = ref;\n\n            this.ref.addEventListener(\"load\", () => {\n                // This is a workaround for a bug in Chrome where for some reason the page hangs when\n                // trying to unload the makecode iframe. Instead, we set the src to about:blank, wait for\n                // that to load, and then unload the iframe\n                if (this.state.unloading) this.props.dispatchCloseActivity();\n            });\n        }\n    }\n\n    protected onMessageReceived = (event: MessageEvent) => {\n        const data = event.data as pxt.editor.EditorMessageRequest;\n\n        if ((data.type as string) === \"ready\") {\n            this.handleWorkspaceReadyEventAsync();\n            return;\n        }\n\n        if (data.type === \"pxteditor\" && data.id && this.pendingMessages[data.id]) {\n            this.onResponseReceived(this.pendingMessages[data.id], event.data as pxt.editor.EditorMessageResponse);\n            delete this.pendingMessages[data.id];\n            return;\n        }\n\n        switch (data.action) {\n            case \"event\":\n                this.handleEditorTickEvent(data as pxt.editor.EditorMessageEventRequest);\n                break;\n            case \"workspacesync\":\n                this.handleWorkspaceSyncRequest(data as pxt.editor.EditorWorkspaceSyncRequest);\n                break;\n            case \"workspacesave\":\n                this.handleWorkspaceSaveRequestAsync(data as pxt.editor.EditorWorkspaceSaveRequest);\n                break;\n            default:\n                console.log(JSON.stringify(data, null, 4));\n        }\n    }\n\n    protected onResponseReceived(original: any, response: pxt.editor.EditorMessageResponse) {\n        const { save } = this.props;\n\n        if (original.action === \"saveproject\" && save) {\n            if (this.finishedTutorial) {\n                this.finishedTutorial = false;\n\n                // Save again to be sure we get any final edits\n                this.sendMessage({\n                    type: \"pxteditor\",\n                    action: \"saveproject\"\n                } as pxt.editor.EditorMessage, true);\n            }\n            else {\n                this.setState({\n                    unloading: true\n                });\n            }\n        }\n    }\n\n    protected sendMessage(message: any, response = false) {\n        const sendMessageCore = (message: any) => {\n            if (response) {\n                message.response = true;\n                message.id = this.nextId++ + \"\";\n                this.pendingMessages[message.id] = message;\n            }\n            this.ref!.contentWindow!.postMessage(message, \"*\");\n        }\n\n        if (this.ref) {\n            if (!this.ref.contentWindow) {\n                this.messageQueue.push(message);\n            }\n            else {\n                while (this.messageQueue.length) {\n                    sendMessageCore(this.messageQueue.shift());\n                }\n                sendMessageCore(message);\n            }\n        }\n    }\n\n    protected handleWorkspaceSyncRequest(request: pxt.editor.EditorWorkspaceSyncRequest) {\n        this.sendMessage({\n            ...request,\n            success: true,\n            projects: []\n        } as pxt.editor.EditorWorkspaceSyncResponse);\n    }\n\n    protected async handleWorkspaceSaveRequestAsync(request: pxt.editor.EditorWorkspaceSaveRequest) {\n        const { dispatchSetHeaderIdForActivity, activityHeaderId } = this.props;\n\n        const project = {\n            ...request.project,\n            header: {\n                ...request.project.header!,\n                id: activityHeaderId || request.project.header!.id\n            }\n        };\n\n        await saveProjectAsync(project);\n\n        if (project.header!.tutorial) {\n            dispatchSetHeaderIdForActivity(\n                project.header.id,\n                (project.header.tutorial.tutorialStep || 0) + 1,\n                project.header.tutorial.tutorialStepInfo!.length\n            );\n        }\n        else if (project.header!.tutorialCompleted) {\n            dispatchSetHeaderIdForActivity(\n                project.header.id,\n                project.header.tutorialCompleted.steps,\n                project.header.tutorialCompleted.steps\n            );\n        }\n    }\n\n    protected async handleWorkspaceReadyEventAsync() {\n        if (this.props.activityHeaderId) {\n            const project = await getProjectAsync(this.props.activityHeaderId);\n            this.sendMessage({\n                type: \"pxteditor\",\n                action: \"importproject\",\n                project: project\n            } as pxt.editor.EditorMessageImportProjectRequest)\n        }\n        else {\n            this.sendMessage({\n                type: \"pxteditor\",\n                action: \"startactivity\",\n                path: this.props.tutorialPath,\n                activityType: \"tutorial\"\n            } as pxt.editor.EditorMessageStartActivity);\n        }\n    }\n\n    protected handleEditorTickEvent(event: pxt.editor.EditorMessageEventRequest) {\n        switch (event.tick) {\n            // FIXME: add a better tick; app.editor fires too early\n            case \"app.editor\":\n                this.onEditorLoaded();\n                break;\n            case \"tutorial.complete\":\n                this.onTutorialFinished();\n                break;\n\n        }\n    }\n\n    protected onEditorLoaded() {\n        this.setState({\n            loaded: true\n        });\n    }\n\n    protected onTutorialFinished() {\n        this.finishedTutorial = true;\n        this.props.dispatchSaveAndCloseActivity();\n    }\n}\n\nfunction mapStateToProps(state: SkillMapState, ownProps: any) {\n    if (!state || !state.editorView) return {};\n\n    const { currentActivityId, currentMapId, currentHeaderId, state: saveState } = state.editorView;\n\n    let url = editorUrl\n    let title: string | undefined;\n\n    const activity = state.maps[currentMapId].activities[currentActivityId];\n    if (editorUrl.charAt(editorUrl.length - 1) === \"/\" && !isLocal()) {\n        url = editorUrl.substr(0, editorUrl.length - 1);\n    }\n\n    url += `?controller=1&skillsMap=1`;\n    title = activity.displayName;\n\n    return {\n        url,\n        tutorialPath: activity.url,\n        title,\n        activityId: currentActivityId,\n        activityHeaderId: currentHeaderId,\n        completed: lookupActivityProgress(state.user, currentMapId, currentActivityId)?.isCompleted,\n        save: saveState === \"saving\"\n    }\n}\n\nconst mapDispatchToProps = {\n    dispatchSetHeaderIdForActivity,\n    dispatchCloseActivity,\n    dispatchSaveAndCloseActivity\n};\n\nexport const MakeCodeFrame = connect(mapStateToProps, mapDispatchToProps)(MakeCodeFrameImpl);","/// <reference path=\"./lib/skillMap.d.ts\" />\n\nimport React from 'react';\nimport { connect } from 'react-redux';\n\nimport store from \"./store/store\";\n\nimport { dispatchAddSkillMap, dispatchClearSkillMaps, dispatchSetPageTitle, dispatchSetPageDescription, dispatchSetPageInfoUrl, dispatchSetUser } from './actions/dispatch';\nimport { SkillMapState } from './store/reducer';\nimport { HeaderBar } from './components/HeaderBar';\nimport { Banner } from './components/Banner';\nimport { AppModal } from './components/AppModal';\nimport { SkillCarousel } from './components/SkillCarousel';\n\nimport { parseSkillMap } from './lib/skillMapParser';\nimport { parseHash, getMarkdownAsync, MarkdownSource, parseQuery, guidGen } from './lib/browserUtils';\n\nimport './App.css';\nimport { MakeCodeFrame } from './components/makecodeFrame';\nimport { getUserStateAsync, saveUserStateAsync } from './lib/workspaceProvider';\nimport { Unsubscribe } from 'redux';\n\ninterface AppProps {\n    skillMaps: { [key: string]: SkillMap };\n    activityOpen: boolean;\n    dispatchAddSkillMap: (map: SkillMap) => void;\n    dispatchClearSkillMaps: () => void;\n    dispatchSetPageTitle: (title: string) => void;\n    dispatchSetPageDescription: (description: string) => void;\n    dispatchSetPageInfoUrl: (infoUrl: string) => void;\n    dispatchSetUser: (user: UserState) => void;\n}\n\ninterface AppState {\n    error?: string;\n}\n\nclass AppImpl extends React.Component<AppProps, AppState> {\n    protected queryFlags: {[index: string]: string} = {};\n    protected unsubscribeChangeListener: Unsubscribe | undefined;\n    protected loadedUser: UserState | undefined;\n\n    constructor(props: any) {\n        super(props);\n        this.state = {};\n\n        window.addEventListener(\"hashchange\", this.handleHashChange);\n    }\n\n    protected handleHashChange = (e: HashChangeEvent) => {\n        let hash = parseHash();\n        this.fetchAndParseSkillMaps(hash.cmd as MarkdownSource, hash.arg);\n\n        e.stopPropagation();\n        e.preventDefault();\n    }\n\n    protected async fetchAndParseSkillMaps(source: MarkdownSource, url: string) {\n        const md = await getMarkdownAsync(source, url);\n\n        let loadedMaps: SkillMap[] | undefined;\n\n        if (md) {\n            try {\n                const { maps, metadata } = parseSkillMap(md);\n                if (maps?.length > 0) {\n                    loadedMaps = maps;\n                    this.props.dispatchClearSkillMaps();\n                    maps.forEach(map => {\n                        this.props.dispatchAddSkillMap(map);\n                    })\n                }\n                if (metadata) {\n                    const { title, description, infoUrl } = metadata;\n                    this.props.dispatchSetPageTitle(title);\n                    if (description) this.props.dispatchSetPageDescription(description);\n                    if (infoUrl) this.props.dispatchSetPageDescription(infoUrl);\n                }\n                this.setState({ error: undefined })\n            } catch {\n                const errorMsg = \"Oops! Couldn't load content, please check the URL and markdown file.\"\n                console.error(errorMsg);\n                this.setState({ error: errorMsg });\n            }\n        }\n\n        let user = await getUserStateAsync();\n\n        if (!user) {\n            user = {\n                id: guidGen(),\n                completedTags: {},\n                mapProgress: {}\n            };\n        }\n\n        this.applyQueryFlags(user, loadedMaps);\n        this.loadedUser = user;\n        this.props.dispatchSetUser(user);\n    }\n\n    componentDidMount() {\n        this.unsubscribeChangeListener = store.subscribe(this.onStoreChange);\n        this.queryFlags = parseQuery();\n        let hash = parseHash();\n        this.fetchAndParseSkillMaps(hash.cmd as MarkdownSource, hash.arg);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"hashchange\", this.handleHashChange);\n        if (this.unsubscribeChangeListener) {\n            this.unsubscribeChangeListener();\n        }\n    }\n\n    render() {\n        const { skillMaps, activityOpen } = this.props;\n        const { error } = this.state;\n        const maps = Object.keys(skillMaps).map((id: string) => skillMaps[id]);\n        return (<div className=\"app-container\">\n                <HeaderBar />\n                { activityOpen ? <MakeCodeFrame /> : <div>\n                    <Banner title=\"Game Maker Guide\" icon=\"map\" description=\"Level up your game making skills by completing the tutorials in this guide.\" />\n                    <div className=\"skill-map-container\">\n                        { error\n                            ? <div className=\"skill-map-error\">{error}</div>\n                            : maps?.map((el, i) => {\n                                return <SkillCarousel map={el} key={i} />\n                            })}\n                    </div>\n                </div>\n                }\n                <AppModal />\n            </div>);\n    }\n\n    protected applyQueryFlags(user: UserState, maps?: SkillMap[]) {\n        if (this.queryFlags[\"debugNewUser\"] === \"true\") {\n            user.isDebug = true;\n            user.mapProgress = {};\n            user.completedTags = {};\n        }\n\n        if (this.queryFlags[\"debugCompleted\"] === \"true\") {\n            user.isDebug = true;\n\n            if (maps) {\n                for (const map of maps) {\n                    user.mapProgress[map.mapId] = {\n                        mapId: map.mapId,\n                        activityState: {}\n                    };\n\n                    for (const key of Object.keys(map.activities)) {\n                        const activity = map.activities[key];\n                        if (!user.mapProgress[map.mapId].activityState[activity.activityId]) {\n                            user.mapProgress[map.mapId].activityState[activity.activityId] = {\n                                activityId: activity.activityId,\n                                isCompleted: true\n                            };\n                        }\n                        else {\n                            user.mapProgress[map.mapId].activityState[activity.activityId].isCompleted = true;\n                        }\n\n                        if (activity.tags?.length) {\n                            for (const tag of activity.tags) {\n                                user.completedTags[tag]++;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    protected onStoreChange = async () => {\n        const { user } = store.getState();\n\n        if (user !== this.loadedUser && (!this.loadedUser || user.id === this.loadedUser.id)) {\n            await saveUserStateAsync(user);\n            this.loadedUser = user;\n        }\n    }\n}\n\nfunction mapStateToProps(state: SkillMapState, ownProps: any) {\n    if (!state) return {};\n    return {\n        skillMaps: state.maps,\n        activityOpen: !!state.editorView\n    };\n}\n\nconst mapDispatchToProps = {\n    dispatchAddSkillMap,\n    dispatchClearSkillMaps,\n    dispatchSetPageTitle,\n    dispatchSetPageDescription,\n    dispatchSetPageInfoUrl,\n    dispatchSetUser\n};\n\nconst App = connect(mapStateToProps, mapDispatchToProps)(AppImpl);\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store/store';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n\n    document.getElementById('root')\n);"],"sourceRoot":""}